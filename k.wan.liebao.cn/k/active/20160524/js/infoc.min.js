/*! infoc.js v 0.0.5 */
(function() {
    var browser = 'other',
        system = 'other',
        device = 'PC';

    var pf = navigator.platform,
        ua = navigator.userAgent,
        href = window.location.href,
        locSearch = window.location.search;

    // 埋点地址
    var root = '/';

    // window系统匹配表
    var WinMap = {
        'windows nt 5.0': 'Win2000',
        'windows 2000': 'Win2000',
        'windows nt 5.1': 'WinXP',
        'windows xp': 'WinXP',
        'windows nt 5.2': 'Win2003',
        'windows 2003': 'Win2003',
        'windows nt 6.0': 'WinVista',
        'windows vista': 'WinVista',
        'windows nt 6.1': 'Win7',
        'windows 7': 'Win7',
        'windows nt 6.2': 'Win8',
        'windows 8': 'Win8',
        'windows nt 6.3': 'Win8.1',
        'windows 8.1': 'Win8.1'
    };
    
    var LinuxMap = {
        'android': 'Android',
        'linux': 'Linux'
    };
    
    // 各系统匹配表
    var sysMap = {
        'win32': WinMap,
        'windows': WinMap,
        'ipad': 'iOS',
        'iphone': 'iOS',
        'macintosh': 'Mac',
        'macIntel': 'Mac',
        'mac': 'Mac',
        'x11': 'Unix',
        'linux': LinuxMap
    };
    // 生成uuid
    function createUUID(isClient) {
        var s = [],
            hexDigits = "0123456789abcdef",
            i, uuid;

        for (i = 0; i < 36; i++) {
            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
        }

        s[14] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01

        if(isClient) {
            uuid = s.join("").substr(0, 32);
        } else {
            s[8] = s[13] = s[18] = s[23] = "-";
            uuid = s.join("");
        }
        return uuid;
    }
    // 合并参数
    function buildQuery(obj) {
        var i,
            arr = [];

        if(typeof obj === "object") {
            for(i in obj) {
                if(obj.hasOwnProperty(i)) {
                    arr.push(i + "=" + encodeURIComponent(obj[i] == null ? "" : obj[i] + ""));
                }
            }
        }
        return arr.join("&");
    }
    // 发起请求
    function create(url) {
        var img = new Image(0, 0);

        img.onload = function() {
            img = null;
        };
        img.src = url;
        if(img.complete) {
            img = null;
        }
        //alert(url);
    }
    // 初始化操作
    function initialize() {
        var lua = ua.toLowerCase(),
            lpf = pf.toLowerCase(),
            match, version;

        // 判断操作系统
        for(i in sysMap) {
            if(sysMap.hasOwnProperty(i) && lpf.indexOf(i) > -1) {
                if(typeof sysMap[i] === 'object') {
                    for(j in sysMap[i]) {
                        if(sysMap[i].hasOwnProperty(j) && lua.indexOf(j) > -1) {
                            system = sysMap[i][j];
                            break;
                        }
                    }
                } else {
                    system = sysMap[i];
                }
                break;
            }
        }
        
        // 判断设备
        if(system === 'Mac') {
            device = 'Mac';
        }
        else if(system === 'iOS') {
            match = /iPad|iPhone/.exec(ua);
            device = match && match[0] || device;
        }
        else if(system === 'Android') {
            device = 'Mobile';
        }

        // 判断浏览器
        match = /(chrome)[ \/]([\w.]+)/.exec(lua) ||
        /(webkit)[ \/]([\w.]+)/.exec(lua) ||
        /ms(ie)\s([\w.]+)/.exec(lua) ||
        /(firefox)[ \/]([\w.]+)/.exec(lua) ||
        [];

        if(match && match[1]) {
            if(match[1] === 'ie') {
                // ie判断版本号
                version = /msie\s([\d\.]+)/.exec(lua);
                browser = match[1] + (version && version[1] ? parseInt(version[1]) : '');
            }
            else if(match[1] === 'webkit') {
                browser = 'Webkit';
                // webkit内核类 主要是移动端
                if(lua.indexOf('safari') > -1 && (system === 'iOS' || system === 'MAC')) {
                    browser = 'Safari';
                }
            }
            else {
                // 默认 首字母大写
                browser = match[1].substr(0, 1).toUpperCase() + match[1].substr(1);
            }
        }
    }
    initialize();

    // 埋点
    function Infoc(url, obj) {
        this.setRoot(url);
        this.params = {
            product_no: 0,
            public_index: 0,
            business_index: 0
        };
        this.addParams(obj);

        return this;
    }

    Infoc.prototype = {
        root: "/",
        // 会有引用覆盖问题
        // params: {
        //     product_no: 0,
        //     public_index: 0,
        //     business_index: 0
        // },
        setRoot: function(url) {
            this.root = url;
            return this;
        },
        addParams: function(obj) {
            if(typeof obj === "object") {
                for(i in obj) {
                    if(obj.hasOwnProperty(i)) {
                        if(typeof i === "string" || typeof i === "number") {
                            this.params[i] = obj[i];
                        }
                    }
                }
            }
            return this;
        },
        report: function(obj, async) {
            if(typeof obj !== "object") {
                return;
            }

            var i, url;
            for(i in this.params) {
                if(this.params.hasOwnProperty(i)) {
                    if(typeof obj[i] === "undefined") {
                        obj[i] = this.params[i];
                    }
                }
            }
            // 拼接上报url
            url = this.root + "?" + buildQuery(obj);
            // 默认异步
            async = async == null ? true : async;

            if(async) {
                setTimeout(function () {
                    create(url);
                }, 0);
            } else {
                create(url);
            }
            return this;
        }
    };
    // 获取设备参数
    Infoc.getDevice = function() {
        return {
            browser: browser,
            system: system,
            device: device
        };
    };
    // 获得参数
    Infoc.queryString = function (name) {
        var i = 0,
            params = {},
            key,
            value,
            pos,
            search = locSearch ? locSearch.substr( 1 ).split("&") : [];
        
        for ( ; i < search.length; i++ ) {
            pos = search[ i ].indexOf("=");
            if ( pos > 0 ) {
                key = search[ i ].substring( 0, pos );
                value = search[ i ].substring( pos + 1 );
                params[ key ] = decodeURIComponent( value );
            }
        }
        return params[ name ] ? params[ name ] : undefined;
    }

    // 获取唯一值
    Infoc.getUUID = function(isClient) {
        var key = isClient ? "infoc_client_uuid" : "infoc_uuid";
            uuid = Infoc.cookie(key);
        if(!uuid) {
            uuid = createUUID(isClient);
            Infoc.cookie(key, uuid, {path: "/", expires: 30 * 24 * 3600});
        }
        return uuid;
    };

    window.Infoc = Infoc;
})();


(function(undefined) {

    function cookie(name, value) {
        return name != null ?
            cookie[value === undefined ? "get" : "set"].apply(null, arguments) :
            undefined;
    }
    // 获取cookie
    cookie.get = function(name) {
        var ret, arr,
            i, len;

        if(document.cookie) {
            arr = document.cookie.split("; ");
            for(i = 0, len = arr.length; i < len; i++) {
                if(arr[i].indexOf(name + "=") === 0) {
                    ret = decodeURIComponent(arr[i].substr(name.length + 1));
                    break;
                }
            }
        }
        return ret;
    };
    // 设置cookie
    cookie.set = function(name, value, options) {
        var arr = [], date;
        options = options || {};

        // 配置过期时间
        if(value == null) {
            value = "";
            options.expires = -1;
        }
        if(typeof options.expires === "number") {
            date = new Date();
            date.setTime(date.getTime() + options.expires * 1000);
        } else if(options.expires instanceof Date) {
            date = options.expires;
        }

        arr.push(name + "=" + encodeURIComponent(value));
        date && arr.push("expires=" + date.toUTCString());
        options.path && arr.push("path=" + options.path);
        options.domain && arr.push("domain=" + options.domain);
        options.secure && arr.push("secure");

        return document.cookie = arr.join("; ");
    };

    Infoc.cookie = cookie;
})();
