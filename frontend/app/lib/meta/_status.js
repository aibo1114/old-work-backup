// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = cf.st = {
    l: {
      init: '编辑中',
      locked: '被锁定',
      waiting: '待审核',
      pub: '发布',
      disable: '禁用',
      expired: '超时'
    },
    common_status: {
      init: {
        v: 0
      },
      waiting: {
        v: 1
      },
      pub: {
        v: 2
      },
      disable: {
        v: 3
      }
    },
    user_status: {
      init: {
        v: 0,
        l: '未激活'
      },
      active: {
        v: 1,
        l: '可用'
      },
      certified: {
        v: 2,
        l: '认证'
      },
      locked: {
        v: 3
      },
      disable: {
        v: 4,
        l: '禁用'
      }
    },
    init: function(et) {
      return _.keys(this[et + "_status_hash"])[0];
    },
    text: function(e, k) {
      return this[e + "_status_hash"][k];
    },
    buildMap: function(kk) {
      var ek, et, exObj, hash, k, l, map, ref, v;
      et = kk.split('_')[0];
      hash = this[kk + "_hash"] = {};
      map = this[kk + "_map"] = {};
      ref = this[kk];
      for (k in ref) {
        v = ref[k];
        if (v) {
          l = v.l || _i[kk + "_" + k] || cf.st.l[k] || k.capitalize();
          hash[v.v] = l;
          map[k] = v.v;
        }
      }
      if (!m) {
        return;
      }
      m[kk] = {
        prop: [
          m._select('status', {
            attrs: {
              data: function() {
                return hash;
              }
            }
          }), m._textarea('memo', {
            valid: {
              required: true
            }
          })
        ]
      };
      if (!m[et]) {
        return;
      }
      ek = "process" + (et.capitalize()) + "Status";
      exObj = {
        btn: {},
        event: {}
      };
      exObj.btn[ek] = function() {
        return util.iBtn("cog", ek);
      };
      exObj.event[ek] = {
        type: 'click',
        fun: function(e) {
          var d;
          d = this.findData(e);
          app.dm.form('air', kk, {
            toFetch: false,
            title: '处理订单',
            urlRoot: util.restUrl('push', et, '_id', d.id, 'proc'),
            before: function(d) {
              $.extend(d, {
                username: user.username,
                uid: user._id,
                _root: {
                  status: d.status
                }
              });
              return d;
            },
            _saveSuccess: function(model) {
              return model.view.closeDlg();
            }
          });
          e.preventDefault();
          return e.stopPropagation();
        }
      };
      return $.extend(true, m[et], exObj);
    },
    ctx: function(status, st) {
      var k, v;
      for (k in status) {
        v = status[k];
        if (v && v.v === st) {
          return v;
        }
      }
      return null;
    },
    addTrack: function(str, memo) {
      if (memo) {
        str = str + ',' + memo;
      }
      return str + "," + (user.username + ':' + user.id) + "__" + (new Date().getTime());
    },
    add: function(name, opt) {
      var k, p;
      k = name + "_status";
      this[k] = opt;
      this.buildMap(k);
      if (m[name] && m[name].prop && (p = m[name].prop.findBy('code', 'status'))) {
        return p.attrs.data = this[name + "_status_hash"];
      }
    }
  };

  m.common.proc = {
    code: 'proc',
    showText: function(v, it) {
      var hash, i, len, str;
      if (v && v.length) {
        hash = cf.st[it._e + "_status_hash"];
        str = '';
        for (i = 0, len = v.length; i < len; i++) {
          it = v[i];
          str += "<div class='well well-sm m0'><b>【" + hash[it.status] + "】</b>" + it.username + " " + (it.lastUpdated.dStr()) + "<br/>“" + it.memo + "”</div>";
        }
        return str;
      }
    }
  };

}).call(this);

//# sourceMappingURL=_status.js.map
