// Generated by CoffeeScript 1.12.7
(function() {
  $.extend(m, {
    xFile: {
      prop: [
        m._select('func', {
          attrs: {
            data: ['head', 'img']
          }
        }), {
          code: 'pubTime',
          type: "text",
          xtype: 'dTime',
          isShow: function() {
            return user.isAdmin();
          },
          attrs: {
            format: "yyyy-mm-dd HH:ii:ss",
            minuteStep: 60
          },
          valid: {
            required: true,
            dateTime: true
          }
        }, _ep('description')
      ],
      handleData: function(d) {
        if (_.isString(d)) {
          return {
            path: util.resPath(cf.community, d),
            type: 'img'
          };
        } else {
          return d;
        }
      },
      item: ["title", 'pubTime', "description", "row"],
      filter: ['func'],
      event: {
        popEdit: {
          type: 'click',
          fun: function(e) {
            var d, eid, that;
            that = this;
            eid = util.getTargetId(e).split('.')[0];
            d = that._getObj(eid, {});
            app.dm.form('air', "xFile", {
              data: function() {
                return d;
              },
              toFetch: false,
              className: "form-break",
              preRender: cf.view.form.prototype.preRender,
              _save: function() {
                this.closeDlg();
                return that._setObj(this.model.attributes, eid);
              }
            });
            return e.stopPropagation();
          }
        },
        pickIt: {
          type: 'click',
          fun: function(e) {
            var opt;
            opt = {
              id: util.getTargetId(e),
              type: this.type,
              func: this.func
            };
            this.p.ctn.append(this.p.addItem.call(this.p, opt));
            return this.p._addArrayItem(opt);
          }
        },
        crop: {
          type: 'click',
          fun: function(evt) {
            var co, p;
            co = _models['_' + this.func + 'Crop'];
            if (co) {
              p = $(evt.currentTarget).parent().prev().attr('src');
              if (p.indexOf('_thumb') > 0) {
                p = p.replace('/_thumb', '');
              }
              if (p.indexOf('?') > 0) {
                p = p.substring(0, p.indexOf('?'));
              }
              co.path = p;
              co.pid = mlu.getTargetId(evt);
              co.renderTo = $(evt.currentTarget).parent().prev();
              return new mllv.crop(co).dlg();
            }
          }
        },
        thumb: {
          type: 'click',
          fun: function(e) {
            app.dm.form('air', 'common', {
              title: 'Thumb Picture',
              prop: [m._number('width'), m._number('height')],
              data: {
                path: this.findData(e).toJSON().path.replace(cf.community.resPath + "/upload/" + cf.code + "/", '')
              },
              btns: ['save'],
              urlRoot: util.actUrl('upload', 'thumb')
            });
            return $('#thumbForm').find('input[name=path]').val(util.getTargetId(e));
          }
        },
        del: {
          type: 'click',
          fun: function(e) {
            var id, img, opt, ref, src, t, that, wt;
            that = this;
            t = util.ct(e);
            src = t.parent().prev().attr('src');
            id = src.split(cf.code + '/')[1].split('?')[0];
            if (confirm(ii('m_sure', ii('del')))) {
              img = t.closest('.media');
              opt = {
                id: id,
                thumb: (ref = this.upOpt) != null ? ref.thumb : void 0
              };
              if ((wt = img.attr('wt')) && wt) {
                popMsg('wt del' + wt);
                img.remove();
                if (typeof that._delArrayItem === "function") {
                  that._delArrayItem(wt, true);
                }
                return popMsg(that._toStr());
              } else {
                if (confirm(ii('delRealFile'))) {
                  return $.post(util.actUrl("upload", "remove"), opt, function(d) {
                    img.remove();
                    alert(id);
                    if (typeof that._delArrayItem === "function") {
                      that._delArrayItem(id);
                    }
                    if (d.folder) {
                      return that.data.del(d.id);
                    }
                  }).fail(function() {
                    return typeof that._delArrayItem === "function" ? that._delArrayItem(id) : void 0;
                  });
                } else {
                  img.remove();
                  return typeof that._delArrayItem === "function" ? that._delArrayItem(id) : void 0;
                }
              }
            }
          }
        }
      },
      btn: {
        crop: function() {
          return util.iBtn("screenshot", "crop");
        },
        thumb: function() {
          return util.iBtn("fullscreen", "thumb");
        },
        insertToPage: function() {
          return util.iBtn("import", "insertToPage");
        },
        insertToHead: function() {
          return util.iBtn("edit", "insert");
        }
      }
    }
  });

}).call(this);

//# sourceMappingURL=xFile.js.map
