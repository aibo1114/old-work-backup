// Generated by CoffeeScript 1.12.7
(function() {
  var fn, k, meta, ref, v;

  module.exports = meta = {
    p: {
      hidden: {},
      number: {},
      text: {},
      textarea: {
        attrs: {
          rows: 5
        }
      },
      radio: {
        val: 1,
        attrs: {
          inline: true,
          data: function() {
            return {
              "true": '是',
              "false": '否'
            };
          }
        }
      }
    },
    _select: function(code, opt) {
      return $.extend(true, {
        code: code,
        type: 'select',
        showText: function(v, d, m) {
          var md;
          if ((md = m.prop.codeBy(code)) && md.attrs && md.attrs.data) {
            return md.attrs.data[v];
          } else {
            return v;
          }
        },
        attrs: {}
      }, opt);
    },
    _money: function(code, opt) {
      return $.extend(true, {
        code: code,
        type: 'number',
        group: {
          suf: '元'
        },
        valid: {
          required: true,
          min: 0.01
        },
        events: {
          keyup: function(e) {
            var p, ref, t, v, y;
            t = util.ct(e);
            v = t.val() + '';
            ref = v.split('.'), y = ref[0], p = ref[1];
            if (p && p.length > 2) {
              return t.val(y + "." + (p.substr(0, 2)));
            }
          }
        }
      }, opt);
    },
    _number: function(code, opt) {
      return $.extend(true, {
        code: code,
        type: 'number'
      }, opt);
    },
    _content: function(code, opt) {
      var ty;
      if (code == null) {
        code = 'content';
      }
      ty = util.getCookie('_xe') === 'md' ? 'markdown' : 'content';
      return $.extend(true, {
        code: code,
        type: 'textarea',
        xtype: ty,
        attrs: {
          rows: 10
        }
      }, opt);
    },
    _btn: function(w) {
      var op;
      op = {
        code: '_btn',
        type: 'btn'
      };
      if (w) {
        op.w = w;
      }
      return op;
    },
    _iObj: function(code, entity, opt) {
      return $.extend(true, {
        code: code,
        type: 'text',
        xtype: 'inlineObj',
        attrs: {
          entity: entity
        }
      }, opt);
    },
    _n2o: function(code, entity, opt) {
      if (entity == null) {
        entity = code;
      }
      return $.extend(true, {
        code: code,
        type: 'text',
        xtype: 'selectBox',
        bind: true,
        attrs: {
          clickShow: true,
          searchItem: 'title',
          setAttrs: '_id,title',
          panelOpt: {
            entity: entity
          }
        }
      }, opt);
    },
    _user: function(opt) {
      var cd;
      if (opt == null) {
        opt = {};
      }
      cd = 'user';
      if (opt.attrs == null) {
        opt.attrs = {};
      }
      return $.extend(true, {
        code: cd,
        type: 'text',
        xtype: 'selectBox',
        bind: true,
        showText: function(v) {
          return v != null ? v.username : void 0;
        },
        attrs: {
          clickShow: true,
          searchItem: 'username',
          setAttrs: '_id,username',
          panelOpt: {
            entity: cd
          }
        }
      }, opt);
    },
    _link: function(code, opt) {
      return $.extend(true, {
        code: code,
        type: "text",
        valid: {
          required: true,
          minlength: 2,
          maxlength: 100
        },
        showText: function(v, it) {
          var hf;
          hf = "/" + it._e + "/" + it._id;
          if (cf.index === 'console') {
            hf += '?_c=1';
          }
          return "<a target='_blank' href='" + hf + "'>" + v + "</a>";
        }
      }, opt);
    },
    _cat: function(type, opt) {
      return $.extend(true, {
        code: 'cat',
        type: 'select',
        attrs: {
          entity: 'cat',
          keyVal: 'code,title',
          criteriaOpt: function() {
            return {
              q: {
                $or: [
                  {
                    type: {
                      $in: [type, '']
                    }
                  }, {
                    type: {
                      $exists: false
                    }
                  }
                ]
              },
              max: 50
            };
          }
        }
      }, opt);
    },
    _checkbox: function(code, opt) {
      var oo;
      oo = {
        code: code,
        type: 'checkbox',
        attrs: {
          inline: true,
          data: function() {
            return {
              "true": '是'
            };
          }
        },
        events: {
          'change': function(e) {
            var d, t;
            t = util.ct(e);
            d = this.data;
            if (d && d["true"]) {
              if (t.is(':checked')) {
                return this.model.set(code, true);
              } else {
                return this.model.set(code, false);
              }
            }
          }
        }
      };
      return $.extend(true, oo, opt);
    },
    _pic: function(name, opt) {
      var oo;
      oo = {
        code: name + "Pic",
        type: 'holder',
        xtype: 'refFileCollection',
        noName: true,
        attrs: {
          multi: false,
          func: name,
          pickBtn: true
        },
        showText: function(v, it) {
          if (name === 'portrait') {
            return tu.userPic(cf.community, it._id);
          } else {
            return tu.imgItem(it, cf.community, name);
          }
        }
      };
      if (name === 'slide') {
        $.extend(oo.attrs, {
          multi: true,
          pick: true
        });
      }
      return $.extend(true, oo, opt);
    },
    _tag: function(tag, cls, text) {
      return {
        type: '_tag',
        attrs: {
          tag: tag,
          cls: cls,
          title: text
        }
      };
    },
    _view: function(code, sp, op) {
      var opt;
      opt = {
        code: code,
        type: 'view'
      };
      if (sp) {
        opt.showText = function(v) {
          return v != null ? v[sp] : void 0;
        };
      }
      return $.extend(opt, op);
    },
    _itemTable: function(name, opt) {
      var attrs, base, base1;
      if (opt == null) {
        opt = {};
      }
      if (opt.attrs == null) {
        opt.attrs = {};
      }
      if ((base = opt.attrs).itemBtns == null) {
        base.itemBtns = ['up', 'down', 'popEdit', 'formDel'];
      }
      if ((base1 = opt.attrs).btns == null) {
        base1.btns = ['popAdd'];
      }
      attrs = {
        entity: name,
        toFetch: false,
        _func: null,
        _prop: name
      };
      if (m[name]) {
        $.extend(attrs, m[name].listOpt);
      }
      return $.extend(true, {
        code: name,
        label: ' ',
        xtype: 'jsonTable',
        attrs: attrs
      }, opt);
    },
    exp: function(name, opt) {
      var et, ref, v;
      v = name.indexOf(':') > -1 ? ((ref = name.split(':'), et = ref[0], name = ref[1], ref), meta[et] ? meta[et].prop.codeBy(name) : (log('no meta: ' + et), {})) : meta.common[name];
      return $.extend(true, {
        code: name
      }, v, opt);
    },
    common: {
      title: {
        type: "text",
        valid: {
          required: true,
          minlength: 3,
          maxlength: 100
        }
      },
      subTitle: {
        type: "text"
      },
      code: {
        type: "text",
        valid: {
          required: true,
          char: true,
          minlength: 3
        }
      },
      label: {
        type: 'text'
      },
      isAccept: {
        type: 'checkbox',
        data: [
          {
            label: 'Enable',
            select: true,
            val: true
          }
        ]
      },
      password: {
        type: "password",
        id: "rpsd",
        valid: {
          required: true,
          minlength: 3
        }
      },
      name: {
        type: "text",
        valid: {
          required: true,
          minlength: 2,
          maxlength: 100
        }
      },
      phone: {
        type: "tel",
        valid: {
          number: true,
          maxlength: 15,
          minlength: 7
        }
      },
      wid: {
        type: "text"
      },
      address: {
        type: "text",
        attrs: {},
        valid: {
          required: true,
          minlength: 5,
          maxlength: 100
        }
      },
      fee: {},
      href: {
        type: "text",
        valid: {
          url: true
        }
      },
      user: {
        type: 'holder',
        xtype: 'selectBox',
        attrs: {
          key: '_id',
          label: 'username',
          showImg: 'portrait',
          searchItem: 'username',
          setAttrs: '_id,username',
          panelOpt: {
            entity: 'user',
            noStr: 'Search User by username or Email'
          }
        }
      },
      username: {
        type: "text",
        valid: {
          required: true,
          minlength: 2,
          maxlength: 20
        }
      },
      email: {
        type: "email",
        valid: {
          required: true,
          email: true
        }
      },
      row: {
        type: "number",
        ph: ii('row_ph'),
        val: 1,
        valid: {
          number: true,
          min: -10000,
          max: 10000000
        }
      },
      link: {
        type: "text",
        valid: {
          url: true
        }
      },
      url: {
        type: "text",
        valid: {
          url: true
        }
      },
      introduction: {
        type: "textarea",
        attrs: {
          rows: 4
        },
        valid: {
          required: true
        }
      },
      price: {
        type: 'number',
        valid: {
          min: 0
        }
      },
      memo: {
        type: "textarea",
        attrs: {
          rows: 4
        }
      },
      description: {
        type: "textarea",
        attrs: {
          rows: 4
        }
      },
      status: {
        type: "radio",
        attrs: {
          inline: true
        },
        isShow: function() {
          return user.isAdmin();
        },
        showText: function(v, it) {
          var m;
          if (v == null) {
            v = 0;
          }
          m = cf.st[it._e + "_status_hash"] || cf.st["content_status_hash"];
          if (m) {
            return m[+v];
          } else {
            return v;
          }
        }
      },
      brief: {
        type: 'textarea',
        ph: '自动截取正文的前200个字',
        attrs: {
          rows: 3,
          size: 200
        }
      },
      tags: {
        type: "text"
      },
      roleCode: {
        type: 'text'
      }
    },
    _: {
      btn: {},
      fmBtn: {},
      event: {}
    }
  };

  Array.prototype.codeBy = function(val) {
    return this.findBy('code', val);
  };

  ref = meta.p;
  fn = function(k) {
    return meta["_" + k] = function(name, opt) {
      return $.extend(true, {
        code: name,
        type: k
      }, meta.p[k], opt);
    };
  };
  for (k in ref) {
    v = ref[k];
    fn(k);
  }

}).call(this);

//# sourceMappingURL=common.js.map
