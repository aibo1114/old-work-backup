// Generated by CoffeeScript 1.12.7
(function() {
  var entity;

  entity = require('./entity');

  cf.model.entities = Backbone.Collection.extend({
    initialize: function(data, opt) {
      this.criteria = {
        offset: 0,
        max: 10
      };
      this.count = 0;
      if (opt) {
        $.extend(true, this, opt);
      }
      if (data) {
        this.count = data.length;
      }
      if (!this.entity) {
        this.entity = 'common';
      }
      if (this.meta == null) {
        this.meta = meta[this.entity] || {
          prop: []
        };
      }
      this.model = this.getEntityType(this.entityOpt);
      if (this.afterAjax) {
        this.listenTo(this, 'sync', this.afterAjax);
      }
      return typeof this.init === "function" ? this.init() : void 0;
    },
    getEntityType: function(o) {
      var opt;
      if (o == null) {
        o = {};
      }
      opt = $.extend({
        entity: this.entity,
        _col: true
      }, o);
      if (this.entityType) {
        return this.entityType.extend(opt);
      } else {
        return entity.extend(opt);
      }
    },
    url: function() {
      if (this.entityOpt) {
        return this.entityOpt.urlRoot;
      } else {
        return this.meta.url || util.restUrl(this.entity);
      }
    },
    parse: function(res) {
      var d, i, j, len, ref;
      this.data = res.entities || res;
      if (this.meta.handleListData) {
        this.data = this.meta.handleListData(this.data);
      }
      if (this.meta.handleData) {
        ref = this.data;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          d = ref[i];
          this.data[i] = this.meta.handleData(d);
        }
      }
      if (this.view) {
        this.view.data = this.data;
      }
      if (res.count !== null) {
        this.count = res.count;
      }
      return this.data;
    },
    setCriteria: function(k, v) {
      if (_.isObject(k)) {
        return $.extend(this.criteria.q || (this.criteria.q = {}), k);
      } else {
        return this.criteria[k] = v;
      }
    },
    unsetCriteria: function(k) {
      return util.del(k, this.criteria);
    },
    resetFetch: function(type, pNum, op) {
      var opt;
      this.view.ctn.addClass('loadingData');
      if (type) {
        switch (type) {
          case 'next':
            this.criteria.offset += this.criteria.max;
            break;
          case 'prev':
            this.criteria.offset -= this.criteria.max;
            break;
          case 'one':
            this.criteria.offset = pNum * this.criteria.max;
            break;
          case 'max':
            this.criteria.offset = 0;
            this.criteria.max = pNum;
        }
      }
      opt = {
        data: this.criteria,
        reset: true
      };
      if (cf._jsonp) {
        opt.dataType = 'jsonp';
      }
      return this.fetch($.extend(opt, op));
    }
  });

  module.exports = cf.model.entities;

}).call(this);

//# sourceMappingURL=entities.js.map
