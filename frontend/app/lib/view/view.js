// Generated by CoffeeScript 1.12.7
(function() {
  var itemView, rObj;

  itemView = require('./collection/tdView');

  rObj = function(ctn, ob) {
    var ccc, k, results, tb, v;
    tb = ctn.mk('table', {
      "class": _st.tb(1, 1, 1, 0)
    });
    results = [];
    for (k in ob) {
      v = ob[k];
      tb.mk('tr', null, "<th class='col-xs-3'>" + k + "</th><td class='col-xs-9'>" + v + "</td>");
      if (_.isObject(v)) {
        ccc = tb.find('tr').last().find('td');
        ccc.empty();
        results.push(rObj(ccc, v));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  module.exports = cf.view.view = require('./model').extend({
    mode: _st.mode,
    head: true,
    foot: true,
    renderAll: false,
    xeditor: [],
    title: ii(this.entity),
    reRendered: true,
    cols: '30%,auto',
    modeContext: function() {
      var d;
      d = cf.view.tag.prototype.modeContext.call(this);
      d.tag = 'table';
      return d;
    },
    title: function() {
      return iim('m_view', ii(this.entity));
    },
    events: {
      'click .inDel': function(e) {
        var d, k, mod, t;
        if (!confirm(ii('m_sure'))) {
          return;
        }
        mod = this.model;
        t = util.ct(e);
        k = t.parent().prev().attr('name');
        d = {};
        d[k] = 1;
        return new cf.model.entity({
          _id: mod.id
        }, {
          entity: this.entity
        }).save('_unset', d, {
          success: function() {
            return t.closest('tr').remove();
          }
        });
      },
      'click .inMod': function(e) {
        var cm, code, opt, v;
        code = util.ct(e).attr('code');
        cm = this.prop.codeBy(code);
        v = this;
        opt = $.extend({
          title: iim('m_edit', iie(this.entity, code)),
          pm: this.model,
          prop: [cm],
          data: {
            _id: this.model.id
          },
          btns: ['save'],
          _saveSuccess: function(m) {
            popMsg('修改成功');
            m.view.closeDlg();
            return v.model.set(code, m.get(code));
          }
        }, cm.editable);
        return app.dm.form('air', this.entity, opt);
      },
      'click .newProp': function(e) {
        var mod;
        mod = this.model;
        return app.dm.form('air', 'common', {
          title: '新建属性',
          prop: [_ep('code'), _ep('val')],
          _save: function() {
            var k, that, v;
            that = this;
            k = this.model.get('code');
            v = this.model.get('val');
            return mod.save(k, v, {
              patch: true,
              wait: true,
              success: function() {
                return that.closeDlg();
              }
            });
          },
          btns: ['save']
        });
      },
      'click .back': function(e) {
        return history.go(-1);
      },
      'click .process': function(e) {
        return log('process');
      }
    },
    enhanceContent: function() {
      if (this.btns) {
        return this.foot.append('<div class="btnCtn"></div>');
      }
    },
    setBtns: cf.view.form.prototype.setBtns,
    newLine: function(it) {
      var bb, bc, bctn, box, i, k, label, len, ref;
      k = it.code;
      box = it.noLabel || it.xtype === 'jsonTable' ? $("<tr><td colspan='2'><span name='" + k + "'></span></td></tr>") : (label = it.label || iie(this.entity, k), $("<tr><th>" + label + "</th><td><span name='" + k + "'>" + (it.val || '') + "</span></td></tr>"));
      bctn = box.find('[name]');
      bc = $("<span class='fCtn'></span>");
      if (this.editable || it.editable) {
        bc.append(tu.icon('edit', 'a', null, "inMod", "code='" + it.code + "'"));
      }
      if (this.canDel || it.canDel) {
        bc.append(tu.icon('remove', 'a', null, "inDel"));
      }
      if (it.btns) {
        ref = it.btns;
        for (i = 0, len = ref.length; i < len; i++) {
          bb = ref[i];
          if (this.isShow(bb)) {
            bc.append(tu.genBtn(bb));
          }
        }
      }
      if (bc.children().length) {
        bctn.parent().addClass('fCtnTd').append(bc);
      }
      this.ctn.append(box);
      return box;
    },
    preRender: function() {
      var bctn, cc, cols, cstr, i, id, it, j, k, len, len1, od, opt, ref, ref1, ref2, v;
      this.ctn = this.$('table');
      if (this.model) {
        this.data = this.model.toJSON();
      }
      cstr = '<thead><tr>';
      ref = this.cols.split(',');
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        cstr += "<th style='width: " + it + "'></th>";
      }
      cstr += '</tr></thead>';
      this.ctn.append(cstr);
      if (this._showAll) {
        this.prop = [];
        ref1 = this.data;
        for (k in ref1) {
          v = ref1[k];
          if (!k.startsWith('_')) {
            od = this.meta.prop.codeBy(k) || {
              code: k
            };
            this.prop.push($.extend(od, this._showAll[k]));
          }
        }
      }
      ref2 = this.prop || this.meta.prop || [];
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        it = ref2[j];
        if (!this.isShow(it) || !it.code || it.code.startsWith('_')) {
          continue;
        }
        bctn = this.newLine(it).find('[name]');
        k = it.code;
        it.val = v = this.data[k];
        if (it.showText) {
          bctn.html(it.showText(v, this.data, this.meta, this));
        } else if (it.xtype) {
          if (it.attrs == null) {
            it.attrs = {};
          }
          if ($.isFunction(it.attrs.data)) {
            it.attrs.data = it.attrs.data(this.data);
          }
          !(it.id ? id = it.id : id = it.id = util.randomChar(4));
          bctn.attr('id', id);
          opt = {
            name: k,
            val: this.data[k],
            form: this,
            dMode: true,
            itemBtns: []
          };
          if (it.bind) {
            opt.el = '#' + id;
            opt.parent = null;
          } else if (it.type === 'holder') {
            opt.parent = this.$("#" + id + " .holder");
          } else {
            opt.parent = this.$('#' + id);
          }
          this.xeditor.push({
            xtype: it.xtype,
            opt: $.extend({}, it.attrs, opt)
          });
        } else if (_.isArray(v)) {
          cc = bctn.parent().removeAttr('class').empty();
          if (v[0] && _.isObject(v[0])) {
            cols = (function() {
              var l, len2, ref3, results;
              ref3 = _.keys(v[0]);
              results = [];
              for (l = 0, len2 = ref3.length; l < len2; l++) {
                k = ref3[l];
                results.push({
                  code: k,
                  type: 'text'
                });
              }
              return results;
            })();
            cols.push({
              code: '_btn',
              type: 'btn'
            });
            new cf.view.table({
              entity: 'inputData',
              toFetch: false,
              itemBtns: ['popEdit', 'formDel'],
              head: false,
              foot: false,
              cols: cols,
              parent: cc,
              data: v
            });
          }
        } else if (_.isObject(v)) {
          rObj(bctn, it);
        } else {
          bctn.append(itemView(this.data, it, this.entity, it));
        }
      }
      return cf.view.form.prototype.renderXEditor.call(this);
    },
    reRender: function(m) {
      var k, p, pp, ref, v;
      if (!this.ctn) {
        return;
      }
      ref = m.changed;
      for (k in ref) {
        v = ref[k];
        if (k.startsWith('_')) {
          return;
        }
        p = this.$("[name='" + k + "']");
        if (p.length) {
          pp = this.meta.prop.codeBy(k);
          if (pp.showText) {
            v = pp.showText(v);
          }
          p.html(v);
        } else {
          this.ctn.append(this.newLine({
            code: k,
            val: v
          }));
        }
      }
    }
  });

  m._.fmBtn.close = function() {
    return {
      key: 'close',
      label: ii('close'),
      cls: _st.btn(null, 'lg', null) + ' pull-left',
      event: function() {
        return this.closeDlg();
      }
    };
  };

  m._.fmBtn.newProp = function() {
    return {
      label: '新建属性',
      cls: _st.btn(null, 'lg', null)
    };
  };

  $.extend(cf.dm, {
    view: function(p, entity, eid, opt) {
      var init, pdd;
      pdd = {};
      if (_.isString(eid)) {
        pdd[cf.id] = eid;
      } else {
        opt = eid;
      }
      init = {
        cleanAll: true,
        entity: entity,
        parent: p,
        data: pdd,
        btns: ['back'],
        tagClass: _st.tb(1, 1, 1, 0, 'viewTable')
      };
      return cf.dm.l('view', p, cf._packOpt(init, entity, 'view', opt));
    }
  });

}).call(this);

//# sourceMappingURL=view.js.map
