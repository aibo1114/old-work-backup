// Generated by CoffeeScript 1.12.7
(function() {
  cf._snPlugin = {};

  module.exports = _exv('sForm', 'model', {
    num: 0,
    tagName: 'form',
    listenTime: 'listenToOnce',
    className: 'form-horizontal',
    toFetch: false,
    colSilent: true,
    events: {
      "click .back": "back",
      "click .save": "save",
      "click .reset": "reset",
      "click .show-help": "showHelp",
      "click .close-help": "closeHelp",
      "click .closeDlg": "close",
      "click .next": "next",
      "click .prev": "prev",
      "click .nav-tabs a": "onTab",
      "click label": "toEdit",
      "click .toPage": "toPage",
      'change input[name],textarea[name],select[name]': 'valChange'
    },
    init: function() {
      this.listenTo(this.model, 'invalid', this.renderError);
      this.listenTo(this.model, 'valid', this.removeError);
      return this.prop != null ? this.prop : this.prop = this.meta.prop || [];
    },
    close: function() {
      if (this.mode === 'modal') {
        return this.$el.modal("hide");
      } else {
        return this.$el.remove();
      }
    },
    cAttr: function(o) {
      var k, results, v;
      results = [];
      for (k in o) {
        v = o[k];
        results.push(this.$("[name='" + k + "']").val(v).trigger('change'));
      }
      return results;
    },
    findItem: function(name) {
      return this.$("*[name='" + name + "']");
    },
    findItemValue: function(name) {
      var c, r, t;
      t = this.findItem(name);
      if (t.is('input:checkbox')) {
        if (t.length > 1) {
          r = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = t.length; i < len; i++) {
              c = t[i];
              if ($(c).is(':checked')) {
                results.push($(c).val());
              }
            }
            return results;
          })();
          return r.join(',').toLowerCase();
        } else {
          if (t.is(':checked')) {
            return t.val();
          } else {
            return 'false';
          }
        }
      } else if (t.is('input:radio')) {
        if (t.length > 1) {
          return t.filter(':checked').val();
        } else {
          return t.val();
        }
      } else {
        return t.val();
      }
    },
    removeError: function(it) {
      var p;
      if (it && it.id) {
        p = this.$('#' + it.id);
      } else {
        p = this.findItem(it.code);
      }
      return p.tooltip('destroy').parent().removeClass('has-error');
    },
    renderError: function(msg, it) {
      var p;
      if (it && it.id) {
        p = this.$('#' + it.id);
      } else {
        p = this.findItem(it.code);
      }
      p.parent().addClass('has-error');
      if (p.attr('type') === 'hidden') {
        return this.msg(msg);
      } else {
        p.attr('title', msg);
        return p.tooltip({
          delay: {
            show: 500,
            hide: 300
          },
          trigger: 'manual'
        }).tooltip('show');
      }
    },
    rmInput: function(name, query) {
      var it;
      if (query == null) {
        query = "[name='" + name + "']";
      }
      it = this.$(query);
      if (it.length) {
        it.closest('.form-group').remove();
      }
      return this.model.unset(name);
    },
    unsetVal: function(k, v, name) {
      var it;
      it = this.$(k);
      if (it.length) {
        it.val('');
        it.trigger('change');
      }
      return this.model.set(name, v);
    },
    setVal: function(k, v, name) {
      var it;
      it = this.$(k);
      if (it.length) {
        it.val(v);
        return it.trigger('change');
      } else if (name) {
        return this.model.set(name, v);
      }
    },
    valChange: function(e) {
      var k, name1, p, rk, t, v;
      t = util.ct(e);
      k = t.attr('name');
      v = this.findItemValue(k);
      if (!this.model.validateItem(k, v)) {
        if (p = this.prop.findBy('code', k)) {
          if (p.cvt) {
            v = p.cvt(v);
          }
          if (p.type === 'number') {
            v = +v;
          }
        }
        this.model.set(k, v, {
          silent: this.colSilent
        });
        if (p && p.notify) {
          this.model.trigger("change:" + p.code, v);
        }
        if (typeof this[name1 = k + "_change"] === "function") {
          this[name1](v, e);
        }
        if (this.syncBox) {
          rk = k.split(':')[0];
          if (this.meta[rk] && this.meta[rk].showCvt) {
            v = this.meta[rk].showCvt(v);
          }
          $("[data-name='" + k + "']", this.syncBox).text(v);
        }
        if (t.attr('type') === 'checkbox' && !t.is(':checked')) {
          return this.model.unset(k, {
            silent: this.colSilent
          });
        }
      } else {
        return this.model.unset(k, {
          silent: this.colSilent
        });
      }
    },
    showHelp: function(e) {
      return util.ct(e).parent().fadeIn();
    },
    closeHelp: function(e) {
      return util.ct(e).parent().fadeOut();
    },
    validModel: function() {
      var er, i, it, k, len, ref, ref1, res, v;
      ref = this._snote;
      for (k in ref) {
        v = ref[k];
        this.model.set(k, v.summernote('code'));
      }
      this._snote = {};
      ref1 = _.difference(this.curItems(), _.keys(this.model.attributes));
      for (i = 0, len = ref1.length; i < len; i++) {
        it = ref1[i];
        res = this.model.set(it, this.findItemValue(it), {
          validate: true
        });
        if (!res) {
          er = this.findItem(it);
          if (er.length) {
            this.findItem(it).focus();
            return false;
          }
        }
      }
      if (this.model._errors.length) {
        er = this.findItem(this.model._errors[0]);
        if (er.length) {
          er.focus();
          return false;
        }
      }
      return true;
    },
    reset: function() {
      var s;
      this.model.clear({
        silent: true
      });
      this.$el[0].reset();
      s = this.$('.areaWt>.c');
      if (s.length) {
        return s.trigger('change');
      }
    },
    before: function(attr) {
      return attr;
    },
    curItems: function() {
      return _.pluck(this.prop, 'code');
    },
    single: function() {
      return true;
    },
    save: function(e) {
      var t;
      util.esp(e);
      t = e ? util.ct(e) : this.$('.save');
      this.ctn.find('.alert-danger').remove();
      if ((this.validForm && !this.validForm()) || !this.validModel()) {
        return;
      }
      cf.blockLine = this.$('a.btn-primary');
      return this._save(t);
    },
    msg: function(msg, type) {
      if (type == null) {
        type = 'danger';
      }
      return this.ctn.prepend(cf.rtp('alert', {
        type: type,
        closed: true,
        msg: msg,
        icon: _st.sign[type]
      }));
    },
    checkAttrs: function(attrs) {
      return true;
    },
    _save: function(t) {
      var attrs, base, opt;
      attrs = this.model.attributes;
      if (this.entity !== 'user' && cf.index !== 'console' && (W.user && user.isLogin())) {
        attrs.user = user.pick();
        if (user.fake) {
          attrs.user.woid = user.id;
          attrs.user._id = 'default';
        }
      }
      this.before(attrs);
      opt = {
        success: this._saveSuccess,
        error: this._saveErr,
        wait: true
      };
      cf.blockLine = t;
      if (typeof (base = this.meta).afterValidate === "function") {
        base.afterValidate(attrs);
      }
      return this.model.save(attrs, opt);
    },
    back: function() {
      return history.back();
    },
    _saveSuccess: function(model, res, options) {
      var c, m, v;
      v = model.view;
      if (v.colSilent) {
        model.trigger('change');
      }
      if (v.rCollection) {
        c = _.result(v, 'rCollection');
        m = c.get(res.entity.id);
        if (m) {
          log('modeify');
          m.set(res.entity);
        } else {
          log('add to collection');
          c.add(res.entity, {
            pos: 0
          });
        }
      } else if (v.rModel) {
        log('rModel');
        c = _.result(v, 'rModel');
        c.set(res.entity);
      }
      v.ccp && util.cleanCachePage(v.ccp);
      v.resetForm && v.reset();
      v.cleanForm && model.unset();
      return v.saveSuccess(model, res, options);
    },
    saveSuccess: function(model) {
      var base, v;
      v = model.view;
      if (v.mode === 'modal') {
        v.closeDlg();
      } else {
        if (v.sufPage) {
          v.showSufPage();
        } else if (v.goPage) {
          cf.r(v.goPage);
        } else {
          history.go(-1);
        }
      }
      return typeof (base = model.view).afterSave === "function" ? base.afterSave(model) : void 0;
    },
    _saveError: function(model, xhr, options) {
      var e, i, len, msg, r, ref, v;
      r = $.parseJSON(xhr.responseText);
      v = model.view;
      msg = '';
      if (typeof cf._mkErrMsg === "function") {
        cf._mkErrMsg(r);
      }
      if (r.errors) {
        ref = r.errors;
        for (i = 0, len = ref.length; i < len; i++) {
          e = ref[i];
          msg += "<p>" + e + "</p>";
        }
      } else if (r.fmMsg) {
        msg = ii(r.fmMsg);
      }
      v.ctn.find(".alert").remove();
      if (msg) {
        return v.msg(msg);
      }
    },
    setBtns: function() {
      return [];
    },
    preRender: function() {
      if (this.focus) {
        this.$(this.focus).focus();
      }
      return this;
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
