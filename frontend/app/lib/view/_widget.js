// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = _exv('_tag', Backbone.View, {
    parent: '#main',
    auto: true,
    data: {},
    cleanAll: false,
    initialize: function(opt) {
      if (opt) {
        $.extend(this, opt);
      }
      this.ctn = this.$el;
      this.css && this.ctn.css(this.css);
      if (typeof this.init === "function") {
        this.init();
      }
      this.layout();
      if (this.auto) {
        this.render();
      }
      this.mount();
      if (typeof this.afterMount === "function") {
        this.afterMount();
      }
      util.loadPic(this.ctn);
      this.$el.data('_item', this);
      return this.$el.attr('data-cid', this.cid);
    },
    isShow: function() {
      return this.$el.is(':visible');
    },
    hide: function() {
      return this.$el.hide();
    },
    show: function() {
      return this.$el.show();
    },
    context: function() {
      var d;
      d = _.result(this, 'data');
      d.ctx = this;
      return d;
    },
    setContext: function(ob) {
      $.extend(true, this.context, ob);
      return this.layout(true);
    },
    setData: function(ob) {
      $.extend(true, this.data, ob);
      return this.render();
    },
    empty: function() {
      return this.ctn.empty();
    },
    layout: function(clean) {
      clean && this.$el.empty();
      if (this.tmpl) {
        this.context = _.result(this, 'context');
        this.ctn.html(cf.rtp(this.tmpl, this.context));
      }
      return typeof this.setContent === "function" ? this.setContent() : void 0;
    },
    mount: function(clean) {
      if (this.cleanAll || clean) {
        $(this.parent).empty();
      }
      return $(this.parent).append(this.ctn);
    },
    render: function() {
      return this;
    }
  });

}).call(this);

//# sourceMappingURL=_widget.js.map
