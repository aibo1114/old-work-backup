// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = _exv('model', 'tag', {
    toFetch: true,
    listenTime: 'listenTo',
    auto: true,
    modelType: cf.model.entity,
    initialize: function(opt) {
      if (opt) {
        $.extend(this, opt);
      }
      if (this.data) {
        this.data = _.result(this, 'data');
      }
      if (this.model) {
        this.entity = this.model.entity;
        this.data = this.model.toJSON();
      } else {
        this.setModel();
      }
      if (this.meta == null) {
        this.meta = this.model.meta || {};
      }
      if (this.reRendered) {
        this.listenTo(this.model, 'change', this.reRender);
      }
      if (typeof this.init === "function") {
        this.init();
      }
      this.model.view = this;
      this.$el.data('_item', this.model);
      if (this.remove) {
        this.listenTo(this.model, 'destroy', this.remove);
      }
      if (this.toFetch) {
        this.$el.addClass('loadingData');
        this.listenToOnce(this.model, 'sync', this.render);
        this[this.listenTime](this.model, 'sync', this.afterAjax);
        return this.model.fetch(_.result(this, 'fetchOpt'));
      } else if (this.auto) {
        return this.render();
      }
    },
    afterAjax: function() {
      if (this.setTitle) {
        this.head.find('strong').html(this.setTitle(this.model.toJSON()));
      }
      this.$el.removeClass('loadingData');
      return util.loadPic(this.ctn);
    },
    context: function() {
      var d;
      d = this.model ? this.model.toJSON() : this.data || this;
      d.ctx = this;
      return d;
    },
    fetchOpt: function() {
      var opt;
      opt = {
        reset: true,
        error: function(model) {
          var base;
          return typeof (base = model.view).noData === "function" ? base.noData() : void 0;
        }
      };
      if (this._attrs) {
        opt._attrs = this._attrs();
      }
      if (this.jsonp) {
        opt.dataType = 'jsonp';
      }
      return opt;
    },
    setModel: function() {
      var opt;
      if (this.inCtx && app[this.inCtx]) {
        this.model = app[this.inCtx];
        return this.toFetch = false;
      } else {
        opt = {
          entity: this.entity,
          urlRoot: this.urlRoot,
          meta: this.meta
        };
        if (this.urlRoot && this.urlRoot.indexOf('a/push') > -1) {
          opt.idAttribute = 'noId';
        }
        if (this.stSync) {
          opt.stSync = true;
        }
        this.model = new this.modelType(this.data, $.extend(opt, this.entityOpt));
        return this.inCtx && (app[this.inCtx] = this.model);
      }
    },
    setBtns: function() {
      var b, ce, e, i, it, j, len, mo, rb, ref;
      rb = [];
      if (this.btns) {
        this.btns = _.result(this, 'btns');
        ce = m._.btn;
        e = this.meta.btn || {};
        ref = this.btns;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          b = ref[i];
          if (_.isString(b)) {
            if (mo = e[b] || ce[b]) {
              it = mo(this.model.attributes || this.data, this.entity);
              if (it) {
                it.key = b;
                rb.push(it);
              }
            }
          } else {
            rb.push(b);
          }
        }
      }
      return rb;
    }
  });

  $.extend(cf.dm, {
    model: function(p, entity, eid, opt) {
      var init, pdd;
      pdd = {};
      if (eid) {
        pdd[cf.id] = eid;
      }
      init = {
        cleanAll: true,
        entity: entity,
        parent: p,
        data: pdd,
        btns: ['back']
      };
      return cf.dm.l('model', p, cf._packOpt(init, entity, 'show', opt));
    }
  });

}).call(this);

//# sourceMappingURL=model.js.map
