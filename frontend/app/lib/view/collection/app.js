// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = cf.view.collection = cf.view.tag.extend({
    cleanAll: true,
    toFetch: true,
    itemView: cf.view.model,
    entitiesType: cf.model.entities,
    head: true,
    pRange: 7,
    max: 15,
    offset: 0,
    toolbar: true,
    title: function() {
      return ii(this.entity);
    },
    initialize: function(opt) {
      this.eventList = [];
      if (opt.val) {
        this.data = opt.val;
      }
      if (opt) {
        $.extend(this, opt);
      }
      if (this.modelOpt) {
        this.modelOpt = _.result(this, 'modelOpt');
      }
      if (this.collection) {
        this.collection = _.result(this, 'collection');
        this.entity = this.collection.entity;
        if (this.collection.title) {
          this.title = this.collection.title;
        }
      } else {
        this.setCollection();
      }
      this.collection.view = this;
      if (this.meta == null) {
        this.meta = this.collection.meta;
      }
      if (typeof this.init === "function") {
        this.init();
      }
      if (this._filter) {
        this.listenTo(this.collection, 'reset', (function(_this) {
          return function() {
            return _this.$("[key='" + _this.tab + "']").trigger('click');
          };
        })(this));
      } else {
        this.listenTo(this.collection, 'reset', this.addAll);
      }
      this.listenTo(this.collection, 'add', this.onAdd);
      if (this.afterAjaxOnce) {
        this.listenToOnce(this.collection, 'sync', this.afterAjaxOnce);
      }
      this.render();
      if (this.toFetch) {
        this.collection.resetFetch();
      } else if (this._filter) {
        this.$("[key='" + this.tab + "']").trigger('click');
      } else if (this.collection.length) {
        this.addAll();
      }
      return this.preRender = this.addAll;
    },
    entitiesOpt: function() {
      var opt;
      opt = {};
      if (this.url) {
        opt.url = this.url;
      }
      if (this.entityType) {
        opt.entityType = this.entityType;
      }
      opt.criteria = this.setCriteria();
      if (this.comparator) {
        opt.comparator = this.comparator;
      }
      if (this.parse) {
        opt.parse = this.parse;
      }
      return opt;
    },
    setCollection: function() {
      var opt;
      if (this.inCtx && app[this.inCtx]) {
        this.collection = app[this.inCtx];
        this.toFetch = false;
        if (this.comparator && !this.collection.comparator) {
          return this.collection.comparator = this.comparator;
        }
      } else {
        this.data = _.result(this, 'data') || [];
        this.handleData && (this.data = this.handleData(this.data));
        opt = _.result(this, 'entitiesOpt');
        opt.entity = this.entity;
        if (this.stSync) {
          opt.stSync = true;
        }
        this.collection = new this.entitiesType(this.data, opt);
        return this.inCtx && (app[this.inCtx] = this.collection);
      }
    },
    setEventList: function() {
      if (this.btns) {
        this.eventList = this.eventList.concat(this.btns);
      }
      if (this.itemBtns && this.itemBtns.length) {
        return this.eventList = this.eventList.concat(this.itemBtns);
      }
    },
    enhanceContent: function() {
      if (this.tagClass) {
        this.ctn = this.$('.' + this.tagClass.replaceAll(' ', '.'));
      }
      return typeof this.setTools === "function" ? this.setTools() : void 0;
    },
    onAdd: function(item) {
      var i, idx, it, j, len, ref;
      ref = this.collection.models;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        it = ref[i];
        if (it.id === item.id) {
          idx = i;
        }
      }
      this.addOne(item, idx, {
        pos: idx
      });
      return util.loadPic(item.view.$el);
    },
    addOne: function(item, index, opt) {
      var base, base1, d;
      if (opt == null) {
        opt = {};
      }
      this.$('.noData').remove();
      opt = {
        entity: this.entity,
        model: item,
        parent: this.ctn,
        pos: opt.pos,
        toFetch: false,
        collection: this,
        reRendered: true,
        eventList: null,
        _idx: index,
        _len: this.collection.length
      };
      if (this.modelOpt == null) {
        this.modelOpt = {};
      }
      if (this.itemContext) {
        d = this.itemContext(_.clone(item.attributes), index);
        if (d.attrs) {
          this.modelOpt.attributes = d.attrs;
          if (d.attrs.href) {
            this.modelOpt.tagName = 'a';
          }
        }
        if ((base = this.modelOpt).tmpl == null) {
          base.tmpl = 'mediaItem';
        }
        if ((base1 = this.modelOpt).className == null) {
          base1.className = 'list-group-item';
        }
        this.modelOpt.context = d;
      }
      if (this.itemBtns) {
        opt.btns = this.itemBtns;
      }
      return new this.itemView($.extend(true, opt, this.modelOpt));
    },
    addAll: function() {
      var dss, i, it, j, len;
      this.$('.noData').remove();
      this.ctn.hide().removeClass('loadingData').empty();
      if (typeof this.dataFilter === "function") {
        this.dataFilter();
      }
      if (this.collection.length > 0 || (this.data && this.data.length)) {
        dss = this.collection.models;
        if (this.showCount) {
          dss = dss.slice(0, this.showCount);
        }
        for (i = j = 0, len = dss.length; j < len; i = ++j) {
          it = dss[i];
          this.addOne(it, i);
        }
        if (typeof this.afterAjax === "function") {
          this.afterAjax();
        }
      } else if (this.noData) {
        this.ctn.append(this.noData());
        this.ctn.children().addClass('noData');
      }
      this.ctn.show();
      if (typeof this.pagination === "function") {
        this.pagination();
      }
      return typeof this.afterAddAll === "function" ? this.afterAddAll() : void 0;
    },
    setCriteria: function() {
      var opt;
      opt = {
        offset: this.offset,
        max: this.max
      };
      if (this._attrs) {
        opt._attrs = this._attrs();
      }
      $.extend(opt, _.result(this, 'criteriaOpt'));
      return opt;
    },
    findData: util.getModel,
    setBtns: function() {
      var b, btn, ce, e, it, j, k, len, len1, ref, ref1, res, tt;
      if (!this.meta) {
        return [];
      }
      ce = m._.btn;
      e = this.meta.btn || {};
      if (this.itemBtns && this.itemBtns.length > 0) {
        ref = this.itemBtns;
        for (j = 0, len = ref.length; j < len; j++) {
          b = ref[j];
          tt = b;
          if (_.isString(b) && (it = e[b] || ce[b])) {
            tt = it(this.data || {}, this.entity);
          }
          if (tt && !tt.href) {
            this.eventList.push(tt);
          }
        }
      }
      this.btns = _.result(this, 'btns') || [];
      res = [];
      ref1 = this.btns;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        b = ref1[k];
        if (_.isString(b)) {
          btn = e[b] || ce[b];
          if (btn && this.data) {
            it = btn(this.data, this.entity);
          }
          if (it) {
            it.key = b;
          }
        } else if (b) {
          it = b;
          b = it.key;
        }
        if (it) {
          if (!it.href && b) {
            this.eventList.push(b);
          }
          res.push(it);
        }
      }
      return _.compact(res);
    }
  });

  $.extend(cf.dm, {
    collection: function(p, entity, opt) {
      var init;
      init = {
        mode: _st.mode,
        style: _st.mode + "-default",
        tagClass: 'list-group',
        foot: true,
        cleanAll: true,
        parent: p,
        entity: entity,
        modelOpt: {
          className: 'list-group-item p-x-0'
        }
      };
      if (!opt.modelOpt) {
        init.itemContext = function(d) {
          return d;
        };
      }
      return cf.dm.l('collection', p, cf._packOpt(init, entity, 'list', opt));
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
