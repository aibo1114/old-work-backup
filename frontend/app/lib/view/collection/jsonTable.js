// Generated by CoffeeScript 1.12.7
(function() {
  var jt, metaOpt;

  require('../../func/popBtn');

  require('../../func/inlineBtn');

  metaOpt = m._;

  $.extend(metaOpt.btn, {
    formDel: function(it, e) {
      return util.iBtn('trash', 'formDel');
    },
    up: function(it, e) {
      return util.iBtn("chevron-up", 'up');
    },
    down: function(it, e) {
      return util.iBtn("chevron-down", 'down');
    },
    cleanCache: function(it) {
      return util.tBtn('clean', null, 'erase', 'cleanCache btn btn-danger btn-sm');
    }
  });

  $.extend(metaOpt.event, {
    cleanCache: {
      type: 'click',
      fun: function(e) {
        return this.collection.reset();
      }
    },
    up: {
      type: 'click',
      fun: function(e) {
        var index, t, tr;
        t = util.ct(e);
        tr = t.closest('tr');
        if (tr.prev().length) {
          index = tr.index();
          this._swap(index, index - 1);
          return tr.after(tr.prev());
        }
      }
    },
    down: {
      type: 'click',
      fun: function(e) {
        var index, t, tr;
        t = util.ct(e);
        tr = t.closest('tr');
        if (tr.next().length) {
          index = tr.index();
          this._swap(index, index + 1);
          return tr.before(tr.next());
        }
      }
    },
    listDel: {
      type: 'click',
      fun: function(e) {
        var m;
        e.stopPropagation();
        if (!confirm(ii('m_sure'))) {
          return;
        }
        m = this.collection.at(util.ct(e).closest('tr').index());
        m.view.remove();
        this.collection.remove(m);
        this.fData.set(this.entity, JSON.stringify(this.collection.toJSON()));
        return this.fData.save();
      }
    },
    formDel: {
      type: 'click',
      fun: function(e) {
        var base, m;
        e.stopPropagation();
        if (!confirm(ii('m_sure'))) {
          return;
        }
        m = this.findData(e);
        if (m) {
          this.collection.remove(m);
          m.view.remove();
          if (typeof (base = m.view).afterRemove === "function") {
            base.afterRemove();
          }
          return typeof this.afterRemove === "function" ? this.afterRemove() : void 0;
        }
      }
    }
  });

  jt = require('./inlineTable').extend({
    noLastTime: true,
    toFetch: false,
    foot: false,
    modelOpt: {
      local: true,
      afterRemove: function() {
        return this.collection._setObj(this.collection.collection.toJSON());
      }
    },
    formEditOpt: {
      toFetch: false,
      colSilent: false,
      _save: function() {
        var base, c;
        this.closeDlg();
        c = this.rCollection;
        c.view._setObj(c.toJSON());
        return typeof (base = c.view).afterSave === "function" ? base.afterSave(this.model) : void 0;
      }
    },
    formAddOpt: {
      _save: function() {
        var base, c;
        this.closeDlg();
        this.model.set('id', util.randomChar(4));
        c = this.rCollection;
        c.add(this.model);
        c.view._setObj(c.toJSON());
        return typeof (base = c.view).afterSave === "function" ? base.afterSave(this.model) : void 0;
      }
    },
    data: function() {
      return this._getProp();
    }
  });

  $.extend(jt.prototype, require('../../func/propObj'));

  cf.view.jsonTable = jt;

  module.exports = jt;

}).call(this);

//# sourceMappingURL=jsonTable.js.map
