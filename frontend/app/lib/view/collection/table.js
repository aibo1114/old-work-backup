// Generated by CoffeeScript 1.12.7
(function() {
  var table;

  require('./table.less');

  table = cf.view.collection.extend({
    tmpl: require('./table.jade'),
    mode: _st.mode,
    parent: '#main',
    style: _st.mode + "-default",
    foot: true,
    head: true,
    btnWidth: '48',
    cleanAll: true,
    max: 15,
    foot: true,
    itemView: require('./trModel'),
    tbStyle: _st.tb(),
    thead: true,
    colNum: 3,
    toolbar: true,
    init: function() {
      var i, it, j, len1, ref;
      if (this.meta == null) {
        this.meta = m[this.entity];
      }
      if (!this.cols) {
        this.cols = [];
        i = 0;
        ref = this.meta.prop.slice();
        for (j = 0, len1 = ref.length; j < len1; j++) {
          it = ref[j];
          if (i < this.colNum) {
            if (it.noTb || !it.code || it.code.startsWith('_')) {
              continue;
            }
            if (it.xtype) {
              if (it.showText) {
                i++;
                this.cols.push(it);
              }
            } else if (it.code) {
              i++;
              this.cols.push(it);
            }
          }
        }
        if (!this.noLastTime) {
          this.cols.push({
            code: 'lastUpdated',
            type: 'date',
            w: '130px'
          });
        }
        if (this.itemBtns == null) {
          this.itemBtns = this.meta.tbBtn || ['edit', 'del'];
        }
        if (this.itemBtns.length) {
          this.cols.push({
            code: '_btn',
            type: 'btn'
          });
        }
        if (this.checkAll) {
          this.cols.unshift({
            type: 'ckb',
            code: '_ckb'
          });
        }
      }
      return this.colSize = this.cols.length;
    },
    _attrs: function() {
      var d, it, j, len1, ref;
      if (true) {
        return '';
      } else {
        if (!this.cols) {
          this.init();
        }
        d = [];
        ref = this.cols;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          it = ref[j];
          if (it.xtype === 'refFileCollection') {
            d.push('refFile');
          } else if (!it.code.startsWith('_')) {
            d.push(it.code);
          }
        }
        return d.join(',');
      }
    },
    title: function() {
      return iin(this.entity);
    },
    context: function() {
      var ref;
      return {
        cols: this.cols,
        colSize: this.colSize,
        tbStyle: this.tbStyle,
        entity: this.entity,
        thead: this.thead,
        btnLength: (ref = this.itemBtns) != null ? ref.length : void 0,
        btnWidth: this.btnWidth
      };
    },
    getChecked: function() {
      return this.$('tbody tr.active');
    },
    enhanceContent: function() {
      if (cf.mob) {
        this.ctn.attr('class', "table-responsive");
      }
      if (this.mode === _st.mode) {
        this.ctn.replaceWith(this.ctn.children());
      }
      this.ctn = this.$('.refresh');
      this.toolbar = this.$('.toolbar');
      this.toolbar.addClass('btnCtn');
      if (typeof this.setTools === "function") {
        this.setTools();
      }
      if (this.checkAll) {
        this.$('th:first').css('text-align', 'center');
        return this.$el.on('click', 'input[type=checkbox]', (function(_this) {
          return function(e) {
            var cbs, len, t;
            cbs = _this.$('.ckb');
            t = util.ct(e);
            if (t.parent().is('th')) {
              if (t.is(':checked')) {
                cbs.prop("checked", true);
                _this.$('tbody tr').addClass('active');
              } else {
                cbs.prop('checked', false);
                _this.$('tbody tr').removeClass('active');
              }
            } else if (t.parent().is('td')) {
              t.parent().parent().toggleClass('active');
            }
            len = _this.checkLen = _this.getChecked().length;
            _this.toolbar.find('.showL2')[len ? 'show' : 'hide']();
            _this.toolbar.find('.showL1')[len > 0 ? 'show' : 'hide']();
            return _this.toolbar.find('.showO1')[len === 1 ? 'show' : 'hide']();
          };
        })(this));
      }
    }
  });

  $.extend(cf.dm, {
    tb: function(p, entity, opt) {
      var init;
      if (opt == null) {
        opt = {};
      }
      init = {
        title: iin(entity),
        cleanAll: true,
        parent: p,
        entity: entity,
        btns: function() {
          if (user.entityAuth(entity, 'add')) {
            return ['topAdd'];
          } else {
            return null;
          }
        }
      };
      return new table(cf._packOpt(init, entity, 'list', opt));
    }
  });

  cf.view.table = table;

  module.exports = table;

}).call(this);

//# sourceMappingURL=table.js.map
