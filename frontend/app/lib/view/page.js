// Generated by CoffeeScript 1.12.7
(function() {
  var tag;

  module.exports = tag = cf.view.tag = Backbone.View.extend({
    parent: '#main',
    initialize: function(opt) {
      this.eventList = [];
      if (opt) {
        $.extend(this, opt);
      }
      if (typeof this.init === "function") {
        this.init();
      }
      if (this.auto) {
        return this.render();
      }
    },
    bindEvents: function(evts) {
      var k, ref, results, s, v;
      results = [];
      for (k in evts) {
        v = evts[k];
        ref = k.split(' '), k = ref[0], s = ref[1];
        results.push(this.delegate(k, s, _.bind(this[v], this)));
      }
      return results;
    },
    hide: function() {
      return this.$el.hide();
    },
    show: function() {
      return this.$el.show();
    },
    modeContext: function() {
      return {
        title: _.result(this, 'title'),
        head: this.head,
        foot: this.foot,
        tagClass: this.tagClass,
        style: this.style,
        imgPath: this.imgPath,
        tag: this.tag,
        bareCtn: this.bareCtn,
        modalSize: this.modalSize,
        closeBtn: this.closeBtn,
        backBtn: this.backBtn,
        toolbar: this.toolbar,
        topBtn: this.topBtn,
        ctx: this
      };
    },
    context: function() {
      var d;
      d = this.model ? this.model.toJSON() : _.result(this, 'data') || this;
      d.ctx = this;
      return d;
    },
    setTmpl: function() {
      var opt, res;
      if (this.tmpl) {
        res = cf.rtp(this.tmpl, _.result(this, 'context'));
      }
      if (this.mode) {
        opt = _.result(this, 'modeContext');
        if (res) {
          opt._content = res;
        }
        res = cf.rtp(this.mode, opt);
      }
      return this.$el.append(res);
    },
    layout: function() {
      this.css && this.$el.css(this.css);
      if (this.tmpl || this.mode) {
        this.setTmpl();
      }
      this.setRegions();
      if (typeof this.setContent === "function") {
        this.setContent();
      }
      if (typeof this.enhanceContent === "function") {
        this.enhanceContent();
      }
      return this.addBtns();
    },
    mount: function() {
      var cp, lp, p;
      p = $(this.parent);
      if (this.beforeTag) {
        $(this.beforeTag).after(this.$el);
      } else if (this.afterTag) {
        $(this.afterTag).before(this.$el);
      } else if (this.parent) {
        lp = $(this.parent).children();
        if (this.cleanAll && lp.length) {
          if (lp.attr('cache')) {
            app.cache.append(lp);
          } else if (lp.attr('data-cid')) {
            lp.data('_item')._close();
          } else {
            p.empty();
          }
        }
        if ((this.pos != null) && this.pos !== p.children().length) {
          p.children().eq(this.pos).before(this.$el);
        } else {
          p.append(this.$el);
        }
      }
      if (this.cache) {
        cp = this._slide ? p : this.$el;
        return cp.attr('cache', location.hash);
      }
    },
    setRegions: function() {
      this.ctn = this.$el;
      switch (this.mode) {
        case 'panel':
          this.head = this.$('.panel-heading').first();
          this.ctn = this.$('.panel-body,.list-group');
          return this.foot = this.$('.panel-footer');
        case 'modal':
          this.head = this.$('.modal-header').first();
          this.ctn = this.$('.modal-body');
          return this.foot = this.$('.modal-footer');
        case 'blank':
          this.head = this.$('.head');
          this.ctn = this.$('.refresh');
          return this.foot = this.$('.foot');
        case 'card':
          this.head = this.$('.card-header');
          this.ctn = this.$('.card-block,.list-group');
          return this.foot = this.$('.card-footer');
      }
    },
    addEvents: function() {
      var a, eMeta, events, k, ref, ref1, results, t, v;
      if (this.exEvents) {
        ref = this.exEvents;
        for (k in ref) {
          v = ref[k];
          ref1 = k.split(' '), a = ref1[0], t = ref1[1];
          this.$el.on(a, t, _.bind(v, this));
        }
      }
      if (typeof this.setEventList === "function") {
        this.setEventList();
      }
      if (this.meta && this.eventList && this.eventList.length) {
        this.eventList = _.unique(this.eventList);
        eMeta = $.extend({}, m._.event, this.meta.event);
        events = _.pick(eMeta, _.uniq(this.eventList));
        results = [];
        for (k in events) {
          v = events[k];
          if (_.isFunction(v.fun)) {
            results.push(this.$el.on(v.type, v.tag || ("." + k), _.bind(v.fun, this)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    },
    setBtns: function() {
      return _.result(this, 'btns');
    },
    addBtns: function(d) {
      var b, bCtn, btns, i, it, j, len, len1, ref, results, tCtn;
      if (d == null) {
        d = this.data;
      }
      btns = this.setBtns();
      if (this.topBtns) {
        tCtn = this.$('.toolbar');
        bCtn = this.foot.find('.btnCtn');
      } else {
        bCtn = this.$('.btnCtn');
      }
      if (btns && btns.length) {
        for (i = 0, len = btns.length; i < len; i++) {
          b = btns[i];
          if (b && this.isShow(b)) {
            bCtn.append(util.genBtn(b, d));
            if (b.event) {
              this.$el.on('click', "." + b.key, _.bind(b.event, this));
            }
          }
        }
      }
      if (this.topBtns) {
        ref = this.topBtns;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          it = ref[j];
          if (this.isShow(it)) {
            results.push(tCtn.append(util.genBtn(it)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    },
    reRender: function() {
      var v;
      v = $("[data-cid='" + this.cid + "']");
      if (v.length && v.children().length) {
        this.$el.empty();
        this.layout();
        return typeof this.preRender === "function" ? this.preRender() : void 0;
      }
    },
    render: function() {
      this.layout();
      this.mount();
      this.addEvents();
      if (typeof this.preRender === "function") {
        this.preRender();
      }
      if (typeof this.callback === "function") {
        this.callback();
      }
      this.$el.data('_item', this);
      this.$el.attr('data-cid', this.cid);
      util.loadPic(this.ctn);
      return this;
    },
    isDlg: function() {
      return this.mode === 'modal';
    },
    closeDlg: function() {
      return this.isDlg() && this.$el.modal("hide");
    },
    onClose: function() {
      var i, it, len, ref, ref1, results;
      ref = this.$('[data-cid]');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        results.push((ref1 = $(it).data('_item')) != null ? ref1._close() : void 0);
      }
      return results;
    },
    isShow: function(it) {
      return !it.isShow || it.isShow(this.data || this.model.toJSON(), this);
    }
  });

  $.extend(cf.dm, {
    tag: function(p, opt) {
      var init;
      init = {
        parent: p,
        mode: _st.mode,
        init: function() {
          return this.render();
        }
      };
      return cf.dm.l('tag', p, cf._packOpt(init, null, null, opt));
    }
  });

  cf.prompt = function(title, content, func, p) {
    var opt;
    opt = {
      modeContext: {
        head: title,
        title: title
      },
      enhanceContent: function() {
        return this.ctn.append(content);
      }
    };
    if (func) {
      opt.events = {
        'click a': func
      };
    }
    return cf.dm.tag('air', $.extend(opt, pw));
  };

}).call(this);

//# sourceMappingURL=page.js.map
