// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = {
    esp: function(e) {
      if (e) {
        e.stopPropagation();
        return e.preventDefault();
      }
    },
    setCookie: function(name, value, days) {
      var exp;
      if (days == null) {
        days = 30;
      }
      exp = new Date;
      exp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000);
      document.cookie = name + '=' + escape(value) + ';expires=' + exp.toGMTString();
    },
    getCookie: function(name) {
      var arr;
      arr = document.cookie.match(new RegExp('(^| )' + name + '=([^;]*)(;|$)'));
      if (arr !== null) {
        return unescape(arr[2]);
      } else {
        return null;
      }
    },
    deleteCookie: function(name) {
      var exp;
      exp = new Date;
      exp.setTime(exp.getTime() - 1);
      return document.cookie = name + '=; expires=' + exp.toGMTString();
    },
    viewCount: function(ent) {
      var s, v;
      s = this.gcm(ent, 'v');
      if (v = this.getCookie(s)) {
        return this.setCookie(s, +v + 1);
      } else {
        this.setCookie(s, 1);
        return $.post(util.actUrl("inc/" + ent._e + "/" + ent._id + "/viewCount"));
      }
    },
    gcm: function(ent, name) {
      return [ent._e, ent._id, name].join(':');
    },
    ro: function(ob) {
      var k, str, v;
      str = '';
      if (_.isArray(ob)) {
        return ob.join(',');
      } else if (_.isObject(ob)) {
        for (k in ob) {
          v = ob[k];
          if (this.hasOwnProperty(k)) {
            str += k + ":" + v + " \n";
          }
        }
        return str;
      } else {
        return ob;
      }
    },
    slice: Array.prototype.slice,
    isChinese: function(text) {
      var txt;
      if (text) {
        txt = text.replaceAll('’', "").replaceAll('–', '');
      }
      if (escape(txt).indexOf('%u') < 0) {
        return false;
      } else {
        return true;
      }
    },
    findAndGen: function(ctn, key) {
      var t;
      t = ctn.find(key);
      if (!t.length) {
        t = $("<div/>");
        if (key.charAt(0) === '#') {
          t.attr('id', key.substring(1));
        } else {
          t.addClass(key.substring(1));
        }
        ctn.append(t);
      }
      return t;
    },
    ct: function(e) {
      return $(e.currentTarget);
    },
    saveLocal: function(k, v) {
      if (!localStorage) {
        return;
      }
      if (_.isObject(v)) {
        v = JSON.stringify(v);
      }
      return localStorage[k] = v;
    },
    cleanLocal: function(key) {
      var k, results, v;
      if (!localStorage) {
        return;
      }
      results = [];
      for (k in localStorage) {
        v = localStorage[k];
        if (k.indexOf(key) > -1) {
          results.push(localStorage.removeItem(k));
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    readLocal: function(id, dir) {
      var k, v;
      if (!localStorage) {
        return;
      }
      if (dir) {
        for (k in localStorage) {
          v = localStorage[k];
          if (dir > 0) {
            if (k.startsWith(id)) {
              return v;
            }
          } else {
            if (k.endsWith(id)) {
              return v;
            }
          }
        }
      } else {
        return localStorage[id];
      }
    },
    del: function(x, ctx) {
      var e, it;
      if (ctx == null) {
        ctx = window;
      }
      it = ctx[x];
      try {
        delete ctx[x];
      } catch (error) {
        e = error;
        ctx[x] = void 0;
      }
      return it;
    },
    pureText: function(text) {
      return text.replace(/<[^>].*?>/g, "");
    },
    cutText: function(text, length) {
      if (length == null) {
        length = 30;
      }
      if (text.length < length) {
        return text;
      } else {
        return text.substr(0, length - 3) + '...';
      }
    },
    adjustText: function(text, length) {
      var c, i, j, len, res;
      if (length == null) {
        length = 30;
      }
      if (!text) {
        return '';
      }
      text = text.replace(/<[^>].*?>/g, "");
      i = 0;
      j = 0;
      res = '';
      len = text.length;
      while (length > i && len > j) {
        c = text.substr(j++, 1);
        if (/^[\u4e00-\u9fa5]+$/.test(c)) {
          i += 2;
        } else {
          i++;
        }
        res += c;
      }
      if (len > j) {
        res += '...';
      }
      return res;
    },
    fileExt: function(name) {
      var it;
      it = name.split(".");
      return it[it.length - 1];
    },
    attr: function(opt) {
      var k, s, v;
      s = ' ';
      for (k in opt) {
        v = opt[k];
        if (v) {
          s += k + '="' + v + '" ';
        }
      }
      return s;
    },
    lcss: function(path) {
      if (!$("link[href='" + path + "']").length) {
        return $('head').append("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + path + "\" media=\"all\">");
      }
    },
    lr: function(url, callback, failCallback, p) {
      var xr;
      xr = (W.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("MsXml2.XmlHttp"));
      xr.onreadystatechange = function() {
        if (xr.readyState === 4) {
          if (xr.status === 200 || xr.status === 304) {
            if (callback) {
              return callback(xr.responseText, p);
            } else {
              return eval(xr.responseText);
            }
          } else {
            return failCallback && failCallback();
          }
        }
      };
      xr.open("GET", url, true);
      return xr.send(null);
    },
    parseLocalDate: function(time) {
      if (time.length === 24 && time.endsWith('Z')) {
        return new Date(time);
      } else {
        if (time.length > 19) {
          time = time.substring(0, 19);
        }
        return new Date((time || "").replace(/-/g, "/").replace(/[TZ]/g, " "));
      }
    },
    parseUrl: function(url) {
      var it, l, len1, p, res, str;
      if (url == null) {
        url = location.search;
      }
      res = {};
      if (url.indexOf("?") !== -1) {
        str = url.substr(1).split("&");
        for (l = 0, len1 = str.length; l < len1; l++) {
          it = str[l];
          p = it.split("=");
          res[p[0]] = decodeURIComponent(p[1]);
        }
      }
      return res;
    },
    seqProp: function(obj, pStr, dv) {
      var chain, l, len1, ref, v;
      v = obj;
      ref = pStr.trim().split(".");
      for (l = 0, len1 = ref.length; l < len1; l++) {
        chain = ref[l];
        v = v[chain];
        if (v == null) {
          break;
        }
      }
      return v || dv;
    },
    setSeqProp: function(obj, pStr, v) {
      var chain, d, index, k, l, len1, ref;
      ref = pStr.trim().split(".");
      for (l = 0, len1 = ref.length; l < len1; l++) {
        chain = ref[l];
        if (chain.indexOf('[') > -1) {
          k = chain;
          chain = k.split('[')[0];
          index = parseInt(k.split('[')[1].split(']')[0]);
          if (_i === (_len - 1)) {
            d = chain ? obj[chain] : obj;
            if (v) {
              d[index] = v;
            } else {
              return d[index];
            }
          } else {
            obj = chain ? obj[chain][index] : obj[index];
          }
        } else if (_.isObject(obj[chain])) {
          obj = obj[chain];
        } else {
          if (v) {
            obj[chain] = v;
          } else {
            return obj[chain];
          }
        }
      }
    },
    delSeqProp: function(obj, pStr) {
      var chain, index, it, l, len1, lk;
      it = pStr.trim().split(".");
      lk = it.pop();
      if (it.length > 0) {
        for (l = 0, len1 = it.length; l < len1; l++) {
          chain = it[l];
          obj = obj[chain];
        }
      }
      if (lk.indexOf('[') > 0) {
        chain = lk.split('[')[0];
        index = parseInt(lk.split('[')[1].split(']')[0]);
        return obj[chain].splice(index, 1);
      } else {
        return delete obj[lk];
      }
    },
    randomChar: function(len, x) {
      var l, n, ref, ret;
      if (x == null) {
        x = '0123456789qwertyuioplkjhgfdsazxcvbnm';
      }
      ret = x.charAt(Math.ceil(Math.random() * 10000000) % x.length);
      for (n = l = 1, ref = len; 1 <= ref ? l <= ref : l >= ref; n = 1 <= ref ? ++l : --l) {
        ret += x.charAt(Math.ceil(Math.random() * 10000000) % x.length);
      }
      return ret;
    },
    log: function(msg) {
      return window.console && console.log(msg);
    },
    setMask: function() {
      return $('body').append("<div class='modal-backdrop fade in'></div>");
    },
    popMsg: function(text, type, timeout, closed) {
      var alert, c;
      if (type == null) {
        type = 'success';
      }
      if (timeout == null) {
        timeout = cf.popTime;
      }
      if (!text) {
        return;
      }
      if (_.isArray(text)) {
        text = text.join('<br/>');
      }
      alert = $(cf.rtp('alert', {
        msg: text,
        type: type,
        closed: closed,
        icon: _st.sign[type]
      }));
      alert.addClass('popMsg');
      if (cf.popMask) {
        util.setMask();
      }
      $('body').append(alert.alert());
      alert.fadeIn(500);
      c = function(t) {
        return t.fadeOut(function() {
          return $(this).remove();
        });
      };
      if (timeout > 0) {
        return _.delay(c, timeout, alert);
      }
    },
    warnMsg: function(text) {
      return this.popMsg(text, 'warning');
    },
    clone: function(obj, deep) {
      if (typeof obj !== "object") {
        return obj;
      }
      if ($.isArray(obj)) {
        return obj.slice();
      } else {
        return $.extend(deep, {}, obj);
      }
    },
    getLanguage: function() {
      return (navigator.language ? navigator.language : navigator.browserLanguage).split('-')[0];
    },
    absPoint: function(obj) {
      var oRect;
      oRect = obj.getBoundingClientRect();
      return {
        left: oRect.left,
        top: oRect.top
      };
    },
    initCustObjEvent: function(obj, actions, prefix) {
      var e, results;
      _.extend(obj, Backbone.Events);
      obj.set = function(k, v, p) {
        if (v !== null) {
          this[k] = v;
        }
        return this.trigger(prefix + ':' + k, p);
      };
      results = [];
      for (e in actions) {
        if (e.substr(0, 1) === '_') {
          results.push(obj[e] = actions[e]);
        } else {
          results.push(obj.on(prefix + ':' + e, actions[e]));
        }
      }
      return results;
    },
    tabPage: function(ctn, d, type, cb) {
      var c, nav;
      c = $(ctn);
      nav = c.find('.nav-tabs');
      if (!nav.length) {
        c.html(cf.rtp('tab', d));
        this.initTab(c.find('.nav-tabs'), type);
        return typeof cb === "function" ? cb() : void 0;
      }
    },
    initTab: function(str, act, el) {
      if (el == null) {
        el = 'li';
      }
      $("[href*='" + act + "']", str).parent().addClass(app.active);
      return str.on('click', el, util.setActive);
    },
    initActive: function(b, str, c) {
      if (c == null) {
        c = 'active';
      }
      return b.find(str).addClass(c).siblings().removeClass(c);
    },
    setActive: function(t, cls) {
      var d;
      if (cls == null) {
        cls = 'active';
      }
      d = t instanceof jQuery ? t : util.ct(t);
      return d.addClass(cls).siblings().removeClass(cls);
    },
    langText: function(text) {
      var m;
      m = $("<div>" + text + "</div>").find("." + _lang);
      if (m.length > 0) {
        return m.html();
      } else {
        return text;
      }
    },
    setSubItem: function(data, prop) {
      var it, l, len1, p, results;
      if (prop == null) {
        prop = 'id';
      }
      results = [];
      for (l = 0, len1 = data.length; l < len1; l++) {
        it = data[l];
        if (it.pid) {
          p = data.findBy(prop, it.pid);
          if (p) {
            if (!p.children) {
              p.children = [];
            }
            p.children.push(it);
            data.splice(_i--, 1);
            results.push(_len--);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    findByType: function(items, type) {
      var it, l, len1, results;
      results = [];
      for (l = 0, len1 = items.length; l < len1; l++) {
        it = items[l];
        if (it instanceof type) {
          results.push(it);
        }
      }
      return results;
    },
    resPath: function(c, path) {
      return c.resPath + '/upload/' + c.code + '/' + path;
    },
    rPath: function() {
      var it, l, len1, str;
      str = [cf.rPath];
      for (l = 0, len1 = arguments.length; l < len1; l++) {
        it = arguments[l];
        if (_.isString(it)) {
          str.push(it);
        }
      }
      return str.join('/');
    },
    rootsPath: function() {
      var it, l, len1, s;
      s = '';
      for (l = 0, len1 = arguments.length; l < len1; l++) {
        it = arguments[l];
        s += '/' + it;
      }
      return cf.resPrefix + s.substring(1);
    },
    html5Check: function() {
      if (W.Worker === "undefined") {
        return false;
      } else {
        return true;
      }
    },
    serializeObj: function(form) {
      var it, l, len1, o, ref;
      o = {};
      ref = $(form).serializeArray();
      for (l = 0, len1 = ref.length; l < len1; l++) {
        it = ref[l];
        if (o[it.name]) {
          if (!o[it.name].push) {
            o[it.name] = [o[it.name]];
          }
          o[it.name].push(it.value);
        } else {
          if (it.value.length > 0) {
            o[it.name] = it.value;
          }
        }
      }
      return o;
    },
    sTop: function(pos, offset, time) {
      var pz;
      if (pos == null) {
        pos = 'body';
      }
      if (offset == null) {
        offset = 0;
      }
      if (time == null) {
        time = 0;
      }
      if (pos !== 'body') {
        pz = $(pos).offset().top - offset;
      } else {
        pz = offset;
      }
      if (pz >= 0) {
        return $(pos).animate({
          scrollTop: pz
        }, time);
      }
    },
    isInView: function(t) {
      var bottom, de, left, right, top, x, y;
      de = document.documentElement;
      top = $('body').scrollTop();
      bottom = top + de.clientHeight;
      left = $('body').scrollLeft();
      right = left + de.clientWidth;
      x = t[0].getBoundingClientRect().left + left;
      y = t[0].getBoundingClientRect().top + top;
      if ((left <= x && x <= right) && (top <= y && y <= bottom)) {
        return true;
      }
      return false;
    },
    packParams: function(arr, fm, opt) {
      var a, it, l, len1, o, results;
      o = {};
      for (l = 0, len1 = arr.length; l < len1; l++) {
        it = arr[l];
        if (it.name.indexOf('::') > 0) {
          a = it.name.split('::');
          if (!o[a[0]]) {
            o[a[0]] = {};
          }
          if (o[a[0]][a[1]]) {
            o[a[0]][a[1]] += '<br/>' + it.value;
          } else {
            o[a[0]][a[1]] = it.value;
          }
          arr.splice(_i--, 1);
          _len--;
        }
      }
      results = [];
      for (it in o) {
        results.push(arr.push({
          name: it,
          value: JSON.stringify(o[it])
        }));
      }
      return results;
    },
    langPath: function() {
      if (cf.community.getDefLang === cf.lang) {
        return '/';
      } else {
        return '/' + cf.lang + '/';
      }
    },
    rId: function(str) {
      if (str.charAt(0) === "#") {
        return str.substr(1);
      }
      return str;
    },
    getTargetId: function(event) {
      var t;
      if (!event) {
        return null;
      }
      if (typeof event === "string" || typeof event === "number") {
        return event;
      }
      t = $(event.currentTarget).attr("id");
      if (t) {
        return t.substr(t.indexOf('-') + 1);
      } else {
        return null;
      }
    },
    getIframeElem: function(id, str) {
      return $(id).contents().find(str);
    },
    initCenter: function(fun) {
      fun();
      return $(window).resize(function() {
        return fun();
      });
    },
    restUrl: function() {
      var it;
      return cf.rsPre + ((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = arguments.length; l < len1; l++) {
          it = arguments[l];
          results.push(it);
        }
        return results;
      }).apply(this, arguments)).join('/');
    },
    actUrl: function(entity, action, param) {
      var it;
      return (cf.actPre || cf.rsPre) + ((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = arguments.length; l < len1; l++) {
          it = arguments[l];
          results.push(it);
        }
        return results;
      }).apply(this, arguments)).join('/');
    },
    pageUrl: function(it) {
      return "/" + it._e + "/" + it[cf.id];
    },
    uri: function(e, it, lang, full) {
      if (lang == null) {
        lang = util.langPath();
      }
      if (full == null) {
        full = true;
      }
      if (full) {
        return "" + cf.community.url + lang + "page/" + e + "-" + it.id + ".html";
      } else {
        return lang + "page-" + it.id + ".html";
      }
    },
    navUrl: function(p) {
      var it, k, l, len1;
      if (!p) {
        return '#';
      }
      if (arguments[0].charAt(0) === '#') {
        k = arguments[0];
      } else {
        k = "#!";
        for (l = 0, len1 = arguments.length; l < len1; l++) {
          it = arguments[l];
          if (_.isString(it) || _.isNumber(it)) {
            k += '/' + it;
          }
        }
      }
      return k;
    },
    setLoading: function(e) {
      return e.css("background", "url(" + cf.rPath + "/img/loading-bk.gif) no-repeat 50% 50%");
    },
    stopLoading: function(e) {
      return e.css("background", "");
    },
    BForm: function(opt, ctn) {
      var fm, it;
      if (ctn == null) {
        ctn = '#content';
      }
      fm = $('<form/>').attr('action', opt.action).attr('target', opt.target).attr('method', 'post');
      for (it in opt.data) {
        fm.append($.mk('input', {
          type: 'hidden'
        }, opt.data[it]));
      }
      $(ctn).append(fm);
      return fm;
    },
    getIFrame: function(id, src, css) {
      if (css == null) {
        css = {};
      }
      return $("<iframe></iframe>").addClass("ifr-map").attr("id", id).attr("src", src).attr("frameborder", 0).css(css);
    },
    getUrlParams: function(url, params) {
      var k, v;
      return url + '?' + ((function() {
        var results;
        results = [];
        for (k in params) {
          v = params[k];
          results.push((encodeURIComponent(k)) + "=" + (encodeURIComponent(v)));
        }
        return results;
      })()).join('&');
    },
    now: function() {
      return new Date().getTime();
    },
    crumb: function(items, single, ctn) {
      var d, la;
      if (single == null) {
        single = false;
      }
      if (ctn == null) {
        ctn = $('#crumb');
      }
      if (single) {
        la = ctn.find('li:last-child');
        la.html("<a href='#'>" + (la.text()) + "</a>");
      } else {
        d = [
          {
            icon: 'home',
            label: '首页',
            href: '/index.html'
          }
        ];
        ctn.html($('<ul class="breadcrumb"/>').append(cf.rtp('lia', d)));
      }
      return ctn.children('ul').append(cf.rtp('lia', items));
    },
    layout: function(cols, row) {
      var k, str, v;
      str = row ? "<div class='row'>" : '';
      for (k in cols) {
        v = cols[k];
        str += "<div id='" + k + "' class='" + v + "'></div>";
      }
      str += row ? "</div>" : '';
      return str;
    },
    weekDay: function(date) {
      return iCat('w')[util.parseLocalDate(date).getDay()];
    },
    initScroll: function(ctx, num) {
      var l, len1, ref, results, s;
      ref = $('.scrollBox', ctx || 'body');
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        s = ref[l];
        s = $(s);
        if (!num || s.children().length > num) {
          s.wrapInner('<div class="viewport" style="height: ' + s.height() + 'px"><div class="overview"></div></div>');
          s.prepend('<div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>');
          s.tinyscrollbar();
          if (s.children('.scrollbar').height() > 0) {
            results.push(s.mouseleave(function() {
              return $(this).find('.track').fadeOut(400);
            }).mouseenter(function() {
              return $(this).find('.track').fadeIn(200);
            }));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    isWechat: function() {
      var res, ua;
      ua = navigator.userAgent.toLowerCase();
      res = ua.match(/MicroMessenger/i);
      if (res && res[0] === "micromessenger") {
        return true;
      } else {
        return false;
      }
    },
    atHash: function(num, splitter) {
      if (num == null) {
        num = 1;
      }
      if (splitter == null) {
        splitter = '/';
      }
      return location.hash.split(splitter)[num];
    },
    screenWith: function(n, offset) {
      var de;
      if (n == null) {
        n = 1;
      }
      if (offset == null) {
        offset = 0;
      }
      de = document.documentElement;
      return (de.clientWidth - offset) / n;
    },
    isIE: function(ver) {
      var b;
      b = document.createElement('b');
      b.innerHTML = '<!--[if IE ' + ver + ']><i></i><![endif]-->';
      return b.getElementsByTagName('i').length === 1;
    },
    initPC: function(it) {
      $(it).find('.panel-collapse').addClass('collapse');
      return $(it).find('a[data-toggle]').first().trigger('click');
    },
    cleanCachePage: function(path) {
      if (!_.isString(path)) {
        path = location.pathname;
      }
      return $.get(path + '?_c=1&_r=1');
    },
    setPageHeight: function(p, min, offset) {
      var k;
      if (offset == null) {
        offset = 0;
      }
      k = min ? 'min-height' : 'height';
      return p.css(k, ($(window).height() - offset) + "px");
    },
    addHover: function(t, opt) {
      var o;
      o = $.extend({
        placement: 'auto',
        content: '<p>sdfsdfsdfdsf</p>',
        html: true,
        trigger: 'focus',
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
      }, opt || {});
      return t.popover(o);
    },
    batchAdd: function(et, d, cb) {
      return $.postJSON(util.actUrl("batch/add/" + et), {
        data: d
      }, cb);
    },
    prevNext: function(list, id, url) {
      var idx, m, res;
      m = list.findWhere({
        '_id': id
      });
      idx = list.indexOf(m);
      res = {
        prev: null,
        next: null
      };
      if (idx !== 0) {
        res.prev = util.navUrl(url, list.at(idx - 1).id);
      }
      if (idx !== list.length - 1) {
        res.next = util.navUrl(url, list.at(idx + 1).id);
      }
      return res;
    },
    pad: function(width, string, padding) {
      if (width <= string.length) {
        return string;
      } else {
        return this.pad(width, padding + string, padding);
      }
    }
  };

}).call(this);

//# sourceMappingURL=util.js.map
