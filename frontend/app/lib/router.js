// Generated by CoffeeScript 1.12.7
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('./init');

  module.exports = cf.router = Backbone.Router.extend({
    parent: 'body',
    startSilent: false,
    active: 'active',
    regions: {},
    dm: cf.dm,
    blockBox: null,
    blockLine: null,
    blockMsg: "Please wait...",
    _history: [],
    _enhanceList: {},
    routes: {
      '': 'index',
      '!/*path': 'dAct'
    },
    dAct: function(path) {
      var items, lp, ref;
      log('dAct:');
      if (this._enhanceList[path]) {
        popMsg('您输入的网址目前没有功能', 'warning');
        throw 'noFunc';
      }
      items = path.split('/');
      if (!this.mods || (ref = items[0], indexOf.call(this.mods, ref) >= 0)) {
        cf.__loading = true;
        this._enhanceList[path] = true;
        lp = cf.modPath + items[0];
        return cf.loadJS(lp + ".js", function() {
          cf.__loading = false;
          return cf.rr();
        }, function() {
          cf.__loading = false;
          popMsg('您输入的网址不正确', 'warning');
          throw 'noFunc';
        });
      } else {
        popMsg('您输入的网址不正确', 'warning');
        throw 'noFunc';
      }
    },
    index: function() {
      return log('index');
    },
    constructor: function(opt) {
      if (opt) {
        $.extend(this, opt);
      }
      $.extend(this, util.parseUrl());
      this._bindRoutes();
      window.app = this;
      return this.initialize(arguments);
    },
    initMod: function() {
      var i, it, k, len1, ref, ref1, v;
      if (this._exr) {
        ref = this._exr;
        for (i = 0, len1 = ref.length; i < len1; i++) {
          it = ref[i];
          if (it.routes) {
            ref1 = it.routes;
            for (k in ref1) {
              v = ref1[k];
              this[v] = it[v];
              this.route(k, v, it[v]);
            }
          }
          if (it._app) {
            $.extend(this, it._app);
          }
        }
      }
      if (typeof this.loadMod === "function") {
        this.loadMod();
      }
      if (typeof this.layout === "function") {
        this.layout();
      }
      return this.on('route', (function(_this) {
        return function(name, args) {
          if (_this._noTrack) {
            util.del('_noTrack', _this);
          }
        };
      })(this));
    },
    enhance: function(obj) {
      var k, ref, results, v;
      ref = obj.routes;
      results = [];
      for (k in ref) {
        v = ref[k];
        this.route(k, v, obj[v]);
        results.push(typeof obj.callback === "function" ? obj.callback() : void 0);
      }
      return results;
    },
    initialize: function() {
      this.initMod();
      this.init();
      return this.start();
    },
    isFirst: function() {
      return this._history.length === 0;
    },
    prev: function(step) {
      var len;
      if (step == null) {
        step = 2;
      }
      len = this._history.length;
      if (len >= step) {
        return this._history[len - step];
      } else {
        return null;
      }
    },
    init: function() {
      log('init...');
      this.cache = $('#_cache');
      this.ctn = $('#content');
      return this.sta = $('#static');
    },
    context: function() {
      return cf.community || {};
    },
    before: function() {
      var lp, rt;
      log('before router');
      rt = util.atHash(1);
      if (this.prev()) {
        lp = this.prev().frag.split('/')[1];
      }
      if (location.hash.length) {
        this.ctn.removeClass(lp).addClass(rt);
        this.ctn.show();
        return this.sta.hide();
      } else {
        this.ctn.hide();
        return this.sta.show();
      }
    },
    execute: function(cb, args, name) {
      var e, lp, lst;
      if (typeof this.pv === "function") {
        this.pv();
      }
      if ($('body').offset().top > 50) {
        util.sTop();
      }
      if (name !== 'dAct') {
        lst = this._history.last();
        if (!lst || lst.name !== name) {
          this._history.push({
            name: name,
            args: args,
            frag: Backbone.history.fragment
          });
        }
      }
      if (this.cleanSlides()) {
        return;
      }
      if (!this.checkPage || this.checkPage(name)) {
        this.before();
        if (this.ctn.children().attr('cache')) {
          app.cache.append(this.ctn.children());
        }
        lp = this.cache.find("[cache='" + location.hash + "']");
        if (lp.length) {
          if (lp.hasClass('page')) {
            cf.slider.slidePage(lp);
          } else {
            this.cleanPage();
            app.ctn.html(lp);
            cf._sh = [];
          }
        } else {
          try {
            if (typeof this.prePage === "function") {
              this.prePage();
            }
          } catch (error) {
            e = error;
            this.handleErr(e);
            return;
          }
          cb.apply(this, args);
        }
        return typeof this.after === "function" ? this.after() : void 0;
      } else {
        return typeof this.checkFail === "function" ? this.checkFail() : void 0;
      }
    },
    handleErr: function(e) {
      var code, m, p, ref, s;
      log("cust catch: " + e);
      if (e) {
        ref = e.split('::'), code = ref[0], p = ref[1], m = ref[2];
        if (code) {
          cf._handleErr[code](p);
        }
        if (m) {
          s = code === 'loading' ? 'success' : 'warning';
          return popMsg(m, s, 1000);
        }
      }
    },
    started: function() {
      return Backbone.History.started;
    },
    setCtn: function(ctn) {
      return W.ctn = ctn;
    },
    inSlides: function() {
      return this.ctn.find("[hash]").length;
    },
    cleanSlides: function() {
      var p;
      p = this.ctn.find("[hash='" + location.hash + "']");
      if (p.length) {
        if (p.prevAll().length) {
          cf.slider.slideLastPage(p.first().attr('id'));
          return true;
        } else if (p.index() === 0) {
          cf.slider.slidePage();
          return true;
        }
      } else if (this.ctn.find('[hash]').length > 1) {
        if (W.ctn !== 'slide') {
          cf.slider.slidePage();
          return true;
        }
      }
      return false;
    },
    start: function(callback) {
      var silent;
      log('app start:' + this.startSilent);
      if (this.started()) {
        return;
      }
      if (typeof this.render === "function") {
        this.render();
      }
      if (this.startSilent) {
        silent = true;
      }
      Backbone.history.start({
        silent: silent
      });
      cf.community.userTrack && cf.infoc(location.hash);
      return typeof cf.afterStart === "function" ? cf.afterStart() : void 0;
    },
    cleanPage: function(ctn) {
      var i, it, j, len1, len2, ref, ref1, ref2, ref3;
      if (ctn == null) {
        ctn = app.ctn;
      }
      ref = $(ctn).children();
      for (i = 0, len1 = ref.length; i < len1; i++) {
        it = ref[i];
        if ((ref1 = $(it).data('_item')) != null) {
          ref1._close();
        }
      }
      ref2 = $('[data-cid]', ctn);
      for (j = 0, len2 = ref2.length; j < len2; j++) {
        it = ref2[j];
        if ((ref3 = $(it).data('_item')) != null) {
          ref3._close();
        }
      }
      return ctn.empty();
    },
    setFade: function() {
      return cf.body.addClass('bg-faded');
    },
    unsetFade: function() {
      return cf.body.removeClass('bg-faded');
    },
    isFade: function() {
      return cf.body.hasClass('bg-faded');
    }
  });

}).call(this);

//# sourceMappingURL=router.js.map
