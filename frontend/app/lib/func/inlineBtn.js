// Generated by CoffeeScript 1.12.7
(function() {
  var metaOpt;

  metaOpt = m._;

  $.extend(metaOpt.btn, {
    inlineEdit: function(it, e) {
      return util.iBtn('edit', 'inlineEdit');
    },
    inlineView: function(it, e) {
      return util.iBtn('list-alt', 'inlineView');
    },
    inlineAdd: function() {
      return util.tBtn('add', null, 'plus', 'btn btn-primary btn-sm');
    }
  });

  $.extend(metaOpt.event, {
    inlineEdit: {
      type: 'click',
      fun: function(e) {
        var p, t, tr;
        t = util.ct(e);
        tr = t.closest('tr');
        if (tr.next().hasClass('inlineBox')) {
          return tr.next().remove();
        } else {
          $(this.parent).find('.inlineBox').remove();
          p = $("<td colspan='" + (tr.children('td').length) + "'></td>");
          tr.after($("<tr class='inlineBox'></tr>").append(p));
          return app.dm.form(p, this.entity, {
            cleanAll: false,
            rCollection: this.collection,
            model: this.findData(e),
            toFetch: false,
            btns: ['save'],
            _save: function() {
              var base, c;
              c = this.rCollection;
              c.view._setObj(c.toJSON());
              this.$el.remove();
              return typeof (base = c.view).afterSave === "function" ? base.afterSave(this.model) : void 0;
            }
          });
        }
      }
    },
    inlineView: {
      type: 'click',
      fun: function(e) {
        var d, opt, p, t, tr;
        t = util.ct(e);
        tr = t.closest('tr');
        if (tr.next().hasClass('inlineBox')) {
          return tr.next().remove();
        } else {
          $(this.parent).find('.inlineBox').remove();
          p = $("<td colspan='" + (tr.children('td').length) + "'></td>");
          tr.after($("<tr class='inlineBox'></tr>").append(p));
          d = this.findData(e);
          opt = {
            model: d,
            title: iim('view', this.entity)
          };
          if (this.viewOpt) {
            $.extend(opt, _.result(this, 'viewOpt'));
          }
          return app.dm.view(p, this.entity, d.id, opt);
        }
      }
    },
    inlineAdd: {
      type: 'click',
      fun: function(e) {
        var ct, p, t;
        t = util.ct(e);
        ct = t.closest('.panel-heading');
        if (ct.next().hasClass('inlineBox')) {
          return ct.next().remove();
        } else {
          $(this.parent).find('.inlineBox').remove();
          p = $("<div class='inlineBox'></div>");
          ct.after(p);
          return app.dm.add(p, this.entity, {
            cleanAll: false,
            rCollection: this.collection,
            toFetch: false,
            btns: ['save'],
            _save: function() {
              var base, c;
              this.model.set('id', util.randomChar(4));
              c = this.rCollection;
              c.add(this.model);
              c.view._setObj(c.toJSON());
              this.$el.remove();
              return typeof (base = c.view).afterSave === "function" ? base.afterSave(this.model) : void 0;
            }
          });
        }
      }
    }
  });

}).call(this);

//# sourceMappingURL=inlineBtn.js.map
