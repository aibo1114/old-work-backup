// Generated by CoffeeScript 1.12.7
(function() {
  var createTimer, intervals, orgClearInterval, orgClearTimeout, orgSetInterval, orgSetTimeout, resetTimer, timeouts;

  timeouts = {};

  intervals = {};

  orgSetTimeout = window.setTimeout;

  orgSetInterval = window.setInterval;

  orgClearTimeout = window.clearTimeout;

  orgClearInterval = window.clearInterval;

  createTimer = function(set, map, args) {
    var callback, cb, id, repeat;
    id = void 0;
    cb = args[0];
    repeat = set === orgSetInterval;
    callback = function() {
      if (cb) {
        cb.apply(window, arguments);
        if (!repeat) {
          delete map[id];
          cb = null;
        }
      }
    };
    args[0] = callback;
    id = set.apply(window, args);
    map[id] = {
      args: args,
      created: Date.now(),
      cb: cb,
      id: id
    };
    return id;
  };

  resetTimer = function(set, clear, map, virtualId, correctInterval) {
    var callback, interval, reduction, repeat, timer;
    timer = map[virtualId];
    callback = function() {
      if (timer.cb) {
        timer.cb.apply(window, arguments);
        if (!repeat) {
          delete map[virtualId];
          timer.cb = null;
        }
      }
    };
    if (!timer) {
      return;
    }
    repeat = set === orgSetInterval;
    clear(timer.id);
    if (!repeat) {
      interval = timer.args[1];
      reduction = Date.now() - timer.created;
      if (reduction < 0) {
        reduction = 0;
      }
      interval -= reduction;
      if (interval < 0) {
        interval = 0;
      }
      timer.args[1] = interval;
    }
    timer.args[0] = callback;
    timer.created = Date.now();
    timer.id = set.apply(window, timer.args);
  };

  window.setTimeout = function() {
    return createTimer(orgSetTimeout, timeouts, arguments);
  };

  window.setInterval = function() {
    return createTimer(orgSetInterval, intervals, arguments);
  };

  window.clearTimeout = function(id) {
    var timer;
    timer = timeouts[id];
    if (timer) {
      delete timeouts[id];
      orgClearTimeout(timer.id);
    }
  };

  window.clearInterval = function(id) {
    var timer;
    timer = intervals[id];
    if (timer) {
      delete intervals[id];
      orgClearInterval(timer.id);
    }
  };

  window.addEventListener('scroll', function() {
    var virtualId;
    virtualId = void 0;
    for (virtualId in timeouts) {
      virtualId = virtualId;
      resetTimer(orgSetTimeout, orgClearTimeout, timeouts, virtualId);
    }
    for (virtualId in intervals) {
      virtualId = virtualId;
      resetTimer(orgSetInterval, orgClearInterval, intervals, virtualId);
    }
  });

  return;

}).call(this);

//# sourceMappingURL=ios.js.map
