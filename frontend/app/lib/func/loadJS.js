// Generated by CoffeeScript 1.12.7
(function() {
  cf.jsCache || (cf.jsCache = []);

  cf.jsLoading || (cf.jsLoading = []);

  cf.jsDelay || (cf.jsDelay = []);

  module.exports = function(url, callback, err, charset, config) {
    var error, i, it, j, ld, len, len1, ref, ref1, script;
    ld = document.getElementById('loading');
    ref = cf.jsCache;
    for (i = 0, len = ref.length; i < len; i++) {
      it = ref[i];
      if (it === url) {
        if (callback) {
          callback();
        }
        return;
      }
    }
    ref1 = cf.jsLoading;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      it = ref1[j];
      log("loading in queue: " + url);
      if (it === url) {
        if (callback) {
          cf.jsDelay[url].push(callback);
        }
        return;
      }
    }
    log("loading: " + url);
    cf.jsLoading.push(url);
    cf.jsDelay[url] = callback ? [callback] : [];
    if (ld) {
      document.getElementById("loading").style.display = 'block';
    }
    script = document.createElement("script");
    script.type = "text/javascript";
    script.onload = script.onreadystatechange = function() {
      var k, len2, ref2, v;
      if (script && script.readyState && /^(?!(?:loaded|complete)$)/.test(script.readyState)) {
        return;
      }
      script.onload = script.onreadystatechange = null;
      script.src = "";
      script.parentNode.removeChild(script);
      script = null;
      cf.jsCache.push(url);
      if (config) {
        config();
      }
      ref2 = cf.jsDelay[url];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        v = ref2[k];
        v();
      }
      cf.jsDelay.url = null;
      util.del(url, cf.jsDelay);
      cf.jsLoading.remove(url);
      if (cf.jsLoading.length === 0 && ld) {
        return ld.style.display = 'none';
      }
    };
    script.charset = charset || document.charset || document.characterSet;
    script.src = ((url.indexOf(".") > 0 || url.startsWith("http")) ? url : cf.st + url + ".js");
    try {
      return document.getElementsByTagName("head")[0].appendChild(script);
    } catch (error1) {
      error = error1;
      if (typeof err === "function") {
        err();
      }
      return popMsg("Loading error: " + url, 'error');
    }
  };

}).call(this);

//# sourceMappingURL=loadJS.js.map
