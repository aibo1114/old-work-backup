// Generated by CoffeeScript 1.12.7
(function() {
  var inputEditor;

  require('./style.less');

  inputEditor = require('../../../widget/editor/inputEditor');

  m.editor = {
    prop: [
      m._select('xtype', {
        attrs: {
          data: ['type', 'value', 'cols', 'attrs', 'noLabel']
        }
      }), m._select('type', {
        attrs: {
          data: function() {
            return [];
          }
        }
      })
    ]
  };

  module.exports = _exv('propEditor', 'tag', {
    init: function() {
      return this.obj = this.val || this.data || {};
    },
    auto: true,
    addable: true,
    deleteable: true,
    tagName: 'form',
    className: 'form-horizontal',
    initVal: 'new value',
    hasDelBtn: true,
    tab: false,
    editor: {
      _key: {
        type: 'label',
        cls: '_k'
      },
      _val: {
        type: 'text',
        cls: '_v',
        valid: {
          min: 1,
          max: 10000
        }
      }
    },
    events: {
      'change ._k': 'keyChange',
      'change ._v': 'valChange',
      'change select': 'sChange',
      'click .add': 'add',
      'click .del': 'del',
      'click .addArrayItem': 'addArrayItemEvent',
      'click .delArrayItem': 'delArrayItem'
    },
    setObj: function() {
      return this.form.model.set(this.name, this.obj);
    },
    del: function(e) {
      var t;
      if (confirm(ii('m_sure'))) {
        t = $(e.currentTarget);
        util.delSeqProp(this.obj, t.attr('key'));
        this.setObj();
        return t.parent().remove();
      }
    },
    getCtnTag: function(p) {
      var c;
      c = $('<div class="pEditorElem form-group"/>');
      if (p) {
        c.data(p);
      }
      return c;
    },
    add: function(e) {
      var ik, k, s, t;
      t = util.ct(e);
      k = t.attr('key');
      if (this.prompt || !k) {
        ik = this.getKeyVal();
        if (!ik) {
          return;
        }
      } else {
        ik = '';
      }
      s = this.getCtnTag({
        op: 'new'
      });
      t.prev().append(s);
      if (k) {
        k = k + '.' + ik;
      } else {
        k = ik;
      }
      s.append(this.keyEditor(ik));
      s.append(this.valEditor(this.initVal, k));
      if (this.deleteable) {
        s.append(this.delBtn(k));
      }
      if (this.prompt) {
        util.setSeqProp(this.obj, k, this.initVal);
        this.setObj();
      }
      return s.find('._v').select();
    },
    delBtn: function(k) {
      var key;
      if (this.hasDelBtn) {
        key = "" + (k || '');
        return "<i key='" + key + "' style='margin-top: -10px;' class='" + (util.iClass('trash')) + " btn btn-xs btn-danger del'/>";
      }
    },
    addBtn: function(k) {
      var bstr, btns, cls, it, key;
      cls = "btn btn-default add " + (util.iClass('plus'));
      key = "" + (k || '');
      bstr = "<a key='" + key + "' class='" + cls + "'></a>";
      if (this.addOpt) {
        btns = (function() {
          var i, len, ref, results;
          ref = this.addOpt;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            it = ref[i];
            results.push("<a type='" + it.type + "' class='addItem'>" + it.label + "</a>");
          }
          return results;
        }).call(this);
        bstr = cf.rtp('btnGroup', {
          label: util.icon('plus'),
          btns: btns,
          style: 'btn btn-default'
        });
      }
      return bstr;
    },
    getKeyVal: function() {
      return prompt('Input the key value', "The Key");
    },
    sChange: function(e) {
      var t, v;
      t = $(e.currentTarget);
      v = t.val();
      t.parent().next().attr('key', v);
      return t.attr('disabled', 'true');
    },
    valChange: function(e) {
      var k, v;
      k = $(e.currentTarget).attr('key');
      v = $(e.currentTarget).val();
      if (this.editor._val.type === 'number') {
        v = +v;
      }
      util.setSeqProp(this.obj, k.toString(), v);
      this.setObj();
      return e.stopPropagation();
    },
    keyChange: function(e) {
      var bb, nv, ov;
      nv = e.currentTarget.value;
      ov = e.currentTarget.oldvalue;
      bb = this.obj[ov];
      this.obj[nv] = bb;
      delete this.obj[ov];
      return this.setObj();
    },
    keyEditor: function(p) {
      var editor, ki;
      editor = this.editor[p] || this.editor._key;
      editor.val = p;
      ki = inputEditor(editor);
      if (editor.type !== 'label') {
        ki.attr('onfocus', 'this.oldvalue = this.value;');
      }
      ki.addClass("control-label");
      return ki;
    },
    valEditor: function(p, k) {
      var editor, ki;
      editor = this.editor[k] || this.editor._val;
      editor.val = p;
      ki = inputEditor(editor);
      if (k) {
        ki.attr('key', k);
      }
      ki.addClass('form-control');
      return ki;
    },
    _addArrayItem: function(o, c, k) {
      var a, cc, i, kk, len;
      for (i = 0, len = o.length; i < len; i++) {
        a = o[i];
        cc = $('<div class="arrayItem"></div>').appendTo(c);
        kk = k + '[' + _i + ']';
        cc.append("<label class='control-label'>" + _i + ":</label>");
        this.addItem(a, cc, kk);
      }
      if (this.addable) {
        return c.append(this.addBtn(k));
      }
    },
    addElem: function(o, c, k) {
      var p, s, sk;
      for (p in o) {
        if (p.startsWith('__')) {
          this.addLabel(o[p], c);
          continue;
        }
        if (!o.hasOwnProperty(p)) {
          continue;
        }
        sk = '';
        if (k.length > 0) {
          sk = k + '.' + p;
        } else {
          sk = p;
        }
        s = this.getCtnTag();
        s.append(this.keyEditor(p));
        this.addItem(o[p], s, sk);
        c.append(s);
      }
      if (this.addable) {
        return c.parent().append(this.addBtn(k));
      }
    },
    addLabel: function(v, c) {
      return c.append("<div class=\"form-group subTitle\"><label>" + v + "</label></div>");
    },
    addItem: function(v, c, k) {
      var cc, f;
      if (!c) {
        c = this.getCtnTag();
      }
      if (_.isString(v) || _.isNumber(v) || _.isBoolean(v)) {
        c.append(this.valEditor(v, k));
        if (this.deleteable) {
          return c.append(this.delBtn(k));
        }
      } else {
        cc = $('<div/>').appendTo(c);
        if (_.isArray(v)) {
          cc.addClass('subArray');
          c.addClass('array');
          this._addArrayItem(v, cc, k);
        } else if (_.isObject(v)) {
          cc.addClass('subObj');
          c.addClass('object');
          this.addElem(v, cc, k);
        }
        if (k) {
          f = $('<div class="fbtn"/>');
          if (this.deleteable) {
            f.append(this.delBtn(k));
          }
          c.prepend(f);
        }
        return c.children('label').prepend(tu.icon('chevron-down'));
      }
    },
    enhanceContent: function() {
      var t;
      if (this.tab) {
        this.ctn.append(cf.rtp('tab', [
          {
            title: 'Editor',
            code: '_pEditor',
            selected: true
          }, {
            title: 'Text',
            code: '_text'
          }
        ]));
        this.$('#_text').append(this.iid);
        t = this.$('#_pEditor');
      } else {
        if (this.iid) {
          this.ctn.append(this.iid.hide());
        }
        t = $('<div id="_pEditor"></div>');
        this.ctn.append(t);
      }
      t.addClass('pEditorElem');
      return this.addItem(this.obj, t, '');
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
