// Generated by CoffeeScript 1.12.7
(function() {
  require('./listEditor.less');

  cf.view.listEditor = cf.view.collection.extend({
    toFetch: false,
    itemTmpl: require('./listInput.jade'),
    newData: function() {
      return '';
    },
    ctnCls: '_so',
    events: {
      'click .del': function(e) {
        var index, t;
        t = util.ct(e);
        t.closest('.' + this.ctnCls).remove();
        index = this.getIndex(t);
        this.data.splice(index, 1);
        this.setVal();
        return typeof this.afterDel === "function" ? this.afterDel() : void 0;
      },
      'click .add': 'add',
      'change input,select': function(e) {
        var t;
        t = util.ct(e);
        if (this.validInput && !this.validInput(t)) {
          return;
        }
        if (_.isString(this.newData())) {
          this.data[this.getIndex(t)] = t.val();
        } else {
          this.data[this.getIndex(t)][t.attr('name')] = t.val();
        }
        this.setVal();
        return e.stopPropagation();
      }
    },
    init: function() {
      if (this.val) {
        this.data = this.val;
      }
      if (!this.data.length) {
        this.data = this.dv;
      }
      if (!this.data || !this.data.length) {
        return this.addAll();
      }
    },
    addLimit: function() {
      return false;
    },
    add: function(e) {
      var n;
      if (this.addLimit()) {
        return;
      }
      n = this.newData();
      this.data.push(n);
      this.addOne(n);
      return util.ct(e).prev().find('input').focus();
    },
    getIndex: function(t) {
      return t.closest('.' + this.ctnCls).index();
    },
    addOne: function(d) {
      var item, nd;
      if (_.isObject(d)) {
        nd = _.clone(d);
      } else {
        nd = {
          val: d
        };
      }
      item = $(cf.rtp(this.itemTmpl, nd));
      item.addClass(this.ctnCls);
      this.addBtn.before(item);
      return typeof this.afterAddOne === "function" ? this.afterAddOne(item, d) : void 0;
    },
    addAll: function() {
      var i, it, len, ref, results;
      this.data || (this.data = []);
      this.addBtn = $(tu.icon('plus add btn btn-primary'));
      this.$el.append(this.addBtn);
      ref = this.data;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        results.push(this.addOne(it));
      }
      return results;
    },
    setVal: function(v) {
      return this.form.model.set(this.name, this.data);
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
