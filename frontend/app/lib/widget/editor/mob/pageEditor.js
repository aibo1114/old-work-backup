// Generated by CoffeeScript 1.12.7
(function() {
  cf.tp.profileItem = require('./profileItem.jade');

  require('./pageSelect');

  module.exports = _exv('pageEditor', 'model', {
    backBtn: true,
    toFetch: false,
    tagClass: 'list-group',
    className: 'mobView pageEditor',
    toolbar: false,
    foot: false,
    head: true,
    mode: 'card',
    exEvents: {
      'click .inMod': function(e) {
        var cm, code, opt, v;
        util.sTop();
        code = util.ct(e).attr('code');
        cm = this.prop.codeBy(code);
        v = this;
        opt = $.extend({
          title: iim('m_edit', iie(this.entity, code)),
          data: _.pick(this.model.toJSON(), '_id', code),
          fullScreen: true,
          noLabel: true,
          toolbar: true,
          backBtn: true,
          pView: this,
          prop: [cm],
          foot: false,
          btns: [
            {
              label: '保存',
              icon: 'save',
              cls: 'btn btn-sm',
              key: 'save'
            }
          ],
          callback: function() {
            var n;
            n = this.$('input:first,textarea');
            if (n.length) {
              return n[0].focus();
            } else {
              return this.$('.save').remove();
            }
          },
          _saveSuccess: function(m) {
            var ob;
            popMsg('修改成功');
            ob = {};
            ob[code] = m.get(code);
            v.model.update(ob);
            return cf.slider.slidePage();
          }
        }, {});
        return app.dm.form('slide', this.entity, opt);
      }
    },
    preRender: function() {
      var base, i, it, k, len, ref, results;
      cf.view.form.prototype.showTip.call(this);
      if (this.prop == null) {
        this.prop = this.meta.prop;
      }
      if (this.model) {
        this.data = this.model.toJSON();
      }
      ref = this.prop;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        it = _.clone(it);
        if (!this.isShow(it)) {
          continue;
        }
        k = it.code;
        if (it.prop == null) {
          it.prop = {};
        }
        it.prop.code = k;
        if ((base = it.prop)["class"] == null) {
          base["class"] = '';
        }
        if (!it.noMod) {
          it.prop["class"] += ' inMod';
        }
        this.data[k] && (it.val = this.data[k]);
        it.val = it.lenLimit ? util.adjustText(it.val, it.lenLimit) : it.showText ? it.showText(it.val, this.data, this.meta, this) : void 0;
        if (k) {
          if (it.label == null) {
            it.label = iie(this.entity, k);
          }
        }
        it.ctx = this;
        results.push(this.ctn.append(cf.rtp('profileItem', it)));
      }
      return results;
    }
  });

}).call(this);

//# sourceMappingURL=pageEditor.js.map
