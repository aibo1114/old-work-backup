// Generated by CoffeeScript 1.12.7
(function() {
  var selectItem;

  require('./style.less');

  selectItem = cf.view.collection.extend({
    mode: 'panel',
    toFetch: false,
    foot: true,
    head: false,
    cleanAll: true,
    noStr: 'Search Entity by title',
    tagClass: 'list-group',
    modelOpt: {
      tagName: 'a',
      className: 'list-group-item',
      setContent: function() {
        var d;
        d = this.data;
        this.$el.append(d.title || d.username);
        this.$el.attr('id', "ss-" + d._id);
        return this.$el.attr('title', "ss-" + name);
      }
    }
  });

  module.exports = cf.view.selectBox = cf.view.tag.extend({
    key: cf.id,
    disabled: false,
    noHidden: false,
    boxClass: 'selectBox',
    cleanAll: false,
    paging: true,
    addNew: false,
    setInitVal: true,
    searchItem: 'title',
    groupBtn: [
      {
        icon: 'refresh'
      }, {
        icon: 'edit'
      }, {
        icon: 'remove'
      }
    ],
    events: {
      'click a[data-cid]': 'pick',
      'click .refresh': function(e) {
        var se, url;
        se = this;
        if (this.data && this.data[cf.id]) {
          url = util.restUrl(this.panelOpt.entity) + '/' + this.data[cf.id];
          return $.get(url, {
            _attrs: this.setAttrs
          }, function(res) {
            se.data = res.entity;
            se.setVal();
            return popMsg('更新成功');
          });
        }
      },
      'click .edit': function(e) {
        var ent, i, it, len, prop, ref, se;
        se = this;
        prop = null;
        ent = this.panelOpt.entity;
        if (se.getAttrs()) {
          prop = [];
          ref = se.getAttrs().split(',');
          for (i = 0, len = ref.length; i < len; i++) {
            it = ref[i];
            if (it === 'refFile') {
              prop.push(m._pic('head'));
            } else if (!it.startsWith('_')) {
              prop.push(_ep(ent + ":" + it));
            }
          }
        }
        return app.dm.form('air', ent, {
          btns: [null, 'save'],
          data: this.data,
          prop: prop,
          _save: function() {
            se.form.model.set(se.name, this.model.attributes);
            popMsg('更新成功');
            return this.closeDlg();
          }
        });
      },
      'click .remove': function(e) {
        this.unsetVal();
        this.target.removeAttr('readOnly');
        return this.form.model.unset(this.name, null);
      }
    },
    getAttrs: function() {
      if (this.setAttrs) {
        return _.result(this, 'setAttrs');
      } else {
        return '';
      }
    },
    init: function() {
      var opt;
      this.target = this.$('input[type=text]');
      if (typeof this.setData === "function") {
        this.setData(this.form.data);
      }
      this.render();
      opt = this.clickShow ? {
        'click input[type=text]': 'showBox',
        'keyup input[type=text]': 'filterItem'
      } : {
        'click input[type=text]': 'selectTextAll',
        'change input[type=text]': 'showBox'
      };
      this.bindEvents(opt);
      this.panelOpt = _.result(this, 'panelOpt');
      if (this.readonly || (this.clickShow && cf.mob)) {
        this.$('input[type=text]').attr('readonly', 'readonly');
      }
      if (this.groupBtn && user.isAdmin()) {
        this.target.wrap('<div class="input-group"></div>');
        return this.target.after(cf.rtp('inputBtnGroup', {
          btns: this.groupBtn
        }));
      }
    },
    selectTextAll: function(e) {
      return util.ct(e).select();
    },
    setSearch: function() {},
    setPanel: function() {
      var opt;
      opt = $.extend(true, {
        p: this,
        parent: this.panel,
        noStr: 'No Data!',
        criteriaOpt: {
          _attrs: this.getAttrs()
        }
      }, this.panelOpt);
      return this.collection = new selectItem(opt);
    },
    setContent: function() {
      this.panel = $('<div/>');
      this.panel.addClass(this.boxClass);
      if (typeof this.setPanel === "function") {
        this.setPanel();
      }
      this.$el.append(this.panel);
      if (this.data == null) {
        this.data = this.val;
      }
      if (this.initData) {
        this.data = this.initData();
      }
      if (this.data) {
        if (_.isArray(this.data)) {
          this.target.val('');
        } else {
          this.val = this.data[this.key];
          this.target.val(this.data[this.searchItem]);
          this._picked = true;
          this.target.attr('readOnly', true);
        }
      }
      if (this.hiddenValue) {
        this.target.removeAttr('name');
      }
      this.form.$el.mouseup((function(_this) {
        return function() {
          if (_this.panel.is(':visible')) {
            if (!_this._picked) {
              _this.target.val('');
            }
            return _this.panel.hide();
          }
        };
      })(this));
      this.$el.mouseup(function() {
        return false;
      });
      return this.$el.data('sb', this);
    },
    filterItem: function(e) {
      var v;
      v = util.ct(e).val();
      if (v) {
        return this.panel.find('a').hide().filter(":contains('" + v + "')").show();
      }
    },
    pick: function(e) {
      this.data = this.collection.findData(e).attributes;
      if (this.checkPick && !this.checkPick(this.data)) {
        this.data = null;
        this.panel.hide();
        return;
      }
      this.val = this.data._id;
      this._picked = true;
      this.setVal();
      this.form.model.unset('_unset', {
        silent: true
      });
      this.target.attr('readonly', true);
      if (typeof this.afterPick === "function") {
        this.afterPick(this.data);
      }
      return this.panel.hide();
    },
    findSelect: function(e) {
      var d, id;
      if (_.isString(e)) {
        id = parseInt(e);
      } else {
        id = util.getTargetId(e);
      }
      d = this.collection.get(id);
      if (d) {
        return this.data = d.toJSON();
      }
    },
    setVal: function() {
      var ats, k, res, v;
      ats = this.getAttrs();
      res = ats ? _.pick(this.data, ats.split(',')) : this.data;
      if (this.setToEntity) {
        for (k in res) {
          v = res[k];
          this.form.setVal("[name='" + k + "']", v, k);
        }
      } else {
        if (res._id == null) {
          res._id = this.data._id;
        }
        this.form.model.set(this.name, res);
      }
      if (this.hiddenValue) {
        this.form.model.set(this.name, this.val);
      }
      return this.target.val(this.data[this.searchItem]);
    },
    unsetVal: function() {
      var k, v;
      if (this.setToEntity) {
        for (k in res) {
          v = res[k];
          this.form.unsetVal("[name='" + k + "']");
        }
      } else {
        this.form.model.unset(this.name);
      }
      this._picked = false;
      return this.target.val('');
    },
    setCriteria: function(v) {
      var c, q;
      c = this.collection.collection;
      if (_.isString(v)) {
        if (v) {
          q = {};
          q[this.searchItem] = {
            $regex: ".*" + v + ".*"
          };
          c.setCriteria(q);
        } else {
          c.unsetCriteria('q');
        }
      } else {
        c.setCriteria(v);
      }
      if (this.entityTag && $(this.entityTag).val()) {
        this.collection.collection.entity = $(this.entityTag).val();
      }
      return c.resetFetch();
    },
    showBox: function(e) {
      if (this._picked) {
        return;
      }
      if (!this.panelOpt.entity || this.panelOpt.entity === 'common') {
        return;
      }
      if (!this.lazy) {
        this.setCriteria(e.target ? util.ct(e).val() : e);
      }
      this.panel.css({
        width: this.target.outerWidth()
      });
      return this.panel.show();
    },
    reset: function(entity) {
      if (entity) {
        this.panelOpt.entity = entity;
        this.meta = meta[entity];
      }
      this.unsetVal();
      return this.setPanel();
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
