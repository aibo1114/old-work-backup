// Generated by CoffeeScript 1.12.7
(function() {
  require('./tree.less');

  module.exports = _exv('tree', 'model', {
    cleanAll: true,
    mode: 'panel',
    head: true,
    foot: false,
    className: 'tree',
    subName: 'children',
    showName: 'label',
    key: 'id',
    fixed: false,
    folder: 'folder-close',
    file: 'file',
    handleData: function() {
      this.data = _.result(this, 'data');
      if (this.data) {
        return this.data[this.subName].recSet(this.subName, (function(_this) {
          return function(it) {
            if (!it[_this.key]) {
              return it[_this.key] = util.randomChar(4);
            }
          };
        })(this));
      }
    },
    events: {
      'click .tg': function(e) {
        var t;
        t = util.ct(e);
        if (!t.hasClass('glyphicon-file')) {
          t.toggleClass(_st.iconStr + "-folder-open");
          return t.siblings('ul').toggle();
        }
      },
      'click a': function(e) {
        var t;
        t = util.ct(e);
        this.$('.' + app.active).removeClass(app.active);
        t.addClass(app.active);
        return typeof this.itemClick === "function" ? this.itemClick(t) : void 0;
      },
      'click .del': 'del',
      'click .add': 'add',
      'click .edit': 'edit',
      'click .ckb': 'ckb'
    },
    ckb: function(e) {
      var all, t;
      t = util.ct(e);
      if (t.attr('stype') === 'file') {
        return typeof this.ckbChildVal === "function" ? this.ckbChildVal(t) : void 0;
      } else {
        all = t.parent().next().find('.ckb');
        all.prop("checked", (t.is(':checked') ? true : false));
        return typeof this.ckbParentVal === "function" ? this.ckbParentVal(t, all) : void 0;
      }
    },
    del: function(e) {
      var d, id, pu, res, t;
      if (confirm('Are your sure?')) {
        t = util.ct(e);
        id = t.siblings('a[id]').attr('id');
        pu = t.closest('.sub');
        d = this.findItem(pu.siblings('a[id]').attr('id'));
        if (d == null) {
          d = this.data;
        }
        res = d[this.subName].delBy(id, 'id');
        if (res) {
          t.parent().remove();
        }
        $('#menuForm').remove();
        return typeof this.afterDel === "function" ? this.afterDel(id) : void 0;
      }
    },
    preRender: function() {
      var base, c, name;
      if ((base = this.data)[name = this.key] == null) {
        base[name] = util.randomChar(4);
      }
      c = $("<ul id='" + this.data[this.key] + "' class='root'></ul>");
      this.ctn.addClass('tree').append(c);
      this.renderTree(this.data[this.subName], c);
      if (!this.fixed) {
        c.append(this.addBtn());
      }
      if (this.expend) {
        return this.$('.root>li>.tg').trigger('click');
      }
    },
    renderTree: function(items, c, addBtn) {
      var cc, i, it, len, li;
      for (i = 0, len = items.length; i < len; i++) {
        it = items[i];
        li = this.treeItem(it);
        if (it[this.subName]) {
          cc = $('<ul class="sub"></ul>');
          li.append(cc);
          this.renderTree(it[this.subName], cc, true);
        }
        c.append(li);
      }
      if (addBtn && !this.fixed) {
        return c.append(this.addBtn());
      }
    },
    addBtn: function() {
      return "<li><i/>" + (tu.icon('plus', 'b')) + "<a class='add'>" + (ii('add')) + "</a></li>";
    },
    treeItem: function(it, fixed) {
      var li, type;
      if (fixed == null) {
        fixed = this.fixed;
      }
      li = $("<li><i/></li>");
      type = it[this.subName] ? this.folder : this.file;
      li.append(tu.icon(type, 'b', null, 'tg'));
      if (this.select) {
        li.append("<label>" + it[this.showName] + "<input stype='" + type + "' class='ckb' sid='" + it[this.key] + "' type='checkbox'/></label>");
      } else {
        li.append("<a class='edit' id='" + it[this.key] + "'>" + it[this.showName] + "</a>");
      }
      if (!fixed) {
        li.append(tu.icon('trash del', 'a'));
      }
      return li;
    }
  });

}).call(this);

//# sourceMappingURL=tree.js.map
