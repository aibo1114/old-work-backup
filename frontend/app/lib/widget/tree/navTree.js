// Generated by CoffeeScript 1.12.7
(function() {
  cf.view.navTreeItem = cf.view.model.extend({
    entity: 'nav',
    tagName: 'li',
    tmpl: require('./treeItem.jade'),
    opt: {
      folder: 'folder-close',
      file: 'file',
      key: 'id',
      fixed: false,
      showName: 'label',
      subName: 'children'
    },
    preRender: function() {
      if (this.model.get('type') === 'folder') {
        return this.sub = new cf.view.navTreeCollection({
          pid: this.data._id,
          className: 'sub',
          parent: this.$el,
          data: this.data.children || [],
          cleanAll: false
        });
      } else {
        return this.sub && this.sub.remove();
      }
    }
  });

  cf.view.navTreeCollection = cf.view.collection.extend({
    entity: 'nav',
    tagName: 'ul',
    className: 'root',
    toFetch: false,
    itemView: cf.view.navTreeItem,
    events: {
      'click >li>.tg': function(e) {
        var t;
        t = util.ct(e);
        if (!t.hasClass('glyphicon-file')) {
          t.toggleClass(_st.iconStr + "-folder-open");
          t.siblings('ul').toggle();
          return typeof this.afterTg === "function" ? this.afterTg() : void 0;
        }
      },
      'click .del': function(e) {
        if (confirm('Are your sure?')) {
          util.getModel(e).destroy({
            wait: true
          });
          return typeof this.afterDel === "function" ? this.afterDel(id) : void 0;
        }
      },
      'click a': function(e) {
        var t;
        t = util.ct(e);
        this.$('.' + app.active).removeClass(app.active);
        t.addClass(app.active);
        return typeof this.afterPick === "function" ? this.afterPick(t) : void 0;
      }
    },
    afterAddAll: function() {
      return this.ctn.append(this.addBtn());
    },
    addBtn: function() {
      return "<li class='addBtn'><i/>" + (tu.icon('plus', 'b')) + "<a class='add'>" + (ii('add')) + "</a></li>";
    },
    addOne: function(item, index, opt) {
      if (opt == null) {
        opt = {};
      }
      cf.view.collection.prototype.addOne.apply(this, arguments);
      return this.ctn.append(this.ctn.children('.addBtn'));
    }
  });

  module.exports = cf.view.navTree = cf.view.model.extend({
    entity: 'nav',
    mode: 'panel',
    tagClass: 'tree panel-body',
    head: true,
    foot: false,
    style: 'panel-primary',
    events: {
      'click .pick': function(e) {
        return app.dm.edit(this.opt.form, this.entity, null, {
          btns: ['save'],
          toFetch: false,
          colSilent: false,
          model: util.getModel(e),
          _saveSuccess: function(m) {
            return $('#navForm').empty();
          }
        });
      },
      'click .add': function(e) {
        var pv;
        pv = util.getView(e);
        return app.dm.add(this.opt.form, this.entity, {
          btns: ['save'],
          model: null,
          data: {
            pid: pv.pid,
            label: '',
            type: 'file'
          },
          _saveSuccess: function(m) {
            pv.collection.add(m);
            return $('#navForm').empty();
          }
        });
      }
    },
    modelOpt: {
      parse: function(d) {
        var i, ids, it, k, len, name, ref, ref1, res, rp, v;
        if (d.entities.length) {
          res = {};
          ids = {};
          ref = d.entities;
          for (i = 0, len = ref.length; i < len; i++) {
            it = ref[i];
            rp = res[name = it.pid] != null ? res[name] : res[name] = [];
            rp.push(it);
            ids[it._id] = it;
          }
          for (k in res) {
            v = res[k];
            v.sortBy('row');
            if ((ref1 = ids[k]) != null) {
              ref1.children = v;
            }
          }
          return {
            d: res._root
          };
        } else {
          return {
            d: []
          };
        }
      }
    },
    preRender: function() {
      this.ctn = this.$('.tree');
      return new cf.view.navTreeCollection({
        pid: '_root',
        parent: this.ctn,
        data: this.model.get('d')
      });
    }
  });

}).call(this);

//# sourceMappingURL=navTree.js.map
