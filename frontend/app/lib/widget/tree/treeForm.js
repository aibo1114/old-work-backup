// Generated by CoffeeScript 1.12.7
(function() {
  var tree;

  tree = require('./tree');

  module.exports = tree.extend({
    toFetch: false,
    className: 'col-md-4',
    formId: 'treeForm',
    subName: 'children',
    showName: 'label',
    key: 'id',
    parentKey: 'pid',
    channelForm: function(o) {
      var opt;
      opt = {
        p: this,
        toFetch: false,
        btns: ['save']
      };
      return app.dm.form('#' + this.formId, this.formEntity || this.entity, $.extend(opt, o, this.formOpt));
    },
    edit: function(e) {
      this.channelForm({
        title: iim('m_edit', this.formEntity),
        data: this.findItem(util.ct(e).attr('id')),
        _save: function() {
          var d;
          d = this.model.toJSON();
          this.p.updateItem(d);
          return this.$el.remove();
        }
      });
      return e.stopPropagation();
    },
    add: function(e) {
      var aid, pid, t;
      t = util.ct(e);
      aid = t.closest('ul').siblings("a[id]");
      pid = aid.length ? aid.attr('id') : this.$('.root').attr('id');
      this.channelForm({
        title: iim('m_add', this.formEntity),
        pid: pid,
        _save: function() {
          var d;
          d = this.model.toJSON();
          d[this.p.key] = util.randomChar(4);
          this.p.addItem(this.pid, d);
          return this.$el.remove();
        }
      });
      return e.stopPropagation();
    },
    preRender: function() {
      this.handleData();
      return tree.prototype.preRender.call(this);
    },
    afterMount: function() {
      return $(this.parent).mk('div', {
        "class": 'col-md-8',
        id: this.formId
      });
    },
    context: function() {
      return {
        title: this.title,
        foot: true
      };
    },
    findItem: function(id) {
      return this.data[this.subName].recFind(this.subName, id, this.key);
    },
    updateItem: function(obj) {
      var tob;
      tob = this.findItem(obj[this.key]);
      $.extend(tob, obj);
      if (obj.mType === 'file') {
        util.del(this.subName, tob);
      }
      $('#' + obj[this.key]).text(obj[this.showName]);
      if (this.p) {
        return this.p.data.res[this.p.rName] = this.data;
      }
    },
    addItem: function(pid, obj) {
      var r, ul;
      if (pid === (this.data[this.key] + '')) {
        r = this.data[this.subName];
        r.push(obj);
        ul = this.$('.root');
      } else {
        r = this.findItem(pid);
        if (!r[this.subName]) {
          r[this.subName] = [];
        }
        r[this.subName].push(obj);
        ul = $('#' + pid).siblings('ul');
      }
      ul.find('>li>.add').parent().remove();
      this.renderTree([obj], ul, true);
      if (this.p) {
        return this.p.data.res[this.p.rName] = this.data;
      }
    }
  });

}).call(this);

//# sourceMappingURL=treeForm.js.map
