// Generated by CoffeeScript 1.12.7
(function() {
  var uploader, wxUploader;

  uploader = require('../widget/editor/uploader');

  wxUploader = require('../widget/wx/imgUploader');

  cf.widget.fileItem = require('../view/model').extend({
    className: 'media',
    genResItem: function(it) {
      var path, wtStr;
      if (it.type === 'img') {
        path = it.path;
        if (it.wt) {
          wtStr = "wt='" + it.wt + "' ";
        } else {
          path += "?" + (util.randomChar(2));
        }
        return "<img " + (wtStr || '') + " onclick='cf.showPic(this)' class='img-responsive' src='" + path + "'>";
      } else if (it.type === "doc") {
        return (util.icon('file')) + "<a target=\"_blank\" href=\"" + it.path + "\">" + it.fName + "<span class=\"float-right timestamp\">" + (it.username || '') + " " + (it.dateCreated || '') + "</span>";
      } else if (it.type === "audio") {
        if (util.html5Check()) {
          return "<audio controls=\"\"><source src=\"" + it.path + "\"/></audio>";
        } else {
          return "<div>" + it.path + "</div>";
        }
      } else if (it.type === "video") {
        if (util.html5Check()) {
          return "<video controls=\"controls\"><source src=\"" + it.path + "\"/></video>";
        } else {
          return "<li><div>" + it.path + "</div></li>";
        }
      }
    },
    setContent: function() {
      var it, ref, sp;
      this.data = it = this.model.toJSON();
      if (it.uid) {
        ref = it.uid.split('__'), it.uid = ref[0], it.username = ref[1];
      }
      this.$el.append(this.genResItem(it));
      this.$el.append($('<div class="f-btn btnCtn"/>'));
      if (this.collection.ordered && this.collection.multi) {
        sp = $('<div class="s-btn"/>').appendTo(this.$el);
        sp.append(util.icon('chevron-left mLeft', null, null, _st.btn(null, 'sm', false)));
        return sp.append(util.icon('chevron-right mRight', null, null, _st.btn(null, 'sm', false, 'pull-right')));
      }
    }
  });

  cf.view.fileCollection = cf.view.collection.extend({
    max: 20,
    mode: 'panel',
    className: 'xFile',
    toFetch: false,
    pickBtn: false,
    syncBtn: false,
    cleanAll: true,
    entity: 'xFile',
    type: 'img',
    items: 'title,type',
    itemBtns: ['del'],
    itemView: cf.widget.fileItem,
    auto: true,
    fixed: false,
    init: function() {
      this.upOpt = {
        url: '/upload'
      };
      if (this.form && this.form.entity === 'headItem') {
        this.func = $("input[name='type']").val();
      }
      if (this.pick && this.multi) {
        return this.modelOpt && (this.modelOpt.className = 'pick');
      }
    },
    enhanceContent: function() {
      this.$el.addClass(this.type);
      return this.ctn.addClass('media-list');
    },
    preRender: function() {
      var oi;
      if (window.wx && cf.mob) {
        return new wxUploader({
          parent: this.head,
          title: iim('upload', this.type),
          form: this.form,
          name: this.name,
          type: this.type,
          multi: this.multi,
          _func: this.func,
          ctx: this
        });
      } else {
        oi = cf.opt.image;
        return uploader.fun({
          parent: this.head,
          btnTitle: this.btnTitle = iim('upload', this.type),
          form: this.form,
          name: this.name,
          type: this.type,
          multi: this.multi,
          func: this.func,
          pickBtn: this.pickBtn,
          upOpt: $.extend(this.upOpt, oi[this.func] || oi.df),
          uploadCallback: this.uploadCallback,
          ctx: this
        });
      }
    },
    uploadCallback: function(res) {
      return this.collection.add(res.entity);
    }
  });

  module.exports = cf.view.fileCollection;

}).call(this);

//# sourceMappingURL=fileCollection.js.map
