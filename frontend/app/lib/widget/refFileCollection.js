// Generated by CoffeeScript 1.12.7
(function() {
  var ref;

  require('../meta/xFile');

  cf.view.refFileCollection = ref = require('./fileCollection').extend({
    type: 'img',
    showThumb: '_thumb',
    itemBtns: ['thumb', 'popEdit', 'del'],
    func: 'head',
    title: '',
    context: function() {
      return {
        style: this.style
      };
    },
    events: {
      'click .mLeft': function(e) {
        var n, t;
        t = util.ct(e).closest('.media');
        n = t.index();
        t.after(t.prev());
        return this._swap(n - 1, n);
      },
      'click .mRight': function(e) {
        var n, t;
        t = util.ct(e).closest('.media');
        n = t.index();
        t.before(t.next());
        return this._swap(n, n + 1);
      },
      'click .pick': function(e) {
        var t;
        t = util.ct(e);
        t.addClass('active').siblings().removeClass('active');
        return this._setObj(t.index(), 'pick');
      }
    },
    data: function() {
      var i, it, len, pn, ref1, results;
      this._func = this.func;
      ref1 = this._getObj(null, []);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        it = ref1[i];
        pn = (function() {
          switch (this.func) {
            case 'portrait':
              return "portrait/" + this.form.model.id + ".jpg";
            case 'logo':
            case 'banner':
              return "images/" + it;
            case 'id':
              return this.form.model.id + '.jpg';
            default:
              return it;
          }
        }).call(this);
        results.push({
          path: util.resPath(cf.community, pn),
          type: this.type,
          id: it
        });
      }
      return results;
    },
    uploadCallback: function(res) {
      var e;
      e = res.entity;
      e.id = e.fieldname + '.' + e.extension;
      e.func = this.func;
      e.path = util.resPath(cf.community, e.name);
      if (e.mimetype === "image/jpeg") {
        e.type = 'img';
      }
      if (this.multi) {
        this.collection.add(e);
      } else {
        this.collection.reset(e);
      }
      return this._addArrayItem(e.id, this.multi);
    }
  });

  $.extend(ref.prototype, require('../func/propObj'));

  module.exports = ref;

}).call(this);

//# sourceMappingURL=refFileCollection.js.map
