// Generated by CoffeeScript 1.12.7
(function() {
  var ip;

  require('./recorder.less');

  ip = require('./input');

  module.exports = ip.extend({
    title: '按住录音',
    btnClass: 'record',
    icon: 'bullhorn',
    checkToRecord: function() {
      return true;
    },
    events: {
      'click .repeatRec': function(e) {
        return wx.playVoice({
          localId: this.vid || util.ct(e).attr('vid')
        });
      },
      'click .saveRec': function(e) {
        var m, r;
        r = this;
        m = r.form.model;
        return wx.uploadVoice({
          localId: this.vid,
          success: function(res) {
            var kk, rf;
            if (!m.get('refFile')) {
              m.set('refFile', {});
            }
            rf = m.get('refFile');
            kk = "_wt::audio::" + res.serverId + "::" + ($('body').data('wcode'));
            if (rf.audio) {
              rf.audio.push(kk);
            } else {
              rf.audio = [kk];
            }
            m.addHandler('after', 'wtFetcher');
            return r.dlg.closeDlg();
          }
        });
      },
      'press .record': function(e) {
        var act, cd, cpt, r, rdb, s, t;
        if (!this.checkToRecord()) {
          e.preventDefault();
          e.stopPropagation();
          return;
        }
        s = 60;
        rdb = $("<div class='rdBox'><p><strong>录音中...</strong></p><strong class='cd'>" + s + "</strong></div>");
        cd = rdb.find('.cd');
        t = util.ct(e);
        t.children('span').hide();
        t.append("<strong>开始录音...</strong>");
        this.ctn.append(rdb);
        r = this;
        cpt = function(res) {
          rdb.remove();
          t.find('strong').remove();
          t.find('span').show();
          if (!r.vid) {
            r.afterRecoded();
          }
          return r.vid = res.localId;
        };
        wx.startRecord();
        wx.onVoiceRecordEnd({
          complete: cpt
        });
        e = setInterval(function() {
          s--;
          cd.text(s);
          if (s === 0) {
            return clearInterval(e);
          }
        }, 1000);
        act = function(e) {
          e.preventDefault();
          wx.stopRecord({
            success: cpt
          });
          return t[0].removeEventListener('touchend', act, false);
        };
        return t[0].addEventListener('touchend', act, false);
      }
    },
    afterRecoded: function() {
      return this.ctn.append(cf.rtp(require('./recorderTmpl.jade')));
    }
  });

}).call(this);

//# sourceMappingURL=recorder.js.map
