// Generated by CoffeeScript 1.12.7
(function() {
  var cf, meta;

  cf = require('./init_light');

  require('../ext/string');

  require('./extend/jquery');

  require('./extend/backbone');

  $.extend(util, require('./tmpl'));

  cf.bbEvt = {};

  _.extend(cf.bbEvt, Backbone.Events);

  W.onscroll = _.debounce(function() {
    return cf.bbEvt.trigger('scroll');
  }, 1000);

  require('./func/loadNewPic');

  require('./func/goTop');

  meta = require('./meta/common');

  $.extend(W, {
    _exv: function(name, tag, opt) {
      if (_.isString(tag)) {
        tag = cf.view[tag];
      }
      return cf.view[name] = tag.extend(opt);
    },
    _exm: function(name, opt) {
      return cf.model[name].extend(opt);
    },
    _st: require('../ext/style/bs'),
    tu: require("../ext/tmpl"),
    meta: meta,
    m: meta,
    _ep: meta.exp
  });

  $.extend(cf, {
    meta: meta,
    tp: {
      opt: {
        f: window.tu,
        u: util,
        i18: util.i18n,
        c: cf.community,
        st: _st
      }
    },
    dm: {
      l: function(cp, place, opt) {
        if (place === 'air') {
          opt.render = require('./view/_modal');
        }
        if (_.isString(cp)) {
          cp = cf.view[cp];
        }
        place && (opt.parent = place);
        return new cp(opt);
      },
      ent: function(p, opt) {
        return new cf.model.entity(p, opt);
      },
      ents: function(p, opt) {
        return new cf.model.entities(p, opt);
      }
    },
    view: {},
    widget: {},
    i18n: {},
    opt: {
      image: {
        df: {}
      }
    },
    checkLogin: function() {
      if (!user.isLogin()) {
        throw 'noLogin::toLogin';
      }
    },
    _handleErr: {
      noLogin: function() {
        if (location.hash) {
          cf._toLogin = location.hash;
        }
        return cf.r('login');
      },
      noFunc: function() {},
      waitWtJs: function() {},
      rt: function(p) {
        return cf.r(p);
      },
      rr: function() {
        return cf.rr();
      }
    },
    rtp: function(tmpl, opt) {
      if (opt == null) {
        opt = {};
      }
      if (_.isString(tmpl)) {
        if (!cf.tp[tmpl]) {
          try {
            cf.tp[tmpl] = cf.loadTmpl(tmpl);
          } catch (error) {
            cf.tp[tmpl] = cf.loadLibTmpl(tmpl);
          }
        }
        tmpl = cf.tp[tmpl];
      }
      return tmpl($.extend(opt, cf.tp.opt));
    },
    exLabel: function() {
      var it, k, results, v;
      results = [];
      for (k in m) {
        v = m[k];
        if (!k.startsWith('_') && v.label) {
          _i[k] = v.label;
          if (v.prop) {
            results.push((function() {
              var i, len, ref, results1;
              ref = v.prop;
              results1 = [];
              for (i = 0, len = ref.length; i < len; i++) {
                it = ref[i];
                if (it.label) {
                  results1.push(_i[k + "_" + it.code] = it.label);
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            })());
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    home: function() {
      var path;
      if (location.pathname !== '/') {
        path = '/';
      } else {
        path = '#';
      }
      return location.href = path;
    },
    r: function(path, tg, rp) {
      if (tg == null) {
        tg = true;
      }
      if (rp == null) {
        rp = false;
      }
      if (path) {
        if (!path.startsWith('#')) {
          path = util.navUrl(path);
        }
      }
      return app.navigate(path, {
        trigger: tg,
        replace: rp
      });
    },
    rr: function(path) {
      if (path == null) {
        path = location.hash;
      }
      if (path) {
        return Backbone.history.loadUrl(path);
      }
    },
    _packOpt: function(init, et, type, opt) {
      var ob;
      if (cf._initOpt) {
        init = $.extend(init, cf._initOpt(type));
      }
      ob = type && m[et] ? _.result(m[et], type + 'Opt') : {};
      return $.extend(init, ob, opt);
    },
    uSize: {
      img: {
        max: 1024 * 1024 * 6,
        ext: ["jpg", "jpeg", "png", "gif"]
      },
      doc: {
        max: 1000 * 1024 * 4,
        ext: ["doc", "docx", "ppt", "pptx", "txt", "pdf", "rtf"]
      },
      audio: {
        max: 1000 * 1024 * 5,
        ext: ["wmv", "mp3", "mid"]
      },
      video: {
        max: 1000 * 1024 * 12,
        ext: ["swf", "fla", "mp4"]
      }
    },
    pv: function() {
      return $.post(util.restUrl('stat'), {
        tid: cf._tid,
        uid: user.id,
        username: user.username,
        startTime: new Date().getTime(),
        href: location.href,
        referrer: app.prev() ? app.prev.frag : document.referrer
      });
    }
  });

}).call(this);

//# sourceMappingURL=init.js.map
