// Generated by CoffeeScript 1.12.7
(function() {
  var ExtractTextPlugin, SpritesmithPlugin, app_dir, base, bower_dir, config, devPath, fs, i, it, lang, len, lib_dir, m, mPath, moduleName, module_dir, node_dir, outPath, path, port, ref, ref1, root, setting, webpack;

  ExtractTextPlugin = require("extract-text-webpack-plugin");

  SpritesmithPlugin = require('webpack-spritesmith');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  fs = require('fs');

  
    _ = require('underscore');
    log = console.log;
    packDir = function (path, dir) {
        var d, i, it, j, len, len1, name, opt, ref, ref1;
        opt = {};
        ref = dir.split(',');
        for (i = 0, len = ref.length; i < len; i++) {
            d = ref[i];
            ref1 = fs.readdirSync(path + d);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                it = ref1[j];
                if (it.indexOf('.js') > -1) {
                    name = it.split('.')[0];
                    opt[name] = [path + d + '/' + name];
                }
            }
        }
        return opt;
    };
;

  devPath = fs.readFileSync(__dirname + "/.dev", 'utf8');

  m = null;

  mPath = null;

  moduleName = null;

  ref = process.argv;
  for (i = 0, len = ref.length; i < len; i++) {
    it = ref[i];
    if (it.indexOf('--:') === 0) {
      ref1 = it.substr(3).split(':'), m = ref1[0], port = ref1[1], moduleName = ref1[2], lang = ref1[3];
      mPath = "./module/" + m + "/";
    }
  }

  if (lang == null) {
    lang = 'zh';
  }

  setting = require(mPath + 'webpack');

  outPath = setting.outPut ? _.isString(setting.outPut) ? setting.outPut : setting.outPut(devPath, moduleName) : devPath + "public/res/upload/" + m + "/lib/";

  path = require('path');

  webpack = require('webpack');

  app_dir = __dirname;

  module_dir = app_dir + "/module/" + m;

  lib_dir = app_dir + "/lib/";

  bower_dir = path.join(app_dir, 'res/js/');

  node_dir = app_dir + "/node_modules/";

  config = {
    addVendor: function(name, path) {
      this.resolve.alias[name] = path;
      return this.module.noParse.push(new RegExp('^' + name + '$'));
    },
    entry: {
      lib: ['jquery', 'bootstrap', 'underscore', lib_dir + 'init_light']
    },
    output: {
      path: process.env.NODE_ENV === 'production' ? outPath || mPath + '' : '',
      filename: '[name].js'
    },
    externals: {
      ggMap: 'ggmap'
    },
    plugins: [
      new webpack.optimize.CommonsChunkPlugin('lib', 'lib.js'), new webpack.optimize.OccurenceOrderPlugin(), new ExtractTextPlugin("[name].css"), new webpack.ProvidePlugin({
        $: "jquery",
        jQuery: "jquery",
        jquery: "jquery",
        "window.jQuery": "jquery",
        _: 'underscore',
        Backbone: 'backbone',
        CodeMirror: 'CodeMirror'
      }), new SpritesmithPlugin({
        src: {
          cwd: path.resolve(module_dir, 'images/ico'),
          glob: '*.png'
        },
        target: {
          image: path.resolve(module_dir, 'images/sprite.png'),
          css: path.resolve(module_dir, 'app/style/sprite.css')
        },
        apiOptions: {
          cssImageRef: "/images/sprite.png"
        }
      })
    ],
    resolve: {
      alias: {},
      modulesDirectories: ['node_modules', module_dir + '/images']
    },
    resolveLoader: {
      root: node_dir
    },
    module: {
      noParse: [],
      loaders: [
        {
          test: /\.css$/,
          loader: ExtractTextPlugin.extract("style", "css")
        }, {
          test: /\.(png|gif|jpg)$/,
          loader: 'url-loader?limit=10000'
        }, {
          test: /\.(woff2|woff|eot|ttf|svg)$/,
          loader: 'file'
        }, {
          test: /\.jade$/,
          loader: "jade"
        }, {
          test: /\.less$/,
          loader: ExtractTextPlugin.extract("style", "css!less")
        }, {
          test: /\.sass$/,
          loader: ExtractTextPlugin.extract("style", "css!sass")
        }
      ]
    },
    devServer: {
      contentBase: mPath,
      host: '0.0.0.0',
      hot: false,
      inline: true,
      lazy: false,
      port: port || 8088,
      colors: true,
      stats: {
        color: true
      }
    }
  };

  config.addVendor('zepto', bower_dir + 'zepto/zepto.min.js');

  config.addVendor('bootstrap', bower_dir + 'bootstrap/dist/js/bootstrap.min.js');

  config.addVendor('underscore', bower_dir + 'underscore/underscore-min.js');

  config.addVendor('backbone', bower_dir + 'backbone/backbone-min.js');

  config.addVendor('CodeMirror', bower_dir + 'codemirror/lib/codemirror.js');

  config.addVendor('socket.io', bower_dir + 'socket.io-client/socket.io.js');

  if (setting.entry) {
    _.extend(config.entry, setting.entry(mPath, lib_dir, bower_dir, moduleName, lang));
  }

  if (!setting.noLang) {
    (base = config.entry)[lang] || (base[lang] = [mPath + "i18n/" + lang]);
  }

  if (setting.loaders) {
    config.module.loaders = setting._ml ? config.module.loaders.concat(setting.loaders()) : setting.loaders();
  }

  if (process.env.NODE_ENV === 'production' && setting._publicPath) {
    config.output.publicPath = setting._publicPath;
  }

  if (setting.jq === '11') {
    config.addVendor('jquery', bower_dir + 'jquery-1.11.3.min.js');
    config.addVendor('jquery-m', bower_dir + 'jquery-migrate-1.2.1.min.js');
    config.entry.lib = ['jquery', 'jquery-m', bower_dir + 'ie8.js', 'underscore', "./lib/init_light_ie6.js"];
  } else if (setting.jq === '183') {
    config.addVendor('jquery', bower_dir + 'jquery-1.8.3.min.js');
  } else {
    config.addVendor('jquery', bower_dir + 'jquery/dist/jquery.min.js');
  }

  module.exports = config;

}).call(this);

//# sourceMappingURL=webpack.config.js.map
