// Generated by CoffeeScript 1.12.7
(function() {
  var ct, dcvt, initRating, pcvt;

  $('.tbHead input').click(function() {
    var i, it, len, ref, results;
    $(this).closest('table').find('.total').text($(this).data('price') * $(this).data('count'));
    ref = $('.hoverLink');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      it = ref[i];
      results.push(util.addHover($(it)));
    }
    return results;
  });

  ct = $('.ratingView');

  initRating = function(ctn) {
    var avg, i, it, len, lt, v;
    avg = 0;
    lt = $('.starVal', ctn);
    if (lt.length) {
      for (i = 0, len = lt.length; i < len; i++) {
        it = lt[i];
        v = +$(it).text();
        avg += v;
        $(it).html(util.starRating(5, v * 0.5));
      }
    }
    return $('.avg', ctn).html(util.starRating(5, avg * 0.5 / lt.length));
  };

  initRating(ct);

  cf.rate = function(t) {
    var id;
    id = $(t).attr('tid');
    return app.dm.form('air', 'rating', {
      title: 'Thank you for the valuable feedback',
      toFetch: false,
      urlRoot: util.actUrl('push', 'tour', '_id', id, 'rate'),
      cols: 'col-md-4:col-md-8',
      className: 'break',
      _saveSuccess: function(model) {
        return model.view.closeDlg();
      },
      callback: function() {
        return this.$('.starBox').parent().parent().children('label').addClass('col-md-4');
      }
    });
  };

  cf.showRatingMore = function(e) {
    var id;
    id = $(e).attr('tid');
    return app.dm.tag('air', {
      title: 'Recently Reviews',
      preRender: function() {
        this.ctn.css('padding', '30px');
        return $.get("/a/tour/_id/" + id + "/rate", (function(_this) {
          return function(res) {
            var i, it, k, len, nct, ref, results, v;
            ref = res.entities;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              it = ref[i];
              nct = ct.clone();
              for (k in it) {
                v = it[k];
                if (k === 'lastUpdated') {
                  v = v.dStr();
                }
                nct.find("." + k).text(v);
              }
              _this.ctn.append(nct);
              results.push(initRating(nct));
            }
            return results;
          };
        })(this));
      }
    });
  };

  m.traveler = {
    prop: [
      m._radio('title', {
        attrs: {
          data: ['Mr.', 'Mrs.', 'Miss']
        }
      }), _ep('firstName'), _ep('lastName')
    ]
  };

  pcvt = function(v) {
    return v + " Pax";
  };

  dcvt = function(v) {
    if (v === 'false') {
      v = 0;
    }
    return (v || 0) + "$";
  };

  $.extend(meta.deal._, {
    totalNum: {
      showCvt: pcvt
    },
    freeChild: {
      showCvt: pcvt
    },
    tourCost: {
      showCvt: dcvt
    },
    airportTransferCost: {
      showCvt: dcvt
    },
    total: {
      showCvt: dcvt
    },
    optionalServiceCost: {
      showCvt: dcvt
    },
    scheduledTakeoffTime: {
      showCvt: dateCvt
    },
    scheduledLandingTime: {
      showCvt: dateCvt
    },
    tourDate: {
      showCvt: dateCvt
    }
  });

  app.enhance({
    routes: {
      '!/bookTour/:id': 'bookTour'
    },
    bookTour: function(id) {
      var num, obj, steps;
      steps = ['Select Services', 'Input details', 'Pay Deposit', 'Booking Confirmation'];
      obj = window["p_" + id];
      num = cf.orderNum();
      return new cf.view.tabForm({
        parent: this.ctn.empty(),
        saveByStep: false,
        className: 'pay',
        entity: 'deal',
        toFetch: false,
        tmpl: 'pay',
        syncBox: '.review',
        num: 0,
        data: {
          num: num,
          title: 'Mr.',
          cat: 'tour',
          status: cf.st.init('deal'),
          nationality: 'US',
          optionalService: {},
          tour: {
            title: obj.title,
            code: obj.code,
            _id: id
          }
        },
        _saveSuccess: function(model) {
          return model.view.renderNextTab();
        },
        exEvents: {
          "change [name='airportTransferCost']": function(e) {
            var md, t;
            t = util.ct(e);
            md = m.deal.prop;
            if (t.is(':checked')) {
              md.codeBy('departureFlightNumber').valid.required = true;
              md.codeBy('arrivalFlightNumber').valid.required = true;
              md.codeBy('scheduledLandingTime').valid.required = true;
              md.codeBy('scheduledTakeoffTime').valid.required = true;
              this.$('.adss').find('input,select').removeAttr('disabled');
              this.$("input[name='scheduledLandingTime']").removeAttr('disabled');
              return this.$("input[name='scheduledTakeoffTime']").removeAttr('disabled');
            } else {
              md.codeBy('departureFlightNumber').valid.required = false;
              md.codeBy('arrivalFlightNumber').valid.required = false;
              md.codeBy('scheduledLandingTime').valid.required = false;
              md.codeBy('scheduledTakeoffTime').valid.required = false;
              this.model.unset('scheduledTakeoffTime');
              this.model.unset('scheduledLandingTime');
              this.model.unset('departureFlightNumber');
              this.model.unset('arrivalFlightNumber');
              this.$('.adss').find('input,select').attr('disabled', 'disabled');
              this.$("input[name='scheduledLandingTime']").attr('disabled', 'disabled');
              return this.$("input[name='scheduledTakeoffTime']").attr('disabled', 'disabled');
            }
          },
          'change .sti': function(e) {
            var i, it, j, len, len1, osc, oscTotal, osm, p, ref, ref1, rt, sid, sp, st, t, td, total, v;
            t = util.ct(e);
            td = t.closest('td');
            sid = td.data('sid');
            rt = $("." + sid).empty();
            total = 0;
            ref = td.find('select');
            for (i = 0, len = ref.length; i < len; i++) {
              it = ref[i];
              st = $(it);
              v = +st.val();
              if (v > 0) {
                p = st.data('price');
                total += v * p;
                rt.append("<div class='form-control-static'>" + p + "$ x " + v + "</div>");
              }
            }
            td.next().find('.total').text(total);
            osm = this.model.get('optionalService');
            if (osm[sid] == null) {
              osm[sid] = {
                title: t.closest('.panel').find('.panel-heading').text()
              };
            }
            osm[sid][t.data('price')] = t.val();
            oscTotal = 0;
            ref1 = $('.totalBk .total');
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              it = ref1[j];
              sp = $(it);
              oscTotal += +sp.text();
            }
            osc = this.$("[name='optionalServiceCost']");
            osc.val(oscTotal);
            return osc.trigger('change');
          },
          'change .dInput>select': dInputEvent,
          "change input[name='optionalServiceCost'],input[name='tourCost'],input[name='airportTransferCost']": function(e) {
            var htfa, os, tc;
            tc = +this.$("[name='tourCost']").val();
            os = +this.$("[name='optionalServiceCost']").val();
            htfa = +this.$("[name='airportTransferCost']:checked").val();
            return this.setVal("input[name='total']", tc + os + (htfa || 0));
          }
        },
        totalNum_change: function(v, e) {
          var t;
          t = v * util.ct(e).data('price');
          this.$('.totalPt').text(t);
          return this.setVal("[name='tourCost']", t);
        },
        context: function() {
          return {
            steps: steps,
            title: 'Build Your Ideal Trip In Beijing'
          };
        },
        items: [
          {
            tmpl: 'service',
            context: function() {
              return {
                tabTitle: steps[0],
                prices: obj.prices,
                title: obj.title,
                code: obj.code,
                num: 1,
                shows: _shows
              };
            },
            callback: function() {
              util.initPC('#showList');
              util.loadPic('#showList');
              return this.$('.adss').find('input,select').attr('disabled', 'disabled');
            }
          }, {
            tmpl: 'detail',
            context: function() {
              return {
                tabTitle: 'Input Your Information',
                title: obj.title,
                num: 2
              };
            },
            callback: function() {
              var cs, k, ref, v;
              cs = $('#cList');
              ref = cf.cc;
              for (k in ref) {
                v = ref[k];
                cs.append("<option value='" + k + "'>" + v + "</option>");
              }
              $('.total').text(this.model.get('total'));
              return new cf.view.jsonTable({
                title: 'Add Other Travelers',
                entity: 'traveler',
                _prop: 'otherTraveler',
                form: this,
                parent: '.personBox',
                data: [],
                afterRemove: function() {
                  return this.renderSideBox();
                },
                afterSave: function() {
                  return this.renderSideBox();
                },
                renderSideBox: function() {
                  var c, i, it, len, ref1, results;
                  c = $(".travelers", this.form.syncBox).empty();
                  ref1 = this.form.model.get('otherTraveler');
                  results = [];
                  for (i = 0, len = ref1.length; i < len; i++) {
                    it = ref1[i];
                    results.push(c.append("<div class='form-control-static'>" + it.title + " " + it.firstName + " " + it.lastName + "</div>"));
                  }
                  return results;
                }
              });
            }
          }, {
            tmpl: 'deposit',
            num: 3,
            context: function() {
              return {
                tabTitle: steps[2],
                num: 3,
                title: obj.title,
                data: {}
              };
            },
            callback: function() {
              return this.$('.payNow').click((function(_this) {
                return function() {
                  return cf.paypalNow(_this.model.attributes);
                };
              })(this));
            }
          }, {
            tmpl: 'confirmation',
            num: 4,
            context: function() {
              return {
                tabTitle: steps[3],
                title: obj.title,
                num: 4
              };
            }
          }
        ]
      });
    }
  });

}).call(this);

//# sourceMappingURL=bookTour.js.map
