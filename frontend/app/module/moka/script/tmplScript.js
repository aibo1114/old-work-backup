// Generated by CoffeeScript 1.12.7
(function() {
  module.exports = {
    _init: function(ctx, req, rsp) {
      ctx._cd = {
        course: {
          func: 'head',
          text: 'brief'
        },
        post: {
          func: 'head',
          text: 'brief'
        },
        shop: {
          func: 'slide',
          text: 'address'
        },
        consultant: {
          func: 'head',
          text: 'description'
        },
        product: {
          func: 'slide',
          text: 'description'
        }
      };
      return {
        pageSetting: function(cb) {
          return dao.find(ctx.c.code, 'lang', {}, {}, function(res) {
            var i, it, j, len;
            for (i = j = 0, len = res.length; j < len; i = ++j) {
              it = res[i];
              ctx[it.key] = it.val;
            }
            return cb(null, res);
          });
        },
        cat: function(cb) {
          var filter, opt;
          filter = {
            UItab: true
          };
          opt = {
            limit: 5,
            sort: {
              row: 1
            }
          };
          return dao.find(ctx.c.code, 'cat', filter, opt, function(res) {
            return cb(null, res);
          });
        },
        findRes: function(cb, ct) {
          var filter, opt;
          opt = {
            limit: 10
          };
          filter = {
            cat: ct
          };
          return dao.find(ctx.c.code, 'post', filter, opt, function(res) {
            return cb(null, res);
          });
        },
        findSideRes: function(cb, tbl) {
          var opt;
          if (tbl == null) {
            tbl = 'tbl';
          }
          opt = {
            limit: 3,
            sort: {
              row: 1
            }
          };
          return dao.find(ctx.c.code, tbl, {}, opt, function(res) {
            return cb(null, res);
          });
        },
        findHeadRes: function(cb, channel, single, lmt) {
          var filter;
          if (single == null) {
            single = false;
          }
          if (lmt == null) {
            lmt = 3;
          }
          filter = {
            channel: channel
          };
          return dao.find(ctx.c.code, 'head', filter, {}, function(res) {
            var i, ret;
            if (res && res[0]) {
              res = res[0].headItem;
              ret = [];
              if (single) {
                ret = res[0];
              } else if (!single && res && res.length) {
                i = 0;
                while (i < lmt) {
                  ret.push(res[i]);
                  i++;
                }
              }
            }
            return cb(null, ret);
          });
        },
        findSimilar: function(cb, tbl) {
          var filter, opt;
          if (tbl == null) {
            tbl = 'tbl';
          }
          filter = {
            cat: ctx.cat
          };
          opt = {
            limit: 5
          };
          return dao.find(ctx.c.code, tbl, filter, opt, function(res) {
            return cb(null, res);
          });
        }
      };
    },
    index: function(ctx) {
      return {
        head: function(cb) {
          return dao.get(ctx.c.code, 'head', {
            channel: 'index'
          }, function(res) {
            return cb(null, res);
          });
        },
        course: function(cb) {
          var opt;
          opt = {
            limit: 10
          };
          return dao.find(ctx.c.code, 'course', {}, opt, function(res) {
            return cb(null, res);
          });
        },
        redeem: function(cb) {
          return this.findRes(cb, 'redeem');
        },
        reaching: function(cb) {
          return this.findRes(cb, 'reaching');
        },
        skill: function(cb) {
          return this.findRes(cb, 'skill');
        },
        movie: function(cb) {
          return this.findRes(cb, 'movie');
        },
        courseSide: function(cb) {
          return this.findSideRes(cb, 'course');
        },
        fPost: function(cb) {
          return this.findSideRes(cb, 'forumPost');
        },
        topic: function(cb) {
          return this.findHeadRes(cb, 'topic');
        },
        pubCourse: function(cb) {
          return this.findHeadRes(cb, 'pubCourse', true);
        },
        vipCourse: function(cb) {
          return this.findHeadRes(cb, 'vipCourse', true);
        }
      };
    },
    post: function(ctx) {
      return {
        similar: function(cb) {
          return this.findSimilar(cb, 'post');
        }
      };
    },
    course: function(ctx) {
      return {
        similar: function(cb) {
          return this.findSimilar(cb, 'course');
        }
      };
    },
    entityList: function(ctx, req) {
      var cat, entityPageOpt, et, filter;
      entityPageOpt = function(ctx, req, et) {
        var opt;
        opt = {
          skip: +req.query.skip || 0,
          limit: +req.query.limit || 10,
          sort: {
            lastUpdated: -1
          }
        };
        ctx._skip = opt.skip;
        ctx._limit = opt.limit;
        ctx._e = et;
        return opt;
      };
      et = req.query.entity.toString();
      filter = {
        status: 2
      };
      if (req.query.cat) {
        cat = req.query.cat.toString();
        filter.cat = {
          $regex: ".*" + cat + ".*"
        };
      }
      return {
        items: function(cb) {
          var opt;
          opt = entityPageOpt(ctx, req, et);
          return dao.find(ctx.c.code, et, filter, opt, function(res) {
            return dao.count(ctx.c.code, et, filter, function(count) {
              ctx._max = count;
              return cb(null, res);
            });
          });
        },
        pCats: function(cb) {
          return dao.find(ctx.c.code, 'cat', {
            type: 'post'
          }, {}, function(res) {
            if (ctx.cat) {
              cat = _.where(res, {
                code: ctx.cat.code
              });
              if (cat.length) {
                ctx.cat = cat[0];
              }
            }
            return cb(null, res);
          });
        },
        cCats: function(cb) {
          return dao.find(ctx.c.code, 'cat', {
            type: 'course'
          }, {}, function(res) {
            if (ctx.cat) {
              cat = _.where(res, {
                code: ctx.cat.code
              });
              if (cat.length) {
                ctx.cat = cat[0];
              }
            }
            return cb(null, res);
          });
        },
        recommendVideo: function(cb) {
          return this.findHeadRes(cb, 'recommendVideo', false, 5);
        }
      };
    },
    forum: function(ctx, req) {
      var cat, opt;
      cat = req.query.cat;
      opt = {
        limit: 8
      };
      return {
        areas: function(cb) {
          return dao.find(ctx.c.code, 'forumType', {}, opt, function(res) {
            return cb(null, res);
          });
        }
      };
    }
  };

}).call(this);

//# sourceMappingURL=tmplScript.js.map
