// Generated by CoffeeScript 1.12.7
(function() {
  var lg;

  require('../../../../lib/init');

  lg = require('../../../../lib/widget/login');

  module.exports = require("../../../../lib/userRouter").extend({
    initLayout: require('../../../../lib/func/initLayout'),
    logoutPath: util.navUrl('login'),
    tmpl: 'console',
    _mod_ctn: '#main',
    dfPath: 'home',
    routes: {
      '': 'index',
      '!/login': 'login',
      '!/loading': 'loading',
      '!/*path': 'dAct'
    },
    layout: function() {
      return $(this.parent).append(cf.rtp(this.tmpl, this.context()));
    },
    home: function() {
      this.initLayout('home', '3-9');
      $(this._mod_ctn).append('<div class="row"/>');
      return typeof cf._addStat === "function" ? cf._addStat() : void 0;
    },
    context: function() {
      return {
        name: (ii('siteName') || cf.community.name) + ' ' + ii('console')
      };
    },
    bdPush: function() {
      return this.dm.form('air', 'common', {
        urlRoot: util.actUrl('site/bdPush'),
        title: '百度SEO推送',
        prop: [
          m._checkbox('entities', {
            label: '同步数据',
            attrs: {
              data: function() {
                var i, it, len, ref, res;
                res = {};
                ref = cf.bdst.entities;
                for (i = 0, len = ref.length; i < len; i++) {
                  it = ref[i];
                  res[it] = ii(it);
                }
                return res;
              }
            }
          }), m._radio('type', {
            label: '模式',
            attrs: {
              data: {
                1: '最新的',
                2: '全部'
              }
            }
          })
        ]
      });
    },
    cleanCache: function() {
      return $.post(util.actUrl('cleanCache'));
    },
    account: function() {
      return lg.changePsdForm('air');
    },
    login: function(p) {
      if (p == null) {
        p = this.ctn;
      }
      return lg.loginForm(p, {
        cleanAll: true,
        asterisk: false,
        className: 'break'
      });
    },
    setting: function() {
      return cf.dm.l('form', 'air', {
        title: ii('setting'),
        prop: [
          m._select('lang', {
            attrs: {
              data: {
                zh: '中文',
                en: 'En'
              }
            },
            events: {
              change: function(e) {
                var v;
                v = util.ct(e).val();
                if (v === '0') {
                  return util.deleteCookie('lang');
                } else {
                  return util.setCookie('lang', v);
                }
              }
            }
          }), m._select('xeditor', {
            attrs: {
              data: {
                md: 'markdown',
                smn: 'summernote'
              }
            },
            events: {
              change: function(e) {
                var v;
                v = util.ct(e).val();
                if (v === '0') {
                  return util.deleteCookie('_xe');
                } else {
                  return util.setCookie('_xe', v);
                }
              }
            }
          })
        ],
        _save: function() {
          return this.closeDlg();
        }
      });
    }
  });

  require('../../../../lib/func/userRouterCheck');

}).call(this);

//# sourceMappingURL=consoleRouter.js.map
