// Generated by CoffeeScript 1.12.7
(function() {
  var tbm;

  tbm = ['up', 'down', 'popEdit', 'formDel'];

  m.nav = {
    prop: [
      {
        code: '_fBtn',
        noLabel: true,
        noEdit: true,
        type: 'btn',
        w: '40px',
        attrs: {
          cls: 'noHeadTitle text-center btn btn-sm',
          icon: 'plus'
        }
      }, {
        code: 'ref',
        type: 'hoder',
        xtype: 'ref',
        noName: true,
        attrs: {
          selectBoxOpt: {
            groupBtn: [
              {
                icon: 'trash'
              }
            ],
            setAttrs: null,
            afterPick: function(d) {
              this.form.setVal("input[name='href']", util.pageUrl(d));
              this.form.setVal("input[name='label']", d.title);
              return this.form.setVal("input[name='title']", d.subTitle);
            }
          }
        }
      }, _ep('label'), meta._text('href'), meta._text('tip'), meta._text('act'), meta._text('icon'), meta._text('cls')
    ],
    listOpt: {
      itemBtns: tbm
    },
    navOpt: {
      events: {
        'click .noHeadTitle': cf.view.showInTd
      },
      itemBtns: tbm,
      toFetch: false,
      _dv: [],
      entity: 'nav',
      afterShow: function(e, p) {
        var c, idx;
        c = this;
        idx = util.ct(e).parents('tr').index();
        return new cf.view.jsonTable({
          head: true,
          title: '子菜单',
          entity: 'nav',
          toFetch: false,
          itemBtns: tbm,
          parent: p,
          _prop: 'children',
          _setObj: function(ob) {
            var it;
            it = c.form.model.get(c.name)[idx];
            return it.children = ob;
          },
          _getProp: function() {
            return c.form.model.get(c.name)[idx].children;
          }
        });
      }
    }
  };

  m.community = {
    prop: [
      m._text('code', {
        noChange: true
      }), meta._text('pCode'), _ep('name'), m._text('url'), _ep('exDomain', {
        xtype: 'listEditor'
      }), meta._text('resPath'), meta._text('record'), m._number('bizPhone', {
        label: '公司电话'
      }), meta._text('email'), meta._text('mailHost'), meta._text('mailPsd'), _ep('content:content', {
        code: 'description'
      }), m._itemTable('nav', {
        entity: 'nav',
        attrs: m.nav.navOpt
      }), m._itemTable('foot', {
        entity: 'nav',
        attrs: $.extend({
          title: '底部导航'
        }, m.nav.navOpt)
      }), m._text('weibo', {
        label: '微博'
      }), m._text('qq'), m._pic('logo'), m._pic('qrcode')
    ],
    listOpt: {
      itemBtns: ['mgm', 'ipEdit', 'genSite', 'genCache', 'del']
    },
    btn: {
      mgm: function(it) {
        return util.iBtn('scale', 'mgm', "http://" + (it.url + (cf.mode ? ':3000' : '')) + "/console?_code=" + it.code);
      },
      genSite: function() {
        return util.iBtn("plane", "genSite");
      },
      genCache: function() {
        return util.iBtn("retweet", "genCache");
      }
    },
    event: {
      genSite: {
        type: 'click',
        fun: function(e) {
          var d;
          d = this.findData(e);
          return $.post(util.actUrl("site/gen", d.id), {
            code: d.get('code')
          });
        }
      },
      genInnerSite: {
        type: 'click',
        fun: function(e) {}
      },
      genCache: {
        type: 'click',
        fun: function(e) {}
      }
    }
  };

  if (true || cf.bdst) {
    m.community.prop.concatBy([
      m._tag('legend', null, '百度统计'), m._text('bdVerifyStr', {
        label: '验证字符串',
        ph: '添加站点时的meta验证字符串'
      }), m._text('bdPushUrl', {
        label: '推送地址',
        ph: '推送新文章的URL地址(带token)'
      }), m._text('bdStCode', {
        label: '统计字符串',
        ph: '百度统计代码中长度为32的数字串'
      })
    ]);
  }

}).call(this);

//# sourceMappingURL=community.js.map
