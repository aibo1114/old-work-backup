// Generated by CoffeeScript 1.12.7
(function() {
  cf.opt.entity.headRefEntity.push('activity');

  m.pushedItem = {
    prop: [
      m._text('account'), m._text('type'), _ep('title', {
        showText: function(v) {
          if (_.isArray(v)) {
            return v.join('<br/>');
          }
        }
      })
    ],
    btn: {
      send: function(it, e) {
        return util.iBtn("plane", '发送推送');
      },
      test: function(it, e) {
        return util.iBtn("user", '发送测试推送');
      },
      remove: function(it, e) {
        return util.iBtn("remove", '删除本项');
      }
    },
    event: {
      test: {
        type: 'click',
        fun: function(e) {
          var d;
          d = this.findData(e).attributes;
          return app.dm.add('air', 'syncEntity', {
            title: '微信测试推送',
            data: function() {
              return {
                account: d.account,
                mediaId: d.mediaId
              };
            },
            prop: [
              {
                code: 'testUser',
                xtype: 'multiSelect',
                type: 'text',
                label: '测试用户',
                bind: true,
                attrs: {
                  val: [],
                  searchItem: 'username',
                  showImg: 'portrait',
                  setAttrs: function() {
                    return "_id,username,w_" + d.account;
                  },
                  panelOpt: {
                    entity: 'user',
                    noStr: 'Search User by username or Email'
                  }
                }
              }
            ],
            urlRoot: util.actUrl('wt/sendTest'),
            saveSuccess: function() {
              return popMsg('测试推送发送成功');
            }
          });
        }
      },
      send: {
        type: 'click',
        fun: function(e) {
          return alert('请前往微信控制台进行推送');
        }
      },
      remove: {
        type: 'click',
        fun: function(e) {
          var d, r;
          if (!confirm(iim('确定要删除微信远程资源吗？'))) {
            return;
          }
          d = this.findData(e).attributes;
          r = d.resId;
          r.push(d.mediaId);
          return $.post(util.actUrl('wt/removeRes'), {
            res: r.join('::'),
            account: d.account
          }, function(r) {
            return popMsg('成功删除远程同步信息');
          });
        }
      }
    }
  };

  m.sendOpt = {
    prop: [
      _ep('title'), _ep('brief'), m._tag('hr'), m._text('entity'), m._text('tmpl'), m._tag('hr'), _ep('content:content'), m._text('thumb_media_id', {
        label: '封面图片'
      }), m._text('content_source_url', {
        label: '原文链接'
      }), m._radio('show_cover_pic', {
        label: '显示封面图'
      }), m._radio('showWeekday', {
        label: '是否显示周几'
      })
    ],
    listOpt: {
      itemBtns: ['inlineEdit', 'formDel']
    }
  };

  meta.syncEntity = {
    prop: [
      m._itemTable('pushedItem', {
        attrs: {
          itemBtns: ['test', 'send', 'remove', 'formDel'],
          btns: null,
          foot: false
        }
      }), m._tag('hr'), _ep('title', {
        ph: '推送日期,关键字等'
      }), {
        code: 'ref',
        xtype: 'ref',
        type: 'holder',
        noName: true,
        attrs: {
          selectBoxOpt: {
            setAttrs: 'title,brief,subTitle,author,master,refFile,startedDate,_e',
            afterPick: function(d) {
              var dd, item, opt;
              opt = {
                show_cover_pic: 1,
                title: d.title + ' ' + (d.subTitle || ''),
                entity: d._e,
                tmpl: d._e
              };
              opt.thumb_media_id = d.refFile && d.refFile.head && d.refFile.head[0] ? d.refFile.head[0].split('?')[0] : 'default.jpg';
              if (d._e === 'activity') {
                if (d.startedDate) {
                  dd = util.parseLocalDate(d.startedDate);
                  dd.setHours(dd.getHours() + 8);
                  d.title = "【" + (iCat('w')[dd.getDay()]) + "】" + opt.title;
                  d.content_source_url = d._id;
                }
              }
              item = $.extend(opt, d);
              this.form.model.get('sendOpt').push(item);
              $('#sendOpt').children().data('_item').collection.add(item);
              return this.unsetVal();
            }
          }
        }
      }, m._itemTable('sendOpt', {
        id: 'sendOpt',
        attrs: {
          itemBtns: ['inlineEdit', 'formDel'],
          btns: ['inlineAdd'],
          foot: false
        }
      }), m._select('account', {
        id: 'pAcc',
        noName: true,
        attrs: {
          entity: 'pubAccount',
          _attrs: 'code,title,appId',
          keyVal: 'code,title'
        },
        events: {
          change: function(e) {
            var items, t;
            t = util.ct(e);
            items = this.model.get('sendOpt');
            if (!items.length) {
              alert('请先选择同步列表');
              t.val('0');
              return;
            }
            if (t !== '0') {
              return t.data('ret', t.data('sdata').findBy('code', t.val()));
            } else {
              return t.data('ret', null);
            }
          }
        }
      })
    ],
    fmBtn: {
      sendOpt: function() {
        return {
          isShow: function(d) {
            return d._id;
          },
          label: '同步到微信',
          cls: _st.btn('success', 'lg')
        };
      }
    },
    editFormOpt: {
      btns: ['back', 'save', 'sendOpt'],
      exEvents: {
        'click .sendOpt': function(e) {
          var i, it, j, len, mod, opt, pa, ref;
          if (!this.model.get('sendOpt').length) {
            popMsg('请先选择要同步的信息', 'warning');
            return;
          }
          pa = $('#pAcc').data('ret');
          if (!pa) {
            popMsg('请先选择账号再发送', 'warning');
            return;
          }
          mod = this.model;
          opt = mod.toJSON();
          opt.account = pa.code;
          ref = opt.sendOpt;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            it = ref[i];
            if (it._e === 'activity') {
              if (it.master && it.master.length > 0) {
                it.author = _.pluck(it.master, 'username').join(',');
              } else if (it.author) {
                it.author = it.author.username;
              } else {
                it.author = user.username;
              }
              it.digest = it.brief;
              it.title = util.cutText(it.title, 64);
              it.content_source_url = "http://" + cf.community.url + "/r/wt/login?wCode=" + pa.code + "&page=/activity/" + it._id + "&appId=" + pa.appId + "&func=enroll";
            }
            opt.sendOpt[i] = _.pick(it, 'entity', '_id', 'tmpl', 'thumb_media_id', 'author', 'title', 'content_source_url', 'digest', 'show_cover_pic');
          }
          return $.postJSON(util.actUrl('wt/uploadNews'), opt, function(res) {
            var items;
            if (res.entity) {
              items = mod.get('pushedItem') || [];
              items.push(res.entity);
              mod.set('pushedItem', items);
              return mod.save({
                silent: true
              });
            }
          });
        }
      }
    }
  };

}).call(this);

//# sourceMappingURL=syncEntity.js.map
