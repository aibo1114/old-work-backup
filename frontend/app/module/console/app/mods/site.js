// Generated by CoffeeScript 1.12.7
(function() {
  var ctn, dd, i, it, layout, len, navTree, ref, treeEntityForm, treeForm;

  util.lcss(cf.modPath + 'site.css');

  require('../meta/meta');

  require('../meta/script');

  require('../meta/codeMap');

  require('../meta/sms');

  require('../meta/i18n');

  require('../meta/email');

  treeForm = require('../../../../lib/widget/tree/treeForm');

  treeEntityForm = require('../../../../lib/widget/tree/treeEntityForm');

  navTree = require('../../../../lib/widget/tree/navTree');

  dd = [
    {
      key: 'nav',
      row: 20
    }, {
      key: 'meta',
      row: 25
    }, {
      key: 'tmpl',
      row: 26
    }, {
      key: 'script',
      row: 27
    }, {
      key: 'codeMap',
      row: 30
    }, {
      key: 'i18n',
      row: 40
    }, {
      key: 'cat',
      row: 45
    }, {
      key: 'sms',
      row: 50
    }, {
      key: 'email',
      row: 60
    }
  ];

  ctn = '#main';

  if (user.isRoot()) {
    dd.unshift({
      key: 'community',
      row: 10
    });
  } else if (user.isAdmin()) {
    dd.unshift({
      key: 'community',
      row: 10,
      href: util.navUrl("site/community/edit/" + cf.community._id)
    });
  }

  layout = function() {
    return app.initLayout('site', '2-10', (function(_this) {
      return function() {
        return {
          title: iim('m_mgm', 'community'),
          data: dd
        };
      };
    })(this));
  };

  ref = ['community', 'meta', 'script', 'codeMap', 'i18n', 'sms', 'email'];
  for (i = 0, len = ref.length; i < len; i++) {
    it = ref[i];
    cf.view.ipBtn('site', it, ctn, {
      layout: layout,
      func: 'tb',
      listOpt: m[it].listOpt
    });
  }

  app.enhance({
    routes: {
      '!/site/tmpl(/:p)(/:pp)': 'tmpl',
      '!/site/cat(/:p)(/:pp)': 'cat',
      '!/site/nav(/:p)(/:pp)': 'nav'
    },
    nav: function(p, pp) {
      layout();
      if (!$('#treeBox').length) {
        $(ctn).empty().append(util.layout({
          treeBox: 'col-md-4',
          formBox: 'col-md-8'
        }, true));
        return new navTree({
          el: '#treeBox',
          parent: null,
          title: '导航管理',
          opt: {
            tree: '#treeBox',
            form: '#formBox'
          }
        });
      }
    },
    tmpl: function() {
      var act;
      layout();
      act = 'tmpl';
      return $.get(util.restUrl('c/mg/file/list'), {
        mod: true,
        path: '',
        ext: 'jade'
      }, function(res) {
        return new treeForm({
          className: 'col-md-3 pl0',
          data: res.entities,
          style: 'panel-primary',
          title: '模板文件',
          handleData: function() {
            var d, j, len1, ref1;
            d = {
              label: '模板文件',
              children: []
            };
            ref1 = this.data;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              it = ref1[j];
              d.children.push({
                id: util.randomChar(4),
                label: it
              });
            }
            return this.data = d;
          }
        });
      });
    },
    cat: function() {
      var act;
      layout();
      act = 'cat';
      return $.get(util.restUrl('cat') + '?max=100', (function(_this) {
        return function(r) {
          var j, k, len1, rd, ref1, res, v;
          res = {};
          ref1 = r.entities;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            it = ref1[j];
            k = it.type || 'global';
            (res[k] != null ? res[k] : res[k] = []).push(it);
          }
          rd = [];
          for (k in res) {
            v = res[k];
            rd.push({
              _id: '_' + k,
              title: ii(k),
              children: v
            });
          }
          return new treeEntityForm({
            parent: ctn,
            entity: act,
            key: '_id',
            showName: 'title',
            style: 'panel-primary',
            title: iim('m_mgm', act),
            cleanAll: true,
            data: {
              children: rd
            },
            initData: function(t, pid) {
              return {
                type: pid.substr(1)
              };
            },
            callback: function() {
              return this.$('.root').children().last().remove();
            }
          });
        };
      })(this));
    }
  });

}).call(this);

//# sourceMappingURL=site.js.map
