// Generated by CoffeeScript 1.12.7
(function() {
  var _role, _user, i, it, layout, len, ref,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('../meta/user');

  require('../../../../lib/meta/role');

  require('../../../../lib/meta/org');

  require('../../../../lib/meta/roleMap');

  require('../../../../lib/meta/membership');

  _role = {
    code: 'role',
    noName: true,
    xtype: 'selectBox',
    bind: true,
    attrs: {
      groupBtn: null,
      clickShow: true,
      setAttrs: 'title,label',
      setVal: function() {
        this.form.model.set('roleLabel', this.data.label);
        this.form.model.set('rid', this.data._id);
        this.form.model.set('role', this.data.title);
        return this.target.val(this.data.label);
      },
      checkPick: function(d) {
        var ref;
        if (ref = d.title, indexOf.call(this.form.rCollection.pluck('role'), ref) >= 0) {
          popMsg('角色重复', 'warning');
          return false;
        } else {
          return true;
        }
      },
      panelOpt: {
        entity: 'role'
      }
    }
  };

  _user = {
    code: 'user',
    noName: true,
    xtype: 'selectBox',
    bind: true,
    attrs: {
      groupBtn: null,
      setAttrs: 'username',
      searchItem: 'username',
      setVal: function() {
        this.form.model.set('username', this.data.username);
        this.form.model.set('uid', this.data._id);
        return this.target.val(this.data.username);
      },
      panelOpt: {
        entity: 'user'
      }
    }
  };

  m.roleMap.listOpt = {
    style: 'panel-info',
    btns: ['ipAdd'],
    itemBtns: ['ipEdit', 'del']
  };

  m.role.listOpt = {
    style: 'panel-info',
    itemBtns: ['users', 'ipEdit', 'del'],
    comparator: 'type',
    afterShow: function(e, p) {
      var rid, role;
      role = this.findData(e);
      rid = role.id;
      return app.dm.tb(p, 'membership', {
        btns: ['popAdd'],
        itemBtns: ['popEdit', 'del'],
        style: 'panel-success',
        cols: [m._text('username'), _ep('description'), m._btn()],
        formOpt: {
          prop: [_user, _ep('description')]
        },
        formAddOpt: {
          data: function() {
            return {
              rid: rid,
              role: role.get('title'),
              roleLabel: role.get('label')
            };
          }
        },
        criteriaOpt: function() {
          return {
            q: {
              rid: rid
            }
          };
        }
      });
    }
  };

  m.org.listOpt = {
    style: 'panel-info',
    itemBtns: ['showInTd', "ipEdit", "del"],
    afterShow: function(e, p) {
      var oid, org;
      org = this.findData(e);
      oid = m.id;
      return app.dm.tb(p, 'orgRelation', {
        style: 'panel-success',
        btns: ['popAdd'],
        itemBtns: ['popEdit', 'del'],
        cols: [_ep('username'), _ep('row'), _ep('description'), m._btn()],
        criteriaOpt: function() {
          return {
            q: {
              oid: oid
            }
          };
        },
        formAddOpt: {
          data: function() {
            return {
              oid: oid,
              org: org.get('title')
            };
          }
        }
      });
    }
  };

  m.user.listOpt = {
    style: 'panel-info',
    itemBtns: ['roles', 'msg', 'ipEdit', 'del'],
    afterShow: function(e, p) {
      var uid, user;
      user = this.findData(e);
      uid = user.id;
      return app.dm.tb(p, 'membership', {
        title: '角色',
        btns: ['popAdd'],
        itemBtns: ['popEdit', 'del'],
        style: 'panel-success',
        cols: [
          m._text('role'), m._text('roleLabel', {
            label: '角色名称'
          }), _ep('description')
        ],
        formOpt: {
          prop: [_role, _ep('description')]
        },
        formAddOpt: {
          data: function() {
            return {
              uid: uid,
              username: user.get('username')
            };
          }
        },
        criteriaOpt: function() {
          return {
            q: {
              uid: uid
            }
          };
        }
      });
    }
  };

  layout = function() {
    return app.initLayout('userRole', '2-10', function() {
      return {
        title: iim('m_mgm', 'user'),
        tmpl: 'dataNavItem',
        data: [
          {
            key: 'user',
            row: 10
          }, {
            key: 'role',
            row: 20
          }, {
            key: 'org',
            row: 30
          }, {
            key: 'roleMap',
            row: 50
          }
        ]
      };
    });
  };

  ref = ['user', 'role', 'org', 'roleMap'];
  for (i = 0, len = ref.length; i < len; i++) {
    it = ref[i];
    cf.view.ipBtn('userRole', it, '#main', {
      layout: layout,
      func: 'tb',
      listOpt: m[it].listOpt
    });
  }

}).call(this);

//# sourceMappingURL=userRole.js.map
