// Generated by CoffeeScript 1.12.7
(function() {
  var ctn, handleMenuData, initItem, it, j, layout, len, ref, treeForm, wt;

  treeForm = require('../../../../lib/widget/tree/treeForm');

  wt = require('../../../../lib/func/wechat');

  require('../meta/pubAccount');

  require('../meta/agentOp');

  require('../meta/syncEntity');

  ctn = '#main';

  meta.wechatMenu = {
    prop: [
      m._select('mType', {
        label: '类型',
        noChange: true,
        attrs: {
          data: {
            'folder-close': '目录',
            file: '文件'
          }
        },
        events: {
          change: function(e) {
            var v;
            v = util.ct(e).val();
            this.rmInput('type');
            this.rmInput('key');
            this.rmInput('url');
            if (v === 'file') {
              this.renderSpeProp(this.prop.codeBy('type'));
              $("select[name='type']").trigger('change');
              return this.model.unset(this.p.subName);
            } else {
              if (!this.model.get(this.p.subName)) {
                return this.model.set(this.p.subName, []);
              }
            }
          }
        }
      }), m._text('name'), m._select('type', {
        attrs: {
          data: ['click', 'view', 'scancode_push', 'scancode_waitmsg', 'pic_sysphoto', 'pic_photo_or_album', 'pic_weixin', 'location_select']
        },
        events: {
          change: function(e) {
            var it, k, m, v;
            m = {
              click: 'key',
              view: 'url'
            };
            for (k in m) {
              v = m[k];
              this.rmInput(v);
            }
            it = m[util.ct(e).val()];
            if (it) {
              return this.renderSpeProp(this.prop.codeBy(it));
            }
          }
        }
      }), m._text('key', {
        valid: {
          required: true
        }
      }), m._text('url', {
        valid: {
          required: true
        }
      })
    ]
  };

  initItem = function(i) {
    if (i == null) {
      i = '';
    }
    return {
      id: util.randomChar(4),
      mType: 'file',
      name: '菜单' + i,
      type: 'click',
      key: 'key'
    };
  };

  handleMenuData = function(data) {
    var it, j, len, ref, results;
    if (data.menu && data.menu.button) {
      return data.menu.button;
    } else {
      ref = [1, 2, 3];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        it = ref[j];
        results.push(initItem(it));
      }
      return results;
    }
  };

  layout = function() {
    return app.initLayout('wechat', '2-10', function() {
      $(ctn).before(cf.rtp('wtInfo'));
      return {
        title: iim('m_mgm', 'wechat'),
        tmpl: 'dataNavItem',
        data: [
          {
            key: 'pubAccount',
            row: 10
          }, {
            key: 'agentOp',
            row: 20
          }, {
            key: 'syncEntity',
            row: 40
          }
        ]
      };
    });
  };

  ref = ['pubAccount', 'agentOp', 'syncEntity'];
  for (j = 0, len = ref.length; j < len; j++) {
    it = ref[j];
    cf.view.ipBtn('wechat', it, ctn, {
      layout: layout,
      func: 'tb',
      listOpt: m[it].listOpt
    });
  }

  app.enhance({
    routes: {
      '!/wechat/pubAccount/:id/menu': 'menu'
    },
    menu: function(id) {
      layout();
      $(this._mod_ctn).html(util.layout({
        side: 'col-sm-3',
        form: 'col-sm-9'
      }));
      return $.get(util.restUrl("pubAccount/" + id), function(res) {
        var et;
        if (et = res.entity) {
          return new treeForm({
            entity: 'wechatMenu',
            parent: app._mod_ctn,
            pubData: et,
            modeContext: function() {
              return {
                style: 'panel-primary',
                head: true,
                title: iim('m_menu', 'wechat'),
                foot: true
              };
            },
            data: {
              sub_button: handleMenuData(et)
            },
            className: 'col-md-4',
            btns: [],
            rName: 'menu',
            showName: 'name',
            subName: 'sub_button',
            toFetch: false,
            formOpt: {
              callback: function() {
                return this.$('select').trigger('change');
              }
            },
            exEvents: {
              'click .saveRes': function() {
                this.data = this.model.toJSON();
                this.pubData.menu = {
                  button: this.data[this.subName]
                };
                return new cf.model.entity(this.pubData, {
                  entity: 'pubAccount'
                }).save();
              },
              'click .sync': function() {
                var pd, pub;
                pub = this.pubData;
                if (!confirm(iim('m_sure', iim('m_upload', 'menu')))) {
                  return;
                }
                pd = this.data[this.subName].slice();
                pd.recSet(this.subName, (function(_this) {
                  return function(it) {
                    var func, page, ps, ref1, scope, state;
                    util.del('id', it);
                    util.del('mType', it);
                    if (it.url && it.url.indexOf('http') === -1) {
                      ref1 = it.url.split(':'), func = ref1[0], page = ref1[1], state = ref1[2], scope = ref1[3];
                      ps = ["wCode=" + pub.code, "appId=" + pub.appId];
                      func && ps.push("func=" + func);
                      page && ps.push("page=" + page);
                      state && ps.push("state=" + state);
                      scope && ps.push("scope=" + scope);
                      return it.url = "http://" + cf.community.url + "/a/wt/login?" + (ps.join('&'));
                    }
                  };
                })(this));
                return wt.callApi('createMenu', {
                  menu: {
                    button: pd
                  },
                  pubCode: this.pubData.code,
                  code: cf.code
                });
              },
              'click .back': function() {
                return history.go(-1);
              }
            },
            callback: function() {
              this.foot.append(tu.btn('保存', 'saveRes', 'primary'));
              this.foot.append(tu.btn('返回', 'back', null));
              return this.foot.append(tu.btn('同步微信', 'sync', 'primary'));
            }
          });
        }
      });
    }
  });

}).call(this);

//# sourceMappingURL=wechat.js.map
