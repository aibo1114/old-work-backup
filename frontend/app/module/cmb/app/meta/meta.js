// Generated by CoffeeScript 1.12.7
(function() {
  var _epType, _fbtp, md5, reType, tree;

  md5 = require('../../../../res/js/md5');

  tree = require('../../../../lib/widget/tree/tree');

  require('../../../../lib/terminal/tf/dTime');

  _epType = {
    '0': '员工',
    '1': '临时卡',
    '2': '保安',
    '3': '保洁'
  };

  $.extend(m.common, {
    psd: _ep('password', {
      valid: {
        required: true,
        minlength: 3,
        maxlength: 25
      },
      cvt: function(v) {
        return md5(v);
      }
    }),
    sex: m._select('sex', {
      attrs: {
        data: {
          0: '男',
          1: '女'
        }
      },
      showText: function(v) {
        if (v) {
          return '女';
        } else {
          return '男';
        }
      }
    }),
    flag: {
      type: 'select',
      data: {
        9: '奖励（虚拟）',
        12: '补助（虚拟）',
        13: '现金（真实）'
      }
    },
    description: {
      type: 'text',
      label: '备注',
      valid: {
        maxlength: 13
      }
    }
  });

  m.common.password = $.extend(m.common.password, {
    noTb: true,
    valid: {
      required: true,
      minlength: 3
    },
    cvt: function(v) {
      return md5(v);
    }
  });

  $.extend(m.user, {
    loginUrl: util.actUrl('login'),
    loginProp: [_ep('username'), _ep('password'), _ep('code')],
    prop: [
      _ep('email'), m._select('role', {
        title: '请选择角色',
        attrs: {
          entity: 'role',
          keyVal: 'id,name'
        },
        showText: function(v, d) {
          return d.role_name;
        },
        events: {
          change: function(e) {
            var t;
            t = util.ct(e);
            this.model.set('role_id', t.val());
            this.model.set('role_name', t.find('option:selected').text());
            return this.model.unset('role');
          }
        }
      }), _ep('password'), _ep('googlefa'), _ep('status', {
        attrs: {
          data: {
            0: '无效',
            1: '有效'
          }
        },
        showText: function(v) {
          return ii("user_status_" + v);
        }
      })
    ],
    listOpt: {
      colNum: 5
    }
  });

  m.employee = {
    prop: [
      m._radio('type', {
        val: '0',
        attrs: {
          data: _epType,
          inline: true
        },
        showText: function(v) {
          return _epType[v];
        },
        events: {
          change: function(e) {
            var me, v;
            v = util.ct(e).val();
            me = this.meta.prop;
            if (v === '0') {
              me.codeBy('person_no').valid = {
                required: true
              };
              return me.codeBy('email').valid = {
                required: true,
                email: true
              };
            } else {
              me.codeBy('person_no').valid = {};
              me.codeBy('email').valid = {};
              this.model.validateItem('email');
              return this.model.validateItem('person_no');
            }
          }
        }
      }), m._text('person_no'), m._text('email', {
        valid: {}
      }), m._text('person_name', {
        valid: {
          required: true
        }
      }), _ep('sex'), m._text('card_id', {
        valid: {
          required: true
        }
      })
    ],
    listOpt: {
      itemBtns: []
    },
    addFormOpt: {
      urlRoot: '/1/api/employee/add',
      _saveSuccess: function(model, res) {
        if (res.msg) {
          popMsg(res.msg, 'success');
        }
        return history.go(-1);
      }
    }
  };

  m.batchBonus = {
    prop: [
      m._textarea('ehrs'), m._select('flag', {
        attrs: {
          data: {
            9: '奖励（虚拟）',
            12: '补助（虚拟）',
            13: '现金（真实）'
          }
        }
      }), m._money('money'), _ep('description')
    ],
    listOpt: {
      toFetch: false
    },
    addFormOpt: {
      urlRoot: '/1/api/employee/batch_bonus',
      _saveSuccess: function(model, res) {
        if (res.msg) {
          popMsg(res.msg, 'success');
        }
        return history.go(-1);
      }
    }
  };

  m.role = {
    prop: [
      m._text('name'), m._textarea('desc'), {
        code: 'selected_menus',
        xtype: tree,
        attrs: {
          entity: 'menu',
          head: false,
          toFetch: true,
          showName: 'name',
          parentKey: 'parent_id',
          fixed: true,
          select: true,
          expend: true,
          callback: function() {
            var i, it, len, ref, results;
            if (this.val) {
              ref = this.val;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                it = ref[i];
                results.push(this.$(".ckb[sid='" + it + "']").prop('checked', true));
              }
              return results;
            }
          },
          ckbChildVal: function(t) {
            var v;
            v = t.attr('sid');
            if (this.val == null) {
              this.val = [];
            }
            if (t.is(':checked')) {
              this.val.addUniq(v);
            } else {
              this.val.remove(v);
            }
            return this.form.model.set(this.name, this.val);
          },
          ckbParentVal: function(t, all) {
            var act, i, it, len;
            act = t.is(':checked') ? 'addUniq' : 'remove';
            if (this.val == null) {
              this.val = [];
            }
            for (i = 0, len = all.length; i < len; i++) {
              it = all[i];
              this.val[act]($(it).attr('sid'));
            }
            return this.form.model.set(this.name, this.val);
          }
        }
      }
    ]
  };

  m.flow = {
    url: util.restUrl('employee/flow'),
    prop: [
      m._text('transaction_id'), m._text('money_type', {
        showText: function(v) {
          return ii("money_type_" + v);
        }
      }), m._text('money', {
        showText: function(v, d) {
          return (d.money / 100) + "元";
        }
      }), m._text('money_memo'), m._text('time')
    ]
  };

  m.menu = {
    prop: [
      m._text('name'), m._text('href'), m._select('type', {
        noChange: true,
        attrs: {
          data: {
            file: '文件',
            'folder-close': '文件夹'
          }
        },
        events: {
          change: function(e) {
            var v;
            v = util.ct(e).val();
            this.model.unset('type');
            if (v === 'folder-close') {
              if (!this.model.get(this.p.subName)) {
                return this.model.set(this.p.subName, []);
              }
            } else {
              return this.model.unset(this.p.subName);
            }
          }
        }
      }), m._number('sort'), m._radio('show', {
        attrs: {
          data: {
            1: '显示',
            0: '隐藏'
          }
        }
      })
    ]
  };

  m.cafe = {
    label: '咖啡',
    prop: [
      m._text('cname', {
        label: '中文名'
      }), m._text('ename', {
        label: '英文名'
      }), m._text('price', {
        label: '价格'
      }), m._text('bprice', {
        label: '大杯',
        val: 0
      }), m._text('thumb', {
        label: '图片地址'
      })
    ],
    listOpt: {
      itemBtns: ['del'],
      max: 100
    }
  };

  reType = {
    0: '午餐',
    1: '晚餐'
  };

  m.restaurant = {
    label: '餐厅菜品',
    prop: [
      m._radio('dtype', {
        label: '种类',
        showText: function(v) {
          return reType[+v];
        },
        attrs: {
          data: reType
        }
      }), m._text('dishname', {
        label: '菜品名称'
      }), _ep('servicetime', {
        xtype: 'dTime',
        label: '供应时间',
        readonly: true,
        showText: function(v) {
          return v != null ? v.dStr() : void 0;
        },
        attrs: {
          minView: 2,
          fmt: 'yyyy-mm-dd',
          startDate: new Date()
        }
      })
    ],
    tbBtn: ['popEdit'],
    editFormOpt: function() {
      return {
        prop: [_ep('restaurant:dishname')],
        cols: 'col-xs-3:col-xs-9',
        _saveSuccess: function(model) {
          model.trigger('change');
          return model.view.closeDlg();
        }
      };
    },
    listOpt: {
      criteriaOpt: function() {
        return {
          servicetime: new Date().pattern('yyyyMMdd')
        };
      }
    }
  };

  _fbtp = {
    0: '猎豹大楼',
    1: '猎豹餐厅',
    2: 'CM Cafe'
  };

  m.feedback = {
    label: '反馈',
    prop: [
      m._text('uid'), m._text('ctime', {
        label: '创建时间',
        type: 'date'
      }), m._radio('tp', {
        label: '分类',
        showText: function(v) {
          return _fbtp[+v];
        },
        attrs: {
          data: _fbtp
        }
      }), m._textarea('content', {
        showText: function(v, b, c, m) {
          if (m.mode === 'modal') {
            return v;
          } else {
            return util.adjustText(v, 45);
          }
        }
      })
    ],
    listOpt: {
      itemBtns: ['popView'],
      btns: []
    },
    viewOpt: {
      toFetch: false
    }
  };

}).call(this);

//# sourceMappingURL=meta.js.map
