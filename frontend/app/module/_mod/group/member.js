// Generated by CoffeeScript 1.12.7
(function() {
  require('./taskList');

  require('./userReport');

  app.enhance({
    routes: {
      '!/group/:id/member': 'member',
      '!/group/:id/member/:mid': 'memberInfo',
      '!/group/:id/rank': 'rank'
    },
    rank: function(id) {
      var i, it, len, m, ref;
      m = [];
      ref = cf._marks.slice(1);
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        m.push({
          title: it.title,
          key: it.key
        });
      }
      return this.dm.collection(ctn, 'groupMember', {
        backBtn: false,
        inCtx: 'groupMember',
        tab: 'work',
        title: ii('rank'),
        callback: function() {
          return util.loadPic(app.ctn);
        },
        comparator: function(m) {
          return -m.get('curScore');
        },
        events: {
          'click img': cf._showUserInfo,
          'click label[key]': function(e) {
            var cs, j, len1, ref1;
            this.tab = util.ct(e).attr('key');
            ref1 = this.collection.models;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              it = ref1[j];
              if (it.get('stat') && (cs = it.get('stat')[0])) {
                it.set('curScore', cs[this.tab] || 0);
              }
            }
            this.collection.sort(-1);
            return this.addAll();
          }
        },
        _filter: function() {
          var s1, s2;
          s1 = "<div class='text-xs-left'>" + cf.rtp('_userAvatar') + "</div>";
          s1 += '<hr/>';
          s2 = cf.rtp('crBtn', {
            type: 'radio',
            style: 'primary-outline btn-sm',
            btns: m
          });
          return s1 + s2;
        },
        criteriaOpt: function() {
          return {
            q: {
              'group._id': id
            }
          };
        },
        modelOpt: {
          tmpl: 'rankItem',
          className: 'list-group-item p-y-h p-x-0',
          css: {
            height: '5rem'
          }
        }
      });
    },
    memberInfo: function(id, mid) {
      var bb, ctn, slideUrl;
      ctn = app.prev() ? (bb = true, slideUrl = true, 'slide') : (bb = false, app.ctn);
      return this.dm.model(ctn, 'groupMember', mid, {
        mode: 'memberInfo',
        backBtn: bb,
        slideUrl: slideUrl,
        inCtx: mid === app.memberInfo._id ? 'memberInfo' : null,
        callback: function() {
          return this.$("[key]:first").trigger('click');
        },
        events: {
          'click [key]': function(e) {
            var key, uid;
            key = util.ct(e).attr('key');
            uid = this.model.get('user')._id;
            if (this.ctns == null) {
              this.ctns = this.$('.ctns');
            }
            this.ctns.children().hide();
            if (this["__" + key]) {
              return this["__" + key].show();
            } else {
              return this["__" + key] = key === 'eval' ? cf.dm.l('userReport', this.ctns, {
                cleanAll: false,
                data: this.model.toJSON()
              }) : key === 'memberInfo' ? cf.dm.l('_tag', this.ctns, {
                className: 'list-group',
                cleanAll: false,
                data: this.model.toJSON(),
                tmpl: 'userInfo'
              }) : cf.dm.l('taskList', this.ctns, {
                cleanAll: false,
                mode: 'blank',
                head: false,
                criteriaOpt: function() {
                  return {
                    q: {
                      'group._id': id,
                      'user._id': uid,
                      cat: key
                    }
                  };
                }
              });
            }
          }
        },
        modeContext: function() {
          return $.extend({}, this.model.toJSON(), {
            backBtn: this.backBtn,
            btnType: 'radio',
            btns: [
              {
                title: ii('work'),
                key: 'eval'
              }, {
                title: ii('memo'),
                key: 'memberInfo'
              }, {
                title: ii('task'),
                key: 'task'
              }, {
                title: ii('post'),
                key: 'post'
              }
            ]
          });
        }
      });
    },
    member: function(id) {
      var bb, ctn, slideUrl;
      ctn = app.prev() ? (slideUrl = true, bb = true, 'slide') : (bb = false, app.ctn);
      return this.dm.collection(ctn, 'groupMember', {
        title: ii('members'),
        inCtx: 'groupMember',
        backBtn: bb,
        slideUrl: slideUrl,
        itemBtns: ['lockPub'],
        max: 200,
        events: {
          'click img': cf._showUserInfo
        },
        criteriaOpt: function() {
          return {
            q: {
              'group._id': id
            }
          };
        },
        modelOpt: {
          className: 'list-group-item p-x-0 p-y-h'
        },
        itemContext: function(d) {
          var er, title;
          title = d.username || d.user.username;
          if (d.stat && (er = d.stat[0].earn)) {
            title += tu.btn(er + "元", 'pull-xs-right m-t-h', 'success', 'sm');
          }
          if (d.status !== 2 && cf.isMgm()) {
            title = "【未审核】" + title;
          }
          return {
            imgPath: tu.userPic(cf.community, d.user),
            title: title,
            subNewLine: true,
            subTitle: d.statement || cf._statement,
            btn: cf.isMgm(),
            attrs: {
              style: 'height: 5rem'
            }
          };
        },
        foot: false,
        addAll: function() {
          var addAll, dd, i, it, leader, len, octn, oper;
          this.collection = this.collection.clone();
          this.data = this.collection.toJSON();
          leader = this.data.delBy('organizer', 'role', true);
          oper = this.data.delBy('oper', 'role');
          if (!oper) {
            oper = [leader];
          } else if (!_.isArray(oper)) {
            oper = [oper];
          }
          addAll = cf.view.collection.prototype.addAll;
          dd = this.data;
          octn = this.ctn;
          if (leader) {
            this.ctn.before(cf.rtp('memberTop'));
            this.ctn = this.$('.organizer');
            this.collection.reset([leader], {
              silent: true
            });
            addAll.call(this);
            this.ctn = this.$('.opers');
            for (i = 0, len = oper.length; i < len; i++) {
              it = oper[i];
              if (it.phone) {
                it.username += " <small class='pull-xs-right'>" + it.phone + "</small>";
              }
            }
            this.collection.reset(oper, {
              silent: true
            });
            addAll.call(this);
          }
          this.collection.reset(dd, {
            silent: true
          });
          this.ctn = octn;
          return addAll.call(this);
        }
      });
    }
  });

}).call(this);

//# sourceMappingURL=member.js.map
