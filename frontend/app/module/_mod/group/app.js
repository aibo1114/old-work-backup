// Generated by CoffeeScript 1.12.7
(function() {
  var _initOb, expireTime, id, threadList;

  require('../../../ext/toMd');

  expireTime = 30 * 60 * 1000;

  id = util.atHash(2);

  app.prePage = function() {
    var mod;
    mod = util.atHash(1);
    if (mod === 'login') {
      return;
    }
    if (mod === 'group') {
      if (W.wt) {
        wt.setWtJs(null, true);
      }
      return typeof cf.preCheck === "function" ? cf.preCheck() : void 0;
    }
  };

  $.extend(cf, {
    loadTmpl: function(name) {
      return require("./tmpl/" + name + ".jade");
    },
    preCheck: function() {
      if (!app.memberInfo) {
        throw "loading::" + id + "-" + user.id;
      }
      user.afterLogin();
      cf.curWeek = parseInt((+new Date().monday() - +new Date(app.myGroup.get('startedDate')).monday()) / Date.week) + 1;
      return cf.preCheck = null;
    },
    onPageSlide: function() {
      return app.btmMenu.hide();
    },
    onEndSlide: function(history, cur) {
      if (!history.length) {
        return app.btmMenu.show();
      }
    },
    _showUserInfo: function(e) {
      var m;
      W.ctn = 'slide';
      m = app.groupMember.toJSON().findBy('user._id', this.findData(e).get('user')._id);
      cf.r(_nav(app.myGroup.id, 'member', m._id));
      return W.ctn = app.ctn;
    },
    isMgm: function() {
      var ref;
      return (ref = app.memberInfo.get('role')) === 'organizer' || ref === 'role';
    }
  });

  _initOb = function(qu) {
    app.memberInfo = cf.dm.ent(qu.member, {
      entity: 'groupMember'
    });
    app.myGroup = cf.dm.ent(qu.group, {
      entity: 'group'
    });
    return app.groupMember = cf.dm.ents(qu.groupMember, {
      entity: 'groupMember'
    });
  };

  cf._handleErr.loading = function(guid) {
    var gid, q, qu, ref, uid;
    ref = guid.split('-'), gid = ref[0], uid = ref[1];
    if (qu = util.readLocal(guid)) {
      qu = JSON.parse(qu);
      if ((+new Date() - qu.time) < expireTime) {
        _initOb(qu);
        cf.rr();
        return;
      } else {
        util.cleanLocal(guid);
      }
    }
    q = {
      'group._id': gid,
      'user._id': uid
    };
    return $.get(util.restUrl('groupMember'), {
      q: q
    }, function(res) {
      var _attrs, burl, member;
      burl = _nav(gid).substr(2);
      if (res.entities.length) {
        member = res.entities[0];
        if (member.status !== 2 && !member.paid) {
          alert('抱歉,您还未支付,请先支付...');
          location.href = burl;
          return;
        }
        if (member.status === 1) {
          alert('十分抱歉, 您的审核还未通过...');
          location.href = burl;
          return;
        }
        if (member.status === 3) {
          alert('十分抱歉, 您小组使用权已被关闭...');
          location.href = burl;
          return;
        }
      } else {
        alert('抱歉,请先申请加入...');
        location.href = burl;
        return;
      }
      _attrs = 'title,subTitle,idea,cat,status,task,ref,refFile,startedDate,week,stat_cur,stats,venue,price,totalNumber';
      return $.get(util.restUrl("group/" + gid), {
        _attrs: _attrs
      }, function(res) {
        var group, time;
        if (res.entity) {
          group = res.entity;
          time = +new Date();
          return $.get(util.restUrl('groupMember'), {
            q: {
              'group._id': group._id
            },
            max: group.totalNumber || 20
          }, function(res) {
            var dd, groupMember, i, it, len1, ref1;
            groupMember = res.entities;
            cf.___dirt = [];
            ref1 = cf._groupInfo;
            for (i = 0, len1 = ref1.length; i < len1; i++) {
              it = ref1[i];
              if (dd = member.info.codeBy(it.code)) {
                if (!member[it.code]) {
                  cf.___dirt.push(it.code);
                  member[it.code] = dd.val;
                }
              }
            }
            qu = {
              group: group,
              member: member,
              groupMember: groupMember,
              time: time
            };
            _initOb(qu);
            if (cf.___dirt.length) {
              app.memberInfo.saveAttr(cf.___dirt);
              cf.___dirt = null;
            }
            util.saveLocal(guid, qu);
            return cf.rr();
          });
        } else {
          return alert('系统错误,请马上联系工作人员');
        }
      });
    });
  };

  $.extend(user, {
    afterLogin: function() {
      popMsg("Hi~ " + user.username + ", 让我们一起开始吧...:)");
      app.btmMenu = new cf.view.btmMenu({
        auto: true,
        data: {
          menus: cf._bMenu
        },
        afterClick: function() {
          var ref;
          app.setFade();
          if ((ref = cf.slider) != null) {
            ref.reset();
          }
          return app.btmMenu.show();
        }
      });
      app.setFade();
      return util.loadPic('body');
    },
    afterLogout: function() {
      id = app.myGroup.id;
      util.cleanLocal(id + "-" + this.id);
      return location.href = _nav(id).substr(2);
    }
  });

  $.extend(cf.view.form.prototype, {
    beforeForm: function() {
      if (app.isFade()) {
        app.unsetFade();
        return this._setFade = true;
      }
    },
    afterForm: function() {
      return this._setFade && app.setFade();
    }
  });

  threadList = require('./taskList');

  app.enhance({
    routes: {
      '!/group/:id': 'group',
      '!/group/:id/post': 'post',
      '!/group/:id/task': 'task'
    },
    post: function(id) {
      return app.dm.l(threadList, ctn, {
        title: iy('thread'),
        mode: 'card',
        head: true,
        backBtn: cf._backBtnStr,
        self: true,
        foot: true,
        criteriaOpt: function() {
          return {
            q: {
              cat: 'post',
              'group._id': id,
              'user._id': user.id
            }
          };
        },
        btns: [
          {
            icon: 'plus',
            key: 'addOne',
            label: iim('m_add', 'thread'),
            cls: 'btn btn-sm'
          }
        ],
        events: {
          'click .addOne': function() {
            var rps;
            rps = this.collection;
            return app.dm.add('slide', 'thread', {
              _saveSuccess: function(model) {
                rps.add(model, {
                  at: 0
                });
                return cf.slider.slidePage();
              },
              data: function() {
                return {
                  cat: 'post',
                  group: app.myGroup.pick('_id', 'title')
                };
              }
            });
          }
        }
      });
    },
    task: function(id) {
      return app.dm.l(threadList, ctn, {
        title: iy('task'),
        mode: 'card',
        backBtn: cf._backBtnStr,
        head: true,
        foot: true,
        self: true,
        events: function() {
          return {
            'click [key]': function(e) {
              var d, rps;
              rps = this.collection;
              d = app.myGroup.get('task')[util.ct(e).index()].subData;
              $.extend(d, {
                focus: true,
                data: function() {
                  return {
                    cat: 'task',
                    form: _.pick(d, '_id', 'code', 'title'),
                    group: app.myGroup.pick('_id', 'title')
                  };
                },
                _saveSuccess: function(model) {
                  rps.add(model, {
                    at: 0
                  });
                  return cf.slider.slidePage();
                }
              });
              return app.dm.form('slide', d.entity, d);
            }
          };
        },
        callback: function() {
          var b, it, len;
          if ((len = app.myGroup.get('task').length) > 1) {
            return this.$('.toolbar').append(cf.rtp('btnGroup', {
              style: 'danger',
              btns: (function() {
                var i, len1, ref, results;
                ref = app.myGroup.get('task');
                results = [];
                for (i = 0, len1 = ref.length; i < len1; i++) {
                  it = ref[i];
                  results.push({
                    title: it.subData.title.dStr(4),
                    key: it.subData.code
                  });
                }
                return results;
              })()
            }));
          } else if (len === 1) {
            b = app.myGroup.get('task')[0];
            return this.$('.toolbar').mk('a', {
              "class": "btn btn-primary",
              key: b.subData.code
            }, tu.icon('plus') + b.title.dStr(4));
          }
        },
        criteriaOpt: function() {
          return {
            q: {
              cat: 'task',
              'group._id': id,
              'user._id': user.id
            }
          };
        }
      });
    },
    group: function(id) {
      return this.dm.model(ctn, 'group', id, {
        tmpl: 'groupDetail',
        title: tu.adt(app.myGroup.get('title'), 22),
        toFetch: false,
        inCtx: 'myGroup',
        backBtn: false,
        toolbar: true,
        btns: [
          {
            icon: 'edit',
            cls: 'btn btn-sm memberInfo'
          }
        ],
        events: {
          'click .memberInfo': function() {
            return cf.dm.l('pageEditor', 'slide', {
              entity: 'groupMember',
              tip: ii('m_member_tip'),
              title: ii('groupNameCard'),
              model: app.memberInfo,
              prop: cf._groupInfo
            });
          },
          'click .cat label': function(e) {
            var cat, fo;
            cat = util.ct(e).attr('key');
            fo = {
              'group._id': id,
              top: {
                $ne: true
              }
            };
            if (cat !== 'newest') {
              fo.cat = cat;
            }
            if (this.itemsCtn == null) {
              this.itemsCtn = $('.items');
            }
            return new threadList({
              parent: this.itemsCtn,
              foot: true,
              max: 10,
              ctnHeight: '10rem',
              criteriaOpt: function() {
                return {
                  q: fo
                };
              },
              afterAddAll: function() {
                if (cat === 'newest') {
                  return $('.mThread').text(this.collection.count);
                }
              }
            });
          }
        },
        _attrs: function() {
          return 'title,idea,introduction,refFile';
        },
        callback: function() {
          var d;
          this.$el.removeClass('loadingData');
          d = this.data;
          this.dCtn = this.$('.dCtn');
          app.dm.collection(this.dCtn, 'groupMember', {
            el: function() {
              return $.mk('a', {
                href: util.navUrl('group', id, 'member'),
                "class": 'list-group-item m-b-h p-y-h fellow'
              });
            },
            inCtx: 'groupMember',
            showCount: 5,
            mode: null,
            foot: false,
            tagClass: null,
            css: {
              height: '3.5rem'
            },
            setContent: function() {
              this.$el.append(cf.rtp('cols', {
                cls: 'row',
                cols: [
                  {
                    cls: 'col-xs-2 p-x-0 text-xs-center',
                    text: ii('member')
                  }, {
                    cls: 'col-xs-9 refresh p-r-0'
                  }, {
                    cls: 'col-xs-1 text-faded p-x-0',
                    text: tu.icon('chevron-right')
                  }
                ]
              }));
              return this.ctn = this.$('.refresh');
            },
            criteriaOpt: function() {
              return {
                q: {
                  'group._id': d._id
                }
              };
            },
            modelOpt: {
              className: 'img-circle m-r-h',
              tagName: 'img',
              attributes: function() {
                return {
                  src: tu.resPath(cf.community, 'portrait/' + this.model.get('user')._id + '.jpg'),
                  title: this.model.get('username'),
                  style: 'width: 2.5rem;margin-top:0'
                };
              }
            },
            afterAddAll: function() {
              var earn, m, weeks;
              $('.mCount').text(this.collection.length);
              earn = 0;
              weeks = 1;
              m = app.groupMember.length;
              app.groupMember.each(function(it) {
                var s, stat;
                if (stat = it.get('stat')) {
                  weeks = stat.length;
                  s = stat[0];
                  if (s) {
                    return earn += s.earn;
                  }
                }
              });
              return $('.mFee').text((weeks - 1) * 10 * m - earn);
            }
          });
          app.dm.l(threadList, this.dCtn, {
            cleanAll: false,
            className: 'm-b-1',
            mode: 'blank',
            head: false,
            foot: false,
            css: {
              height: '2.5rem'
            },
            criteriaOpt: function() {
              return {
                q: {
                  'group._id': id,
                  isTop: true
                },
                max: 5
              };
            },
            itemContext: function(d) {
              return {
                brief: tu.label(ii('top'), 'danger') + ' ' + d.title
              };
            }
          });
          this.dCtn.mk('div', {
            "class": 'text-xs-center cat m-b-h'
          }, cf.rtp('crBtn', {
            type: 'radio',
            style: 'primary-outline btn-sm',
            btns: [
              {
                title: ii('newest'),
                key: 'newest'
              }, {
                title: ii('task'),
                key: 'task'
              }, {
                title: ii('post'),
                key: 'post'
              }
            ]
          }));
          this.dCtn.mk('div', {
            "class": 'items'
          });
          this.dCtn.find("[key='newest']").trigger('click');
          if (cf.isMgm()) {
            return cf.loadJS(cf.modPath + "mgm.js", function() {
              return cf.groupMgm();
            });
          }
        }
      });
    }
  });

  require('./thread');

  require('./member');

}).call(this);

//# sourceMappingURL=app.js.map
