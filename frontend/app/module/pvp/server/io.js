// Generated by CoffeeScript 1.12.7
(function() {
  var apiMap, io, ip, rg, sendChatMsg, sendUserList;

  io = require('socket.io').listen(server);

  rg = require('./grpc/rg_client');

  ip = require('ip');

  apiMap = {
    AccountInfo: 0x00010001,
    AccountUserCookieRequest: 0x00010002,
    GameGetInfo: 0x00030001,
    GameGetList: 0x00030002,
    GameOnline: 0x00030003,
    GameOffline: 0x00030004,
    GameRoundCreate: 0x00030005,
    GameRoundData: 0x00030006,
    GameRoundProgress: 0x00030007,
    GameRoundStart: 0x00030008,
    GameRoundStop: 0x00030009,
    RoomGameReady: 0x00040001,
    RoomGameCancelReady: 0x00040002,
    RoomGameStart: 0x00040003,
    RoomGameOver: 0x00040004,
    RoomGameUpdate: 0x00040005,
    RoomKickOut: 0x00040006,
    RoomCreate: 0x00040007,
    RoomUpdate: 0x00040008,
    RoomEnter: 0x00040009,
    RoomLeavel: 0x00040010,
    RoomGet: 0x00040011,
    RoomOnline: 0x00040012,
    RoomOffline: 0x00040013,
    RoomGetList: 0x00040014,
    RoomGetPlayerList: 0x00040015,
    RoomMsg: 0x00040016,
    RoomMyRoom: 0x00040017,
    StatusOnLine: 0x00050001,
    StatusOffLine: 0x00050002,
    StatusIsLine: 0x00050003,
    StatusGetCID: 0x00050004
  };

  io.sockets.on('connection', function(st) {
    log('start');
    st.on('event', function(d) {});
    st.on('login', function(d) {
      log(d);
      st.cid = ip.address();
      return rg.exec(apiMap.AccountUserCookieRequest, {
        sid: d.sid
      }, function(e, res) {
        var rdata;
        log(arguments);
        if (res.ret === 1) {
          log('after login');
          log(res);
          rdata = JSON.parse(res.data);
          log(rdata.uid);
          rg.exec(apiMap.StatusOnLine, {
            uid: rdata.uid,
            cid: st.cid
          }, function(e, res) {
            if (res.ret !== 1) {
              log(arguments);
              return log('用户状态链接失败');
            }
          });
          st.uid = rdata.uid;
          return st.emit('login', rdata);
        } else {
          return st.emit('loginError');
        }
      });
    });
    st.on('myRoom', function(d) {});
    st.on('chatting', function(d) {
      log('chatting...');
      log(d);
      return sendChatMsg(st, d.msg);
    });
    st.on('hotRooms', function(d) {
      log('hot rooms');
      return rg.exec(apiMap.RoomGetList, d, function(e, res) {
        log(arguments);
        return st.emit('hotRooms', res.data);
      });
    });
    st.on('getRoomInfo', function(d) {
      return rg.exec(apiMap.RoomGet, d, function(e, res) {
        log('getRoomInfo');
        log(res.data);
        return st.emit('getRoomInfo', res.data);
      });
    });
    st.on('enterRoom', function(d) {
      st.join(d.rid);
      st.rid = d.rid;
      st.nick = d.nick;
      return rg.exec(apiMap.RoomEnter, {
        uid: d.uid,
        rid: d.rid
      }, function(e, res) {
        log('has entered Room');
        log(arguments);
        st.emit('enterRoom', {});
        return sendChatMsg(st, "欢迎 <strong>" + d.nick + "</strong> 进入房间");
      });
    });
    st.on('createRoom', function(d) {
      log('createRoom');
      log(d);
      return rg.exec(apiMap.RoomCreate, d, function(e, res) {
        log(arguments);
        return st.emit('createRoom', res.data);
      });
    });
    st.on('roomPlayerList', function(d) {
      return sendUserList(st, d);
    });
    st.on('setReady', function(d) {
      var action, type;
      type = util.del('type', d);
      action = type === 'ready' ? 'RoomGameReady' : 'RoomGameCancelReady';
      return rg.exec(apiMap[action], d, function(e, res) {
        return sendUserList(st);
      });
    });
    st.on('startGame', function() {
      var d;
      d = {};
      return io.sockets["in"](st.rid).emit('startGame', d);
    });
    st.on('selectGame', function(d) {
      return rg.exec(apiMap.GameGetList, d, function(e, res) {
        return st.emit('selectGame', res.data);
      });
    });
    st.on('pickGame', function(d) {
      log(d);
      return rg.exec(apiMap.RoomGameUpdate, d, function(e, res) {
        log(arguments);
        return st.emit('pickGame', res.data);
      });
    });
    st.on('kickUser', function(d) {
      return rg.exec(apiMap.RoomKickOut, d, function(e, res) {
        sendChatMsg(st, "用户 " + " 已经被移除房间");
        return io.sockets["in"](st.rid).emit('kickUser', {
          uid: d.uid
        });
      });
    });
    st.on('gmStart', function(d) {
      log('gmStart');
      return rg.exec(apiMap.GameRoundStart, d, function(e, res) {
        return log('end gmStart');
      });
    });
    st.on('gmEnd', function(d) {
      return rg.exec(apiMap.GameRoundStop, d, function(e, res) {
        return log('gmEnd');
      });
    });
    st.on('gmProc', function(d) {
      log(d);
      return rg.exec(apiMap.GameRoundProgress, d, function(e, res) {
        return log('gmProc');
      });
    });
    st.on('disconnect', function() {
      log('disconnect');
      log(st.uid);
      log(st.cid);
      rg.exec(apiMap.StatusOffLine, {
        uid: st.uid
      }, function(e, res) {
        log('return disconnect');
        log(arguments);
        if (res.ret !== 1) {
          return popMsg('用户注销失败', 'warning');
        } else {
          st.leave(st.rid);
          rg.exec(apiMap.RoomLeavel, {
            rid: st.rid,
            uid: st.uid
          }, function(e, res) {
            return log('leave room');
          });
          sendUserList(st);
          sendChatMsg("<strong>" + st.nick + "</strong> 离开了房间");
          return rg.exec(apiMap.RoomGet, {
            rid: st.rid
          }, function(e, res) {
            log('getRoomInfo');
            log(res.data);
            return st.emit('getRoomInfo', res.data);
          });
        }
      });
      return log('end');
    });
    st.on('hotRoom', function() {
      return st.emit('hotRoom');
    });
    st.on('topSlide', function() {
      return st.emit('topSlide');
    });
    return st.on('*', function() {
      log('******');
      return log(arguments);
    });
  });

  sendChatMsg = function(st, msg) {
    return io.sockets["in"](st.rid).emit('chatting', {
      msg: msg
    });
  };

  sendUserList = function(st, d) {
    if (d == null) {
      d = {
        rid: st.rid,
        offset: '0',
        max: '10'
      };
    }
    return rg.exec(apiMap.RoomGetPlayerList, d, function(e, res) {
      log('RoomGetPlayerList');
      return io.sockets["in"](st.rid).emit('roomPlayerList', res.data);
    });
  };

}).call(this);

//# sourceMappingURL=io.js.map
