// Generated by CoffeeScript 1.12.7
(function() {
  var chatMsg, countDown, entities, entity, loadGame;

  chatMsg = function(d) {
    d.time = new Date().pattern();
    return d;
  };

  loadGame = function(url, cb) {
    var fr;
    fr = util.getIFrame('gmFrame', url, '100%', '100%');
    $('body').append(fr);
    app.btmMenu.hide();
    return fr[0].onload = cb;
  };

  entities = cf.model.entities;

  entity = cf.model.entity;

  if (app.roomList == null) {
    app.roomList = new entities;
  }

  if (app.room == null) {
    app.room = new entity;
  }

  if (app.chatList == null) {
    app.chatList = new entities;
  }

  if (app.roomPlayerList == null) {
    app.roomPlayerList = new entities;
  }

  app.enhance({
    routes: {
      '!/room': 'rooms',
      '!/room/:id': 'room'
    },
    rooms: function() {
      cf.leaveRoom();
      app.btmMenu.show();
      this.dm.portal(this.ctn, {
        title: '房间列表',
        cleanAll: true,
        tagClass: 'main',
        head: true,
        events: {
          'click .cqa': function() {
            return app.dm.tag('air', {
              title: '常见问题',
              closeBtn: true,
              tmpl: 'cqa',
              tagClass: 'modal-body',
              modalCls: 'infoCls'
            });
          },
          'click .agreement': function() {
            return app.dm.tag('air', {
              title: '猎豹H5竞技平台服务协议',
              tmpl: 'agreement',
              modalCls: 'infoCls',
              tagClass: 'modal-body',
              foot: true,
              callback: function() {
                var btn;
                btn = $(tu.btn('确认', 'closeDlg', 'primary'));
                btn.attr('data-dismiss', 'modal');
                return $('.modal-footer').append(btn);
              }
            });
          }
        },
        plugins: function() {
          return [
            {
              tmpl: 'roomTopBtn',
              parent: '.main',
              cleanAll: true
            }, {
              type: 'collection',
              attrs: {
                parent: '.main',
                cleanAll: false,
                toFetch: false,
                className: 'mobView panel-pvp room',
                collection: app.roomList,
                modelOpt: {
                  tmpl: 'roomItem',
                  className: 'item row',
                  tagName: 'a'
                }
              }
            }
          ];
        },
        callback: cf.roomBtn
      });
      return se('RoomGetList', {
        offset: '0',
        max: '10'
      });
    },
    room: function(id) {
      app.btmMenu.hide();
      se('RoomEnter', {
        rid: id,
        uid: user.id
      });
      return this.dm.portal(this.ctn, {
        cleanAll: true,
        title: '房间',
        tagClass: 'main',
        tmpl: 'topView',
        events: {
          'click .readyToStared .ready': function(e) {
            var t;
            se('RoomGameReady', {
              uid: user.id,
              rid: id,
              type: 'ready'
            });
            t = util.ct(e).parent();
            t.removeClass('readyToStared');
            return t.addClass('unreadyToStared');
          },
          'click .unreadyToStared .unready': function(e) {
            var t;
            se('RoomGameCancelReady', {
              uid: user.id,
              rid: id,
              type: 'unready'
            });
            t = util.ct(e).parent();
            t.removeClass('unreadyToStared');
            return t.addClass('readyToStared');
          },
          'click .setting': function(e) {
            cf._pickGame = 'change';
            return se('GameGetList', {
              max: '10',
              offest: '0',
              tid: '1'
            });
          },
          'click .leaveRoom': function(e) {
            return cf.leaveRoom();
          },
          'click .startGame': function(e) {
            return se('RoomGameStart', {
              rid: id,
              uid: user.id
            });
          },
          'click .sendMsg': function(e) {
            var m, t;
            t = this.$('#msg');
            if (m = t.val()) {
              se('RoomMsg', {
                uid: user.id,
                rid: id,
                mtype: '1',
                msg: m
              });
              return t.val('');
            }
          }
        },
        plugins: function() {
          return [
            {
              type: 'model',
              attrs: {
                mode: null,
                parent: '.topView-body',
                className: 'mod-roomInfo',
                cleanAll: false,
                tmpl: 'room',
                reRendered: true,
                toFetch: false,
                model: app.room,
                events: {
                  'click .kickOut': function(e) {
                    var d;
                    if (user.roomInfo.host) {
                      d = this.model;
                      return se('RoomKickOut', {
                        uid: d.get('user').uid,
                        rid: id,
                        cid: user.id
                      });
                    }
                  }
                }
              }
            }, {
              type: 'collection',
              attrs: {
                mode: null,
                parent: '.topView-ft',
                className: 'l-roomers row-pvp',
                tagName: 'ul',
                toFetch: false,
                cleanAll: false,
                collection: app.roomPlayerList,
                modelOpt: {
                  tmpl: 'mateItem',
                  className: 'li-roomers col-xs-3',
                  tagName: 'li'
                },
                events: {
                  'click .li-roomers': function(e) {
                    var d, dd;
                    util.setActive(e);
                    if (user.roomInfo && user.roomInfo.host) {
                      d = this.findData(e).toJSON();
                      dd = {
                        status: d.status,
                        user: _.pick(d, 'nick', 'avatar', 'uid')
                      };
                      if (d.uid === user.id) {
                        dd.host = true;
                        dd.picked = false;
                      } else {
                        dd.picked = true;
                      }
                      return app.room.set(dd);
                    }
                  }
                }
              }
            }, {
              type: 'collection',
              attrs: {
                mode: null,
                parent: '.btnSend',
                tagName: 'ul',
                className: 'l-check',
                cleanAll: false,
                toFetch: false,
                collection: app.chatList,
                modelOpt: {
                  tmpl: 'checkItem',
                  className: 'li-check row',
                  tagName: 'li'
                }
              }
            }
          ];
        }
      });
    }
  });

  so('RoomGetList', function(d) {
    return app.roomList.reset(d.entities);
  });

  so('RoomEnter', function(d) {
    var id;
    id = util.atHash(2);
    app.chatList.reset();
    return se('RoomGetInfo', {
      rid: id
    });
  });

  so('RoomGetPlayerList', function(d) {
    var btn, ents, i, it, len;
    if (util.atHash(2)) {
      ents = d.entities;
      app.roomPlayerList.reset(ents);
      btn = $('.startGame');
      btn.addClass('disabled');
      if (ents && ents.length > 1) {
        for (i = 0, len = ents.length; i < len; i++) {
          it = ents[i];
          if (it.status === '0') {
            return;
          }
        }
        return btn.removeClass('disabled');
      }
    }
  });

  so('RoomGameReady', function() {
    return cf.playerList(user.roomInfo.rid);
  });

  so('RoomGameCancelReady', function() {
    return cf.playerList(user.roomInfo.rid);
  });

  so('RoomKickOut', function(d) {
    var ref, rp;
    if (!d) {
      return;
    }
    if (d.uid === user.id) {
      popMsg('您已经被房主移除房间', 'warning');
      return cf.r('room');
    } else {
      rp = app.roomPlayerList;
      if ((ref = rp.findWhere({
        'uid': d.uid
      })) != null) {
        ref.destroy();
      }
      if (user.id === d.fuid) {
        rp.view.$el.children().first().trigger('click');
        return popMsg('移除成功');
      }
    }
  });

  so('RoomMsg', function(d) {
    if (d) {
      return app.chatList.add(chatMsg(d));
    }
  });

  so('RoomGetInfo', function(d) {
    if (util.atHash(1) === 'room' && util.atHash(2)) {
      $('.panel-title strong').text(d.rname);
      if (user.id === d.hostuid) {
        d.host = true;
        if (!$('.setting').length) {
          $('.panel-heading').append(tu.icon('cog', 'a', '', 'btn pull-right setting'));
        }
      }
      d.user = user.data;
      user.roomInfo = d;
      app.room.set(d);
      return cf.playerList(d.rid);
    }
  });

  countDown = function(sec) {
    var cd;
    if (sec === 0) {
      if (cf._cd) {
        cf._cd.remove();
        cf._cd = null;
      }
      return;
    }
    if (cf._cd) {
      cf._cd.text(sec);
      return cf._cd.addClass('secMon');
    } else {
      cd = $('<div class="countDown"></div>');
      $('body').append(cd);
      cf._cd = cd;
      cf._cd.text(sec);
      return cf._cd.addClass('secMon');
    }
  };

  so('RoomGameStart', function(d) {
    var r, sc;
    countDown(3);
    r = user.roomInfo;
    sc = 0;
    return cf._si = setInterval(function() {
      var dm, pr, ref;
      sc++;
      switch (sc) {
        case 1:
          return countDown(2);
        case 2:
          return countDown(1);
        case 3:
          countDown(0);
          ref = r.game.url.split('://'), pr = ref[0], dm = ref[1];
          dm = dm.split('/')[0];
          clearInterval(cf._si);
          return loadGame(r.game.url, function() {
            var opt;
            opt = {
              uid: user.id,
              rid: r.rid
            };
            window.frames[0].postMessage(opt, pr + "://" + dm);
            return se('GameRoundStart', {
              uid: user.id
            });
          });
      }
    }, 1000);
  });

  so('RoomGameOver', function(d) {
    se('RoomGetInfo', {
      rid: user.roomInfo.rid
    });
    return app.dm.tb('air', 'common', {
      title: '本局排名',
      noLastTime: true,
      itemBtns: [],
      toFetch: false,
      data: d.entities,
      foot: true,
      cols: [
        {
          code: 'rank',
          label: '排名',
          w: '40px',
          showText: function() {
            var idx;
            idx = arguments[3]._idx + 1;
            return tu.iconx(idx, idx);
          }
        }, {
          code: 'avatar',
          label: '头像',
          showText: function(d) {
            return "<img class='img-responsive' src='" + d + "'/>";
          }
        }, _ep('nick', {
          label: '昵称'
        }), _ep('appr', {
          label: '分数'
        })
      ],
      afterAddAll: function() {
        var btn;
        btn = $(tu.btn('返回游戏', null, 'primary', null, true));
        btn.attr('data-dismiss', 'modal');
        return this.foot.show().append(btn);
      }
    });
  });

  so('GameRoundTimeout', function(d) {
    var opt;
    opt = {
      timeout: true
    };
    return window.frames[0].postMessage(opt, pr + "://" + dm);
  });

  so('RoomCreate', function(d) {
    popMsg('房间创建成功');
    return cf.r('room/' + d.rid);
  });

  window.addEventListener('message', function(e) {
    var ref, res;
    res = e.data.opt;
    if ((ref = e.data.type) === 'GameRoundStop' || ref === 'GameRoundProgress') {
      res = {
        uid: user.id,
        appr: e.data.opt
      };
    }
    se(e.data.type, res);
    if (e.data.type === 'GameRoundStop') {
      clearInterval(cf._si);
      cf._si = null;
      return $('#gmFrame').remove();
    }
  }, false);

}).call(this);

//# sourceMappingURL=room.js.map
